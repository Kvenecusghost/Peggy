
Peggy_tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008434  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008854  08008854  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800885c  0800885c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000070  080088d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  080088d4  00020398  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000286c3  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004970  00000000  00000000  0004875d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  0004d0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001648  00000000  00000000  0004e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d37b  00000000  00000000  0004ff00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199d6  00000000  00000000  0006d27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a646b  00000000  00000000  00086c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d0bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006748  00000000  00000000  0012d110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000070 	.word	0x20000070
 8000154:	00000000 	.word	0x00000000
 8000158:	08008554 	.word	0x08008554

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000074 	.word	0x20000074
 8000174:	08008554 	.word	0x08008554

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b96c 	b.w	8000468 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	468e      	mov	lr, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	f040 8082 	bne.w	80002be <__udivmoddi4+0x116>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4617      	mov	r7, r2
 80001be:	d946      	bls.n	800024e <__udivmoddi4+0xa6>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c6:	f1c2 0120 	rsb	r1, r2, #32
 80001ca:	fa05 f302 	lsl.w	r3, r5, r2
 80001ce:	fa20 f101 	lsr.w	r1, r0, r1
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea41 0e03 	orr.w	lr, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbe fcf8 	udiv	ip, lr, r8
 80001e4:	b2b9      	uxth	r1, r7
 80001e6:	fb08 ee1c 	mls	lr, r8, ip, lr
 80001ea:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80001ee:	fb0c f001 	mul.w	r0, ip, r1
 80001f2:	4298      	cmp	r0, r3
 80001f4:	d90a      	bls.n	800020c <__udivmoddi4+0x64>
 80001f6:	18fb      	adds	r3, r7, r3
 80001f8:	f10c 35ff 	add.w	r5, ip, #4294967295
 80001fc:	f080 8116 	bcs.w	800042c <__udivmoddi4+0x284>
 8000200:	4298      	cmp	r0, r3
 8000202:	f240 8113 	bls.w	800042c <__udivmoddi4+0x284>
 8000206:	f1ac 0c02 	sub.w	ip, ip, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a1b      	subs	r3, r3, r0
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 f101 	mul.w	r1, r0, r1
 8000220:	42a1      	cmp	r1, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x90>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8101 	bcs.w	8000430 <__udivmoddi4+0x288>
 800022e:	42a1      	cmp	r1, r4
 8000230:	f240 80fe 	bls.w	8000430 <__udivmoddi4+0x288>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	1a64      	subs	r4, r4, r1
 800023a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800023e:	2100      	movs	r1, #0
 8000240:	b11e      	cbz	r6, 800024a <__udivmoddi4+0xa2>
 8000242:	40d4      	lsrs	r4, r2
 8000244:	2300      	movs	r3, #0
 8000246:	e9c6 4300 	strd	r4, r3, [r6]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	b902      	cbnz	r2, 8000252 <__udivmoddi4+0xaa>
 8000250:	deff      	udf	#255	; 0xff
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	2a00      	cmp	r2, #0
 8000258:	d14f      	bne.n	80002fa <__udivmoddi4+0x152>
 800025a:	1bcb      	subs	r3, r1, r7
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f f887 	uxth.w	r8, r7
 8000264:	2101      	movs	r1, #1
 8000266:	fbb3 fcfe 	udiv	ip, r3, lr
 800026a:	0c25      	lsrs	r5, r4, #16
 800026c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000270:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000274:	fb08 f30c 	mul.w	r3, r8, ip
 8000278:	42ab      	cmp	r3, r5
 800027a:	d907      	bls.n	800028c <__udivmoddi4+0xe4>
 800027c:	197d      	adds	r5, r7, r5
 800027e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000282:	d202      	bcs.n	800028a <__udivmoddi4+0xe2>
 8000284:	42ab      	cmp	r3, r5
 8000286:	f200 80e7 	bhi.w	8000458 <__udivmoddi4+0x2b0>
 800028a:	4684      	mov	ip, r0
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a3      	uxth	r3, r4
 8000290:	fbb5 f0fe 	udiv	r0, r5, lr
 8000294:	fb0e 5510 	mls	r5, lr, r0, r5
 8000298:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	45a0      	cmp	r8, r4
 80002a2:	d907      	bls.n	80002b4 <__udivmoddi4+0x10c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	d202      	bcs.n	80002b2 <__udivmoddi4+0x10a>
 80002ac:	45a0      	cmp	r8, r4
 80002ae:	f200 80d7 	bhi.w	8000460 <__udivmoddi4+0x2b8>
 80002b2:	4618      	mov	r0, r3
 80002b4:	eba4 0408 	sub.w	r4, r4, r8
 80002b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002bc:	e7c0      	b.n	8000240 <__udivmoddi4+0x98>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80af 	beq.w	8000426 <__udivmoddi4+0x27e>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d14b      	bne.n	8000374 <__udivmoddi4+0x1cc>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0x13e>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80b7 	bhi.w	8000454 <__udivmoddi4+0x2ac>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0303 	sbc.w	r3, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	469e      	mov	lr, r3
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0aa      	beq.n	800024a <__udivmoddi4+0xa2>
 80002f4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002f8:	e7a7      	b.n	800024a <__udivmoddi4+0xa2>
 80002fa:	f1c2 0c20 	rsb	ip, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	4097      	lsls	r7, r2
 8000304:	fa20 f00c 	lsr.w	r0, r0, ip
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000310:	4318      	orrs	r0, r3
 8000312:	fbbc f1fe 	udiv	r1, ip, lr
 8000316:	0c05      	lsrs	r5, r0, #16
 8000318:	fb0e cc11 	mls	ip, lr, r1, ip
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000324:	fb01 f308 	mul.w	r3, r1, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	fa04 f402 	lsl.w	r4, r4, r2
 800032e:	d909      	bls.n	8000344 <__udivmoddi4+0x19c>
 8000330:	197d      	adds	r5, r7, r5
 8000332:	f101 3cff 	add.w	ip, r1, #4294967295
 8000336:	f080 808b 	bcs.w	8000450 <__udivmoddi4+0x2a8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	f240 8088 	bls.w	8000450 <__udivmoddi4+0x2a8>
 8000340:	3902      	subs	r1, #2
 8000342:	443d      	add	r5, r7
 8000344:	1aeb      	subs	r3, r5, r3
 8000346:	b285      	uxth	r5, r0
 8000348:	fbb3 f0fe 	udiv	r0, r3, lr
 800034c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000350:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000354:	fb00 f308 	mul.w	r3, r0, r8
 8000358:	42ab      	cmp	r3, r5
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x1c4>
 800035c:	197d      	adds	r5, r7, r5
 800035e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000362:	d271      	bcs.n	8000448 <__udivmoddi4+0x2a0>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d96f      	bls.n	8000448 <__udivmoddi4+0x2a0>
 8000368:	3802      	subs	r0, #2
 800036a:	443d      	add	r5, r7
 800036c:	1aeb      	subs	r3, r5, r3
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	e778      	b.n	8000266 <__udivmoddi4+0xbe>
 8000374:	f1c1 0c20 	rsb	ip, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 f70c 	lsr.w	r7, r2, ip
 800037e:	431f      	orrs	r7, r3
 8000380:	fa20 f40c 	lsr.w	r4, r0, ip
 8000384:	fa05 f301 	lsl.w	r3, r5, r1
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa25 f50c 	lsr.w	r5, r5, ip
 8000390:	431c      	orrs	r4, r3
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbb5 f9fe 	udiv	r9, r5, lr
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	fb0e 5519 	mls	r5, lr, r9, r5
 80003a0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80003a4:	fb09 fa08 	mul.w	sl, r9, r8
 80003a8:	45aa      	cmp	sl, r5
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f301 	lsl.w	r3, r0, r1
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x21e>
 80003b4:	197d      	adds	r5, r7, r5
 80003b6:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ba:	d247      	bcs.n	800044c <__udivmoddi4+0x2a4>
 80003bc:	45aa      	cmp	sl, r5
 80003be:	d945      	bls.n	800044c <__udivmoddi4+0x2a4>
 80003c0:	f1a9 0902 	sub.w	r9, r9, #2
 80003c4:	443d      	add	r5, r7
 80003c6:	eba5 050a 	sub.w	r5, r5, sl
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb5 f0fe 	udiv	r0, r5, lr
 80003d0:	fb0e 5510 	mls	r5, lr, r0, r5
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb00 f808 	mul.w	r8, r0, r8
 80003dc:	45a0      	cmp	r8, r4
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x248>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f100 35ff 	add.w	r5, r0, #4294967295
 80003e6:	d22d      	bcs.n	8000444 <__udivmoddi4+0x29c>
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d92b      	bls.n	8000444 <__udivmoddi4+0x29c>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f4:	eba4 0408 	sub.w	r4, r4, r8
 80003f8:	fba0 8902 	umull	r8, r9, r0, r2
 80003fc:	454c      	cmp	r4, r9
 80003fe:	46c6      	mov	lr, r8
 8000400:	464d      	mov	r5, r9
 8000402:	d319      	bcc.n	8000438 <__udivmoddi4+0x290>
 8000404:	d016      	beq.n	8000434 <__udivmoddi4+0x28c>
 8000406:	b15e      	cbz	r6, 8000420 <__udivmoddi4+0x278>
 8000408:	ebb3 020e 	subs.w	r2, r3, lr
 800040c:	eb64 0405 	sbc.w	r4, r4, r5
 8000410:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000414:	40ca      	lsrs	r2, r1
 8000416:	ea4c 0202 	orr.w	r2, ip, r2
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c6 2400 	strd	r2, r4, [r6]
 8000420:	2100      	movs	r1, #0
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e70e      	b.n	800024a <__udivmoddi4+0xa2>
 800042c:	46ac      	mov	ip, r5
 800042e:	e6ed      	b.n	800020c <__udivmoddi4+0x64>
 8000430:	4618      	mov	r0, r3
 8000432:	e701      	b.n	8000238 <__udivmoddi4+0x90>
 8000434:	4543      	cmp	r3, r8
 8000436:	d2e6      	bcs.n	8000406 <__udivmoddi4+0x25e>
 8000438:	ebb8 0e02 	subs.w	lr, r8, r2
 800043c:	eb69 0507 	sbc.w	r5, r9, r7
 8000440:	3801      	subs	r0, #1
 8000442:	e7e0      	b.n	8000406 <__udivmoddi4+0x25e>
 8000444:	4628      	mov	r0, r5
 8000446:	e7d3      	b.n	80003f0 <__udivmoddi4+0x248>
 8000448:	4660      	mov	r0, ip
 800044a:	e78f      	b.n	800036c <__udivmoddi4+0x1c4>
 800044c:	4681      	mov	r9, r0
 800044e:	e7ba      	b.n	80003c6 <__udivmoddi4+0x21e>
 8000450:	4661      	mov	r1, ip
 8000452:	e777      	b.n	8000344 <__udivmoddi4+0x19c>
 8000454:	4608      	mov	r0, r1
 8000456:	e74b      	b.n	80002f0 <__udivmoddi4+0x148>
 8000458:	f1ac 0c02 	sub.w	ip, ip, #2
 800045c:	443d      	add	r5, r7
 800045e:	e715      	b.n	800028c <__udivmoddi4+0xe4>
 8000460:	3802      	subs	r0, #2
 8000462:	443c      	add	r4, r7
 8000464:	e726      	b.n	80002b4 <__udivmoddi4+0x10c>
 8000466:	bf00      	nop

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000478:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800047a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4013      	ands	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000490:	68fb      	ldr	r3, [r7, #12]
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a0:	2002      	movs	r0, #2
 80004a2:	f7ff ffe3 	bl	800046c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	2001      	movs	r0, #1
 80004a8:	f7ff ffe0 	bl	800046c <LL_AHB2_GRP1_EnableClock>

}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 fba3 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f81d 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_SUBGHZ_Init();
 80004be:	f000 f8b7 	bl	8000630 <MX_SUBGHZ_Init>
  MX_GPIO_Init();
 80004c2:	f7ff ffeb 	bl	800049c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004c6:	f000 fa4f 	bl	8000968 <MX_USART1_UART_Init>
  MX_SubGHz_Phy_Init();
 80004ca:	f006 fb48 	bl	8006b5e <MX_SubGHz_Phy_Init>
  MX_USART2_UART_Init();
 80004ce:	f000 fa97 	bl	8000a00 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		uint8_t *c = "hello";
 80004d2:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <main+0x40>)
 80004d4:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, c, 5, 100);
 80004d6:	2364      	movs	r3, #100	; 0x64
 80004d8:	2205      	movs	r2, #5
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <main+0x44>)
 80004de:	f002 fde8 	bl	80030b2 <HAL_UART_Transmit>
		HAL_Delay(500);
 80004e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e6:	f000 f8cd 	bl	8000684 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80004ea:	f006 fb41 	bl	8006b70 <MX_SubGHz_Phy_Process>
	while (1) {
 80004ee:	e7f0      	b.n	80004d2 <main+0x22>
 80004f0:	0800856c 	.word	0x0800856c
 80004f4:	2000026c 	.word	0x2000026c

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09a      	sub	sp, #104	; 0x68
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2248      	movs	r2, #72	; 0x48
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f007 fb72 	bl	8007bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 0308 	add.w	r3, r7, #8
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
 800051c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800051e:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <SystemClock_Config+0xa0>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <SystemClock_Config+0xa0>)
 8000528:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052c:	6013      	str	r3, [r2, #0]
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <SystemClock_Config+0xa0>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800053a:	2320      	movs	r3, #32
 800053c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800053e:	2301      	movs	r3, #1
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000542:	2300      	movs	r3, #0
 8000544:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000546:	2360      	movs	r3, #96	; 0x60
 8000548:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800054a:	2300      	movs	r3, #0
 800054c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	4618      	mov	r0, r3
 8000554:	f001 f8ac 	bl	80016b0 <HAL_RCC_OscConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800055e:	f000 f81d 	bl	800059c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000562:	234f      	movs	r3, #79	; 0x4f
 8000564:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f001 fc2f 	bl	8001de4 <HAL_RCC_ClockConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800058c:	f000 f806 	bl	800059c <Error_Handler>
  }
}
 8000590:	bf00      	nop
 8000592:	3768      	adds	r7, #104	; 0x68
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	58000400 	.word	0x58000400

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>

080005a6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <NMI_Handler+0x4>

080005b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <HardFault_Handler+0x4>

080005be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <MemManage_Handler+0x4>

080005c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <BusFault_Handler+0x4>

080005ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <UsageFault_Handler+0x4>

080005d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f8:	f000 fb5c 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800060c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800060e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800061c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4013      	ands	r3, r2
 8000622:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000624:	68fb      	ldr	r3, [r7, #12]
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_SUBGHZ_Init+0x20>)
 8000636:	2210      	movs	r2, #16
 8000638:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_SUBGHZ_Init+0x20>)
 800063c:	f002 f92c 	bl	8002898 <HAL_SUBGHZ_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000646:	f7ff ffa9 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200001d0 	.word	0x200001d0

08000654 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800065c:	2001      	movs	r0, #1
 800065e:	f7ff ffcf 	bl	8000600 <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 800067a:	f000 f8f6 	bl	800086a <TIMER_IF_GetTimerValue>
 800067e:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8000680:	4618      	mov	r0, r3
 8000682:	bd80      	pop	{r7, pc}

08000684 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f919 	bl	80008c6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	e00a      	b.n	80006c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006ae:	f3af 8000 	nop.w
 80006b2:	4601      	mov	r1, r0
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	60ba      	str	r2, [r7, #8]
 80006ba:	b2ca      	uxtb	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	3301      	adds	r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	dbf0      	blt.n	80006ae <_read+0x12>
	}

return len;
 80006cc:	687b      	ldr	r3, [r7, #4]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b086      	sub	sp, #24
 80006da:	af00      	add	r7, sp, #0
 80006dc:	60f8      	str	r0, [r7, #12]
 80006de:	60b9      	str	r1, [r7, #8]
 80006e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	e009      	b.n	80006fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	60ba      	str	r2, [r7, #8]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3301      	adds	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	dbf1      	blt.n	80006e8 <_write+0x12>
	}
	return len;
 8000704:	687b      	ldr	r3, [r7, #4]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <_close>:

int _close(int file)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
	return -1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000734:	605a      	str	r2, [r3, #4]
	return 0;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <_isatty>:

int _isatty(int file)
{
 8000742:	b480      	push	{r7}
 8000744:	b083      	sub	sp, #12
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
	return 1;
 800074a:	2301      	movs	r3, #1
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000756:	b480      	push	{r7}
 8000758:	b085      	sub	sp, #20
 800075a:	af00      	add	r7, sp, #0
 800075c:	60f8      	str	r0, [r7, #12]
 800075e:	60b9      	str	r1, [r7, #8]
 8000760:	607a      	str	r2, [r7, #4]
	return 0;
 8000762:	2300      	movs	r3, #0
}
 8000764:	4618      	mov	r0, r3
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
	...

08000770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000778:	4a14      	ldr	r2, [pc, #80]	; (80007cc <_sbrk+0x5c>)
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <_sbrk+0x60>)
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d102      	bne.n	8000792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <_sbrk+0x64>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <_sbrk+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	429a      	cmp	r2, r3
 800079e:	d207      	bcs.n	80007b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a0:	f007 f9fc 	bl	8007b9c <__errno>
 80007a4:	4603      	mov	r3, r0
 80007a6:	220c      	movs	r2, #12
 80007a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	e009      	b.n	80007c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	4a05      	ldr	r2, [pc, #20]	; (80007d4 <_sbrk+0x64>)
 80007c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20010000 	.word	0x20010000
 80007d0:	00000400 	.word	0x00000400
 80007d4:	2000008c 	.word	0x2000008c
 80007d8:	20000398 	.word	0x20000398

080007dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 80007f2:	79fb      	ldrb	r3, [r7, #7]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000806:	2300      	movs	r3, #0
 8000808:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800081c:	2300      	movs	r3, #0
 800081e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8000820:	79fb      	ldrb	r3, [r7, #7]
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000830:	4b02      	ldr	r3, [pc, #8]	; (800083c <TIMER_IF_SetTimerContext+0x10>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000090 	.word	0x20000090

08000840 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000844:	4b02      	ldr	r3, [pc, #8]	; (8000850 <TIMER_IF_GetTimerContext+0x10>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	20000090 	.word	0x20000090

08000854 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 800085e:	687b      	ldr	r3, [r7, #4]
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 800088a:	687b      	ldr	r3, [r7, #4]
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000896:	b480      	push	{r7}
 8000898:	b085      	sub	sp, #20
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 80008a2:	68fb      	ldr	r3, [r7, #12]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b085      	sub	sp, #20
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <LL_AHB2_GRP1_EnableClock>:
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008fc:	68fb      	ldr	r3, [r7, #12]
}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <LL_APB1_GRP1_EnableClock>:
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000914:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000916:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4313      	orrs	r3, r2
 800091e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000924:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092c:	68fb      	ldr	r3, [r7, #12]
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <LL_APB2_GRP1_EnableClock>:
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000944:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4313      	orrs	r3, r2
 800094e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000954:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <MX_USART1_UART_Init+0x94>)
 8000970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009b2:	f002 fb2e 	bl	8003012 <HAL_UART_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009bc:	f7ff fdee 	bl	800059c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009c4:	f003 f848 	bl	8003a58 <HAL_UARTEx_SetTxFifoThreshold>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009ce:	f7ff fde5 	bl	800059c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009d6:	f003 f87d 	bl	8003ad4 <HAL_UARTEx_SetRxFifoThreshold>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f7ff fddc 	bl	800059c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_USART1_UART_Init+0x90>)
 80009e6:	f002 ffff 	bl	80039e8 <HAL_UARTEx_DisableFifoMode>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f0:	f7ff fdd4 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200001dc 	.word	0x200001dc
 80009fc:	40013800 	.word	0x40013800

08000a00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_USART2_UART_Init+0x94>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a4a:	f002 fae2 	bl	8003012 <HAL_UART_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a54:	f7ff fda2 	bl	800059c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a5c:	f002 fffc 	bl	8003a58 <HAL_UARTEx_SetTxFifoThreshold>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a66:	f7ff fd99 	bl	800059c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a6e:	f003 f831 	bl	8003ad4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a78:	f7ff fd90 	bl	800059c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a7e:	f002 ffb3 	bl	80039e8 <HAL_UARTEx_DisableFifoMode>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a88:	f7ff fd88 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000026c 	.word	0x2000026c
 8000a94:	40004400 	.word	0x40004400

08000a98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b096      	sub	sp, #88	; 0x58
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2238      	movs	r2, #56	; 0x38
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f007 f899 	bl	8007bf0 <memset>
  if(uartHandle->Instance==USART1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a2d      	ldr	r2, [pc, #180]	; (8000b78 <HAL_UART_MspInit+0xe0>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d126      	bne.n	8000b16 <HAL_UART_MspInit+0x7e>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000acc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000ad0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fd2a 	bl	8002530 <HAL_RCCEx_PeriphCLKConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ae2:	f7ff fd5b 	bl	800059c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000aea:	f7ff ff25 	bl	8000938 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fef2 	bl	80008d8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000af4:	23c0      	movs	r3, #192	; 0xc0
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b04:	2307      	movs	r3, #7
 8000b06:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481b      	ldr	r0, [pc, #108]	; (8000b7c <HAL_UART_MspInit+0xe4>)
 8000b10:	f000 f9c4 	bl	8000e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b14:	e02b      	b.n	8000b6e <HAL_UART_MspInit+0xd6>
  else if(uartHandle->Instance==USART2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a19      	ldr	r2, [pc, #100]	; (8000b80 <HAL_UART_MspInit+0xe8>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d126      	bne.n	8000b6e <HAL_UART_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b24:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000b28:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fcfe 	bl	8002530 <HAL_RCCEx_PeriphCLKConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_UART_MspInit+0xa6>
      Error_Handler();
 8000b3a:	f7ff fd2f 	bl	800059c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b42:	f7ff fee1 	bl	8000908 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff fec6 	bl	80008d8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 f997 	bl	8000e9c <HAL_GPIO_Init>
}
 8000b6e:	bf00      	nop
 8000b70:	3758      	adds	r7, #88	; 0x58
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40013800 	.word	0x40013800
 8000b7c:	48000400 	.word	0x48000400
 8000b80:	40004400 	.word	0x40004400

08000b84 <UART1_print>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void UART1_print(uint8_t * buf, uint8_t len){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart1, buf, len, 100);
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	2364      	movs	r3, #100	; 0x64
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <UART1_print+0x24>)
 8000b9a:	f002 fa8a 	bl	80030b2 <HAL_UART_Transmit>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001dc 	.word	0x200001dc

08000bac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb0:	f7ff fe14 	bl	80007dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopForever+0xe>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopForever+0x16>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bda:	f006 ffe5 	bl	8007ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bde:	f7ff fc67 	bl	80004b0 <main>

08000be2 <LoopForever>:

LoopForever:
    b LoopForever
 8000be2:	e7fe      	b.n	8000be2 <LoopForever>
  ldr   r0, =_estack
 8000be4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bf0:	08008864 	.word	0x08008864
  ldr r2, =_sbss
 8000bf4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bf8:	20000398 	.word	0x20000398

08000bfc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f000 f914 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000c10:	f001 faac 	bl	800216c <HAL_RCC_GetHCLKFreq>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <HAL_Init+0x3c>)
 8000c18:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f000 f810 	bl	8000c40 <HAL_InitTick>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	71fb      	strb	r3, [r7, #7]
 8000c2a:	e001      	b.n	8000c30 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c2c:	f7ff fcbb 	bl	80005a6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000000 	.word	0x20000000

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_InitTick+0x6c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d024      	beq.n	8000c9e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c54:	f001 fa8a 	bl	800216c <HAL_RCC_GetHCLKFreq>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_InitTick+0x6c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c64:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f908 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d10f      	bne.n	8000c98 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b0f      	cmp	r3, #15
 8000c7c:	d809      	bhi.n	8000c92 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	f04f 30ff 	mov.w	r0, #4294967295
 8000c86:	f000 f8e2 	bl	8000e4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8a:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <HAL_InitTick+0x70>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	e007      	b.n	8000ca2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	e004      	b.n	8000ca2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	e001      	b.n	8000ca2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_IncTick+0x1c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	200002fc 	.word	0x200002fc

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f7ff ff90 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff49 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff60 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff92 	bl	8000d90 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff61 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffb2 	bl	8000df4 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e140      	b.n	800112e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8132 	beq.w	8001128 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d005      	beq.n	8000edc <HAL_GPIO_Init+0x40>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d130      	bne.n	8000f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f12:	2201      	movs	r2, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	f003 0201 	and.w	r2, r3, #1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d017      	beq.n	8000f7a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d123      	bne.n	8000fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	6939      	ldr	r1, [r7, #16]
 8000fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0203 	and.w	r2, r3, #3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 808c 	beq.w	8001128 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001010:	4a4e      	ldr	r2, [pc, #312]	; (800114c <HAL_GPIO_Init+0x2b0>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	2207      	movs	r2, #7
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800103a:	d00d      	beq.n	8001058 <HAL_GPIO_Init+0x1bc>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a44      	ldr	r2, [pc, #272]	; (8001150 <HAL_GPIO_Init+0x2b4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_Init+0x1b8>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a43      	ldr	r2, [pc, #268]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d101      	bne.n	8001050 <HAL_GPIO_Init+0x1b4>
 800104c:	2302      	movs	r3, #2
 800104e:	e004      	b.n	800105a <HAL_GPIO_Init+0x1be>
 8001050:	2307      	movs	r3, #7
 8001052:	e002      	b.n	800105a <HAL_GPIO_Init+0x1be>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <HAL_GPIO_Init+0x1be>
 8001058:	2300      	movs	r3, #0
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	f002 0203 	and.w	r2, r2, #3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4093      	lsls	r3, r2
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106a:	4938      	ldr	r1, [pc, #224]	; (800114c <HAL_GPIO_Init+0x2b0>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <HAL_GPIO_Init+0x2bc>)
 800107a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800107e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800109e:	4a2e      	ldr	r2, [pc, #184]	; (8001158 <HAL_GPIO_Init+0x2bc>)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80010a6:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <HAL_GPIO_Init+0x2bc>)
 80010a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010ac:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80010cc:	4a22      	ldr	r2, [pc, #136]	; (8001158 <HAL_GPIO_Init+0x2bc>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <HAL_GPIO_Init+0x2bc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_GPIO_Init+0x2bc>)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_GPIO_Init+0x2bc>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001122:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_GPIO_Init+0x2bc>)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3301      	adds	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	fa22 f303 	lsr.w	r3, r2, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	f47f aeb7 	bne.w	8000eac <HAL_GPIO_Init+0x10>
  }
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40010000 	.word	0x40010000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	58000800 	.word	0x58000800

0800115c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a03      	ldr	r2, [pc, #12]	; (8001174 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	58000400 	.word	0x58000400

08001178 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_PWREx_GetVoltageRange+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	58000400 	.word	0x58000400

08001190 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011a0:	d101      	bne.n	80011a6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	58000400 	.word	0x58000400

080011b4 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80011b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80011fe:	d101      	bne.n	8001204 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr

0800120e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800122e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800124a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001258:	d101      	bne.n	800125e <LL_RCC_HSE_IsReady+0x18>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <LL_RCC_HSE_IsReady+0x1a>
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800126c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80012a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b2:	d101      	bne.n	80012b8 <LL_RCC_HSI_IsReady+0x18>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <LL_RCC_HSI_IsReady+0x1a>
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80012ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	061b      	lsls	r3, r3, #24
 80012d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d101      	bne.n	8001302 <LL_RCC_LSE_IsReady+0x18>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <LL_RCC_LSE_IsReady+0x1a>
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b02      	cmp	r3, #2
 800135e:	d101      	bne.n	8001364 <LL_RCC_LSI_IsReady+0x18>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <LL_RCC_LSI_IsReady+0x1a>
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6013      	str	r3, [r2, #0]
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	6013      	str	r3, [r2, #0]
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80013aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d101      	bne.n	80013bc <LL_RCC_MSI_IsReady+0x16>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <LL_RCC_MSI_IsReady+0x18>
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d101      	bne.n	80013dc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80013ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001408:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800141c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f023 0203 	bic.w	r2, r3, #3
 800144e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4313      	orrs	r3, r2
 8001456:	608b      	str	r3, [r1, #8]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 030c 	and.w	r3, r3, #12
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	608b      	str	r3, [r1, #8]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014ae:	f023 020f 	bic.w	r2, r3, #15
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ba:	4313      	orrs	r3, r2
 80014bc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80014d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80014f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001502:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4313      	orrs	r3, r2
 800150a:	608b      	str	r3, [r1, #8]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800151a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001534:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800154a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800159c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015a0:	6013      	str	r3, [r2, #0]
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015bc:	d101      	bne.n	80015c2 <LL_RCC_PLL_IsReady+0x18>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <LL_RCC_PLL_IsReady+0x1a>
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80015fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f003 0303 	and.w	r3, r3, #3
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001638:	d101      	bne.n	800163e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001650:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d101      	bne.n	8001662 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800167e:	d101      	bne.n	8001684 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016a0:	d101      	bne.n	80016a6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e38a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c2:	f7ff fece 	bl	8001462 <LL_RCC_GetSysClkSource>
 80016c6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c8:	f7ff ffa2 	bl	8001610 <LL_RCC_PLL_GetMainSource>
 80016cc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80c9 	beq.w	800186e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_RCC_OscConfig+0x3e>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	d17b      	bne.n	80017e0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d178      	bne.n	80017e0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ee:	f7ff fe5a 	bl	80013a6 <LL_RCC_MSI_IsReady>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_OscConfig+0x54>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e369      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_RCC_OscConfig+0x72>
 8001716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001720:	e006      	b.n	8001730 <HAL_RCC_OscConfig+0x80>
 8001722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001730:	4293      	cmp	r3, r2
 8001732:	d222      	bcs.n	800177a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fd4f 	bl	80021dc <RCC_SetFlashLatencyFromMSIRange>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e347      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fe4e 	bl	8001414 <LL_RCC_MSI_SetCalibTrimming>
 8001778:	e021      	b.n	80017be <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001784:	f043 0308 	orr.w	r3, r3, #8
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fe35 	bl	8001414 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fd14 	bl	80021dc <RCC_SetFlashLatencyFromMSIRange>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e30c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80017be:	f000 fcd5 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4ab4      	ldr	r2, [pc, #720]	; (8001a98 <HAL_RCC_OscConfig+0x3e8>)
 80017c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017c8:	4bb4      	ldr	r3, [pc, #720]	; (8001a9c <HAL_RCC_OscConfig+0x3ec>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fa37 	bl	8000c40 <HAL_InitTick>
 80017d2:	4603      	mov	r3, r0
 80017d4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80017d6:	7cfb      	ldrb	r3, [r7, #19]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d047      	beq.n	800186c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80017dc:	7cfb      	ldrb	r3, [r7, #19]
 80017de:	e2fb      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d02c      	beq.n	8001842 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017e8:	f7ff fdc1 	bl	800136e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ec:	f7fe ff43 	bl	8000676 <HAL_GetTick>
 80017f0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f4:	f7fe ff3f 	bl	8000676 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e2e8      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001806:	f7ff fdce 	bl	80013a6 <LL_RCC_MSI_IsReady>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f1      	beq.n	80017f4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fdea 	bl	8001414 <LL_RCC_MSI_SetCalibTrimming>
 8001840:	e015      	b.n	800186e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001842:	f7ff fda2 	bl	800138a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001846:	f7fe ff16 	bl	8000676 <HAL_GetTick>
 800184a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800184e:	f7fe ff12 	bl	8000676 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e2bb      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001860:	f7ff fda1 	bl	80013a6 <LL_RCC_MSI_IsReady>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f1      	bne.n	800184e <HAL_RCC_OscConfig+0x19e>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800186c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d05f      	beq.n	800193a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x1dc>
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d10d      	bne.n	80018a2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d10a      	bne.n	80018a2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	f7ff fcdb 	bl	8001246 <LL_RCC_HSE_IsReady>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d050      	beq.n	8001938 <HAL_RCC_OscConfig+0x288>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d14c      	bne.n	8001938 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e29a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c0:	d102      	bne.n	80018c8 <HAL_RCC_OscConfig+0x218>
 80018c2:	f7ff fca4 	bl	800120e <LL_RCC_HSE_Enable>
 80018c6:	e00d      	b.n	80018e4 <HAL_RCC_OscConfig+0x234>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80018d0:	d104      	bne.n	80018dc <HAL_RCC_OscConfig+0x22c>
 80018d2:	f7ff fc6f 	bl	80011b4 <LL_RCC_HSE_EnableTcxo>
 80018d6:	f7ff fc9a 	bl	800120e <LL_RCC_HSE_Enable>
 80018da:	e003      	b.n	80018e4 <HAL_RCC_OscConfig+0x234>
 80018dc:	f7ff fca5 	bl	800122a <LL_RCC_HSE_Disable>
 80018e0:	f7ff fc76 	bl	80011d0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d012      	beq.n	8001912 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7fe fec3 	bl	8000676 <HAL_GetTick>
 80018f0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7fe febf 	bl	8000676 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e268      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001906:	f7ff fc9e 	bl	8001246 <LL_RCC_HSE_IsReady>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f1      	beq.n	80018f4 <HAL_RCC_OscConfig+0x244>
 8001910:	e013      	b.n	800193a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7fe feb0 	bl	8000676 <HAL_GetTick>
 8001916:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800191a:	f7fe feac 	bl	8000676 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b64      	cmp	r3, #100	; 0x64
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e255      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 800192c:	f7ff fc8b 	bl	8001246 <LL_RCC_HSE_IsReady>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f1      	bne.n	800191a <HAL_RCC_OscConfig+0x26a>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001938:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d04b      	beq.n	80019de <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	2b04      	cmp	r3, #4
 800194a:	d005      	beq.n	8001958 <HAL_RCC_OscConfig+0x2a8>
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d113      	bne.n	800197a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d110      	bne.n	800197a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001958:	f7ff fca2 	bl	80012a0 <LL_RCC_HSI_IsReady>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x2be>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e234      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fca5 	bl	80012c2 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001978:	e031      	b.n	80019de <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d019      	beq.n	80019b6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001982:	f7ff fc71 	bl	8001268 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7fe fe76 	bl	8000676 <HAL_GetTick>
 800198a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198e:	f7fe fe72 	bl	8000676 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e21b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 80019a0:	f7ff fc7e 	bl	80012a0 <LL_RCC_HSI_IsReady>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f1      	beq.n	800198e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fc87 	bl	80012c2 <LL_RCC_HSI_SetCalibTrimming>
 80019b4:	e013      	b.n	80019de <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b6:	f7ff fc65 	bl	8001284 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7fe fe5c 	bl	8000676 <HAL_GetTick>
 80019be:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c2:	f7fe fe58 	bl	8000676 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e201      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 80019d4:	f7ff fc64 	bl	80012a0 <LL_RCC_HSI_IsReady>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f1      	bne.n	80019c2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d06e      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d056      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fa:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69da      	ldr	r2, [r3, #28]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d031      	beq.n	8001a6e <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e1da      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a2c:	f7ff fc7e 	bl	800132c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a30:	f7fe fe21 	bl	8000676 <HAL_GetTick>
 8001a34:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a38:	f7fe fe1d 	bl	8000676 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b11      	cmp	r3, #17
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1c6      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001a4a:	f7ff fc7f 	bl	800134c <LL_RCC_LSI_IsReady>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f1      	bne.n	8001a38 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5c:	f023 0210 	bic.w	r2, r3, #16
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	f7ff fc4d 	bl	800130c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7fe fe00 	bl	8000676 <HAL_GetTick>
 8001a76:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7fe fdfc 	bl	8000676 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b11      	cmp	r3, #17
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1a5      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001a8c:	f7ff fc5e 	bl	800134c <LL_RCC_LSI_IsReady>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f1      	beq.n	8001a7a <HAL_RCC_OscConfig+0x3ca>
 8001a96:	e017      	b.n	8001ac8 <HAL_RCC_OscConfig+0x418>
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa0:	f7ff fc44 	bl	800132c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7fe fde7 	bl	8000676 <HAL_GetTick>
 8001aa8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7fe fde3 	bl	8000676 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b11      	cmp	r3, #17
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e18c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001abe:	f7ff fc45 	bl	800134c <LL_RCC_LSI_IsReady>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f1      	bne.n	8001aac <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80d8 	beq.w	8001c86 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001ad6:	f7ff fb5b 	bl	8001190 <LL_PWR_IsEnabledBkUpAccess>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d113      	bne.n	8001b08 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001ae0:	f7ff fb3c 	bl	800115c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae4:	f7fe fdc7 	bl	8000676 <HAL_GetTick>
 8001ae8:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aec:	f7fe fdc3 	bl	8000676 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e16c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001afe:	f7ff fb47 	bl	8001190 <LL_PWR_IsEnabledBkUpAccess>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f1      	beq.n	8001aec <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d07b      	beq.n	8001c08 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b85      	cmp	r3, #133	; 0x85
 8001b16:	d003      	beq.n	8001b20 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d109      	bne.n	8001b34 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7fe fd9f 	bl	8000676 <HAL_GetTick>
 8001b38:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b50:	f7fe fd91 	bl	8000676 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e138      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001b66:	f7ff fbc0 	bl	80012ea <LL_RCC_LSE_IsReady>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0ef      	beq.n	8001b50 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b81      	cmp	r3, #129	; 0x81
 8001b76:	d003      	beq.n	8001b80 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b85      	cmp	r3, #133	; 0x85
 8001b7e:	d121      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7fe fd79 	bl	8000676 <HAL_GetTick>
 8001b84:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7fe fd6b 	bl	8000676 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e112      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0ec      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001bc2:	e060      	b.n	8001c86 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7fe fd57 	bl	8000676 <HAL_GetTick>
 8001bc8:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7fe fd49 	bl	8000676 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e0f0      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ec      	bne.n	8001be0 <HAL_RCC_OscConfig+0x530>
 8001c06:	e03e      	b.n	8001c86 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7fe fd35 	bl	8000676 <HAL_GetTick>
 8001c0c:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7fe fd27 	bl	8000676 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e0ce      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ec      	bne.n	8001c24 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4a:	f7fe fd14 	bl	8000676 <HAL_GetTick>
 8001c4e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c66:	f7fe fd06 	bl	8000676 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e0ad      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c7c:	f7ff fb35 	bl	80012ea <LL_RCC_LSE_IsReady>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1ef      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 80a3 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d076      	beq.n	8001d84 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d14b      	bne.n	8001d36 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	f7ff fc76 	bl	800158e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7fe fce8 	bl	8000676 <HAL_GetTick>
 8001ca6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fce4 	bl	8000676 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b0a      	cmp	r3, #10
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e08d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001cbc:	f7ff fc75 	bl	80015aa <LL_RCC_PLL_IsReady>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f1      	bne.n	8001caa <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	4b44      	ldr	r3, [pc, #272]	; (8001de0 <HAL_RCC_OscConfig+0x730>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cd8:	4311      	orrs	r1, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cde:	0212      	lsls	r2, r2, #8
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cec:	4311      	orrs	r1, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfc:	f7ff fc39 	bl	8001572 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7fe fcb1 	bl	8000676 <HAL_GetTick>
 8001d14:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7fe fcad 	bl	8000676 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b0a      	cmp	r3, #10
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e056      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001d2a:	f7ff fc3e 	bl	80015aa <LL_RCC_PLL_IsReady>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f1      	beq.n	8001d18 <HAL_RCC_OscConfig+0x668>
 8001d34:	e04f      	b.n	8001dd6 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d36:	f7ff fc2a 	bl	800158e <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d44:	f023 0303 	bic.w	r3, r3, #3
 8001d48:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d54:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5c:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fc8a 	bl	8000676 <HAL_GetTick>
 8001d62:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d66:	f7fe fc86 	bl	8000676 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b0a      	cmp	r3, #10
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e02f      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d78:	f7ff fc17 	bl	80015aa <LL_RCC_PLL_IsReady>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f1      	bne.n	8001d66 <HAL_RCC_OscConfig+0x6b6>
 8001d82:	e028      	b.n	8001dd6 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e023      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f003 0203 	and.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d115      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d10e      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	11c1808c 	.word	0x11c1808c

08001de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e10f      	b.n	8002018 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b89      	ldr	r3, [pc, #548]	; (8002020 <HAL_RCC_ClockConfig+0x23c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d91b      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b86      	ldr	r3, [pc, #536]	; (8002020 <HAL_RCC_ClockConfig+0x23c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4984      	ldr	r1, [pc, #528]	; (8002020 <HAL_RCC_ClockConfig+0x23c>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e16:	f7fe fc2e 	bl	8000676 <HAL_GetTick>
 8001e1a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e1e:	f7fe fc2a 	bl	8000676 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0f3      	b.n	8002018 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e30:	4b7b      	ldr	r3, [pc, #492]	; (8002020 <HAL_RCC_ClockConfig+0x23c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d1ef      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d016      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fb12 	bl	8001478 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e54:	f7fe fc0f 	bl	8000676 <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e5c:	f7fe fc0b 	bl	8000676 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e0d4      	b.n	8002018 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001e6e:	f7ff fbda 	bl	8001626 <LL_RCC_IsActiveFlag_HPRE>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f1      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d016      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fb08 	bl	800149e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e8e:	f7fe fbf2 	bl	8000676 <HAL_GetTick>
 8001e92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e96:	f7fe fbee 	bl	8000676 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0b7      	b.n	8002018 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001ea8:	f7ff fbce 	bl	8001648 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f1      	beq.n	8001e96 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d016      	beq.n	8001eec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fb01 	bl	80014ca <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ec8:	f7fe fbd5 	bl	8000676 <HAL_GetTick>
 8001ecc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ed0:	f7fe fbd1 	bl	8000676 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e09a      	b.n	8002018 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ee2:	f7ff fbc3 	bl	800166c <LL_RCC_IsActiveFlag_PPRE1>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f1      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d017      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff faf6 	bl	80014f0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f04:	f7fe fbb7 	bl	8000676 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f0c:	f7fe fbb3 	bl	8000676 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e07c      	b.n	8002018 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001f1e:	f7ff fbb6 	bl	800168e <LL_RCC_IsActiveFlag_PPRE2>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f1      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d043      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001f3c:	f7ff f983 	bl	8001246 <LL_RCC_HSE_IsReady>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d11e      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e066      	b.n	8002018 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d106      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001f52:	f7ff fb2a 	bl	80015aa <LL_RCC_PLL_IsReady>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d113      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e05b      	b.n	8002018 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001f68:	f7ff fa1d 	bl	80013a6 <LL_RCC_MSI_IsReady>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d108      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e050      	b.n	8002018 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001f76:	f7ff f993 	bl	80012a0 <LL_RCC_HSI_IsReady>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e049      	b.n	8002018 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fa57 	bl	800143c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8e:	f7fe fb72 	bl	8000676 <HAL_GetTick>
 8001f92:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f96:	f7fe fb6e 	bl	8000676 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e035      	b.n	8002018 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fac:	f7ff fa59 	bl	8001462 <LL_RCC_GetSysClkSource>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1ec      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_RCC_ClockConfig+0x23c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d21b      	bcs.n	8002002 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_RCC_ClockConfig+0x23c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 0207 	bic.w	r2, r3, #7
 8001fd2:	4913      	ldr	r1, [pc, #76]	; (8002020 <HAL_RCC_ClockConfig+0x23c>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fda:	f7fe fb4c 	bl	8000676 <HAL_GetTick>
 8001fde:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001fe2:	f7fe fb48 	bl	8000676 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e011      	b.n	8002018 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_RCC_ClockConfig+0x23c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d1ef      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002002:	f000 f8b3 	bl	800216c <HAL_RCC_GetHCLKFreq>
 8002006:	4603      	mov	r3, r0
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <HAL_RCC_ClockConfig+0x240>)
 800200a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_RCC_ClockConfig+0x244>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fe15 	bl	8000c40 <HAL_InitTick>
 8002016:	4603      	mov	r3, r0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	58004000 	.word	0x58004000
 8002024:	20000000 	.word	0x20000000
 8002028:	20000004 	.word	0x20000004

0800202c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203a:	f7ff fa12 	bl	8001462 <LL_RCC_GetSysClkSource>
 800203e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002040:	f7ff fae6 	bl	8001610 <LL_RCC_PLL_GetMainSource>
 8002044:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x2c>
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d139      	bne.n	80020c6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d136      	bne.n	80020c6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002058:	f7ff f9b5 	bl	80013c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d115      	bne.n	800208e <HAL_RCC_GetSysClockFreq+0x62>
 8002062:	f7ff f9b0 	bl	80013c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002066:	4603      	mov	r3, r0
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <HAL_RCC_GetSysClockFreq+0x4e>
 800206c:	f7ff f9bb 	bl	80013e6 <LL_RCC_MSI_GetRange>
 8002070:	4603      	mov	r3, r0
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	e005      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x5a>
 800207a:	f7ff f9bf 	bl	80013fc <LL_RCC_MSI_GetRangeAfterStandby>
 800207e:	4603      	mov	r3, r0
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	4a36      	ldr	r2, [pc, #216]	; (8002160 <HAL_RCC_GetSysClockFreq+0x134>)
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	e014      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x8c>
 800208e:	f7ff f99a 	bl	80013c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002092:	4603      	mov	r3, r0
 8002094:	2b01      	cmp	r3, #1
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_GetSysClockFreq+0x7a>
 8002098:	f7ff f9a5 	bl	80013e6 <LL_RCC_MSI_GetRange>
 800209c:	4603      	mov	r3, r0
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	e005      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x86>
 80020a6:	f7ff f9a9 	bl	80013fc <LL_RCC_MSI_GetRangeAfterStandby>
 80020aa:	4603      	mov	r3, r0
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <HAL_RCC_GetSysClockFreq+0x134>)
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d115      	bne.n	80020ec <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020c4:	e012      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d102      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020cc:	4b25      	ldr	r3, [pc, #148]	; (8002164 <HAL_RCC_GetSysClockFreq+0x138>)
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e00c      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d109      	bne.n	80020ec <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80020d8:	f7ff f888 	bl	80011ec <LL_RCC_HSE_IsEnabledDiv2>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_RCC_GetSysClockFreq+0x138>)
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e001      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80020e8:	4b1f      	ldr	r3, [pc, #124]	; (8002168 <HAL_RCC_GetSysClockFreq+0x13c>)
 80020ea:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ec:	f7ff f9b9 	bl	8001462 <LL_RCC_GetSysClkSource>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d12f      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80020f6:	f7ff fa8b 	bl	8001610 <LL_RCC_PLL_GetMainSource>
 80020fa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d003      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0xde>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d003      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0xe4>
 8002108:	e00d      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_RCC_GetSysClockFreq+0x138>)
 800210c:	60fb      	str	r3, [r7, #12]
        break;
 800210e:	e00d      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002110:	f7ff f86c 	bl	80011ec <LL_RCC_HSE_IsEnabledDiv2>
 8002114:	4603      	mov	r3, r0
 8002116:	2b01      	cmp	r3, #1
 8002118:	d102      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_RCC_GetSysClockFreq+0x138>)
 800211c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800211e:	e005      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002122:	60fb      	str	r3, [r7, #12]
        break;
 8002124:	e002      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	60fb      	str	r3, [r7, #12]
        break;
 800212a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800212c:	f7ff fa4e 	bl	80015cc <LL_RCC_PLL_GetN>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	fb03 f402 	mul.w	r4, r3, r2
 8002138:	f7ff fa5f 	bl	80015fa <LL_RCC_PLL_GetDivider>
 800213c:	4603      	mov	r3, r0
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	3301      	adds	r3, #1
 8002142:	fbb4 f4f3 	udiv	r4, r4, r3
 8002146:	f7ff fa4d 	bl	80015e4 <LL_RCC_PLL_GetR>
 800214a:	4603      	mov	r3, r0
 800214c:	0f5b      	lsrs	r3, r3, #29
 800214e:	3301      	adds	r3, #1
 8002150:	fbb4 f3f3 	udiv	r3, r4, r3
 8002154:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002156:	697b      	ldr	r3, [r7, #20]
}
 8002158:	4618      	mov	r0, r3
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}
 8002160:	08008624 	.word	0x08008624
 8002164:	00f42400 	.word	0x00f42400
 8002168:	01e84800 	.word	0x01e84800

0800216c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b598      	push	{r3, r4, r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002170:	f7ff ff5c 	bl	800202c <HAL_RCC_GetSysClockFreq>
 8002174:	4604      	mov	r4, r0
 8002176:	f7ff f9ce 	bl	8001516 <LL_RCC_GetAHBPrescaler>
 800217a:	4603      	mov	r3, r0
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	4a03      	ldr	r2, [pc, #12]	; (8002190 <HAL_RCC_GetHCLKFreq+0x24>)
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd98      	pop	{r3, r4, r7, pc}
 8002190:	080085c4 	.word	0x080085c4

08002194 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002194:	b598      	push	{r3, r4, r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002198:	f7ff ffe8 	bl	800216c <HAL_RCC_GetHCLKFreq>
 800219c:	4604      	mov	r4, r0
 800219e:	f7ff f9d2 	bl	8001546 <LL_RCC_GetAPB1Prescaler>
 80021a2:	4603      	mov	r3, r0
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd98      	pop	{r3, r4, r7, pc}
 80021b4:	08008604 	.word	0x08008604

080021b8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b8:	b598      	push	{r3, r4, r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80021bc:	f7ff ffd6 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021c0:	4604      	mov	r4, r0
 80021c2:	f7ff f9cb 	bl	800155c <LL_RCC_GetAPB2Prescaler>
 80021c6:	4603      	mov	r3, r0
 80021c8:	0adb      	lsrs	r3, r3, #11
 80021ca:	4a03      	ldr	r2, [pc, #12]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd98      	pop	{r3, r4, r7, pc}
 80021d8:	08008604 	.word	0x08008604

080021dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	4a10      	ldr	r2, [pc, #64]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80021f4:	f7ff f99a 	bl	800152c <LL_RCC_GetAHB3Prescaler>
 80021f8:	4603      	mov	r3, r0
 80021fa:	091b      	lsrs	r3, r3, #4
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4a09      	ldr	r2, [pc, #36]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0c9c      	lsrs	r4, r3, #18
 8002218:	f7fe ffae 	bl	8001178 <HAL_PWREx_GetVoltageRange>
 800221c:	4603      	mov	r3, r0
 800221e:	4619      	mov	r1, r3
 8002220:	4620      	mov	r0, r4
 8002222:	f000 f80b 	bl	800223c <RCC_SetFlashLatency>
 8002226:	4603      	mov	r3, r0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	bd90      	pop	{r4, r7, pc}
 8002230:	08008624 	.word	0x08008624
 8002234:	080085c4 	.word	0x080085c4
 8002238:	431bde83 	.word	0x431bde83

0800223c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08e      	sub	sp, #56	; 0x38
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002246:	4a3c      	ldr	r2, [pc, #240]	; (8002338 <RCC_SetFlashLatency+0xfc>)
 8002248:	f107 0320 	add.w	r3, r7, #32
 800224c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002250:	6018      	str	r0, [r3, #0]
 8002252:	3304      	adds	r3, #4
 8002254:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002256:	4a39      	ldr	r2, [pc, #228]	; (800233c <RCC_SetFlashLatency+0x100>)
 8002258:	f107 0318 	add.w	r3, r7, #24
 800225c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002260:	6018      	str	r0, [r3, #0]
 8002262:	3304      	adds	r3, #4
 8002264:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002266:	4a36      	ldr	r2, [pc, #216]	; (8002340 <RCC_SetFlashLatency+0x104>)
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	ca07      	ldmia	r2, {r0, r1, r2}
 800226e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002272:	2300      	movs	r3, #0
 8002274:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800227c:	d11d      	bne.n	80022ba <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800227e:	2300      	movs	r3, #0
 8002280:	633b      	str	r3, [r7, #48]	; 0x30
 8002282:	e016      	b.n	80022b2 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800228c:	4413      	add	r3, r2
 800228e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002292:	461a      	mov	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4293      	cmp	r3, r2
 8002298:	d808      	bhi.n	80022ac <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022a2:	4413      	add	r3, r2
 80022a4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022aa:	e023      	b.n	80022f4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80022ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ae:	3301      	adds	r3, #1
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d9e5      	bls.n	8002284 <RCC_SetFlashLatency+0x48>
 80022b8:	e01c      	b.n	80022f4 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022be:	e016      	b.n	80022ee <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022c8:	4413      	add	r3, r2
 80022ca:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80022ce:	461a      	mov	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d808      	bhi.n	80022e8 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022de:	4413      	add	r3, r2
 80022e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80022e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022e6:	e005      	b.n	80022f4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	3301      	adds	r3, #1
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d9e5      	bls.n	80022c0 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <RCC_SetFlashLatency+0x108>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 0207 	bic.w	r2, r3, #7
 80022fc:	4911      	ldr	r1, [pc, #68]	; (8002344 <RCC_SetFlashLatency+0x108>)
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002304:	f7fe f9b7 	bl	8000676 <HAL_GetTick>
 8002308:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800230a:	e008      	b.n	800231e <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800230c:	f7fe f9b3 	bl	8000676 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e007      	b.n	800232e <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <RCC_SetFlashLatency+0x108>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002328:	429a      	cmp	r2, r3
 800232a:	d1ef      	bne.n	800230c <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3738      	adds	r7, #56	; 0x38
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	08008574 	.word	0x08008574
 800233c:	0800857c 	.word	0x0800857c
 8002340:	08008584 	.word	0x08008584
 8002344:	58004000 	.word	0x58004000

08002348 <LL_RCC_LSE_IsReady>:
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800234c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b02      	cmp	r3, #2
 800235a:	d101      	bne.n	8002360 <LL_RCC_LSE_IsReady+0x18>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <LL_RCC_LSE_IsReady+0x1a>
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <LL_RCC_SetUSARTClockSource>:
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002376:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	43db      	mvns	r3, r3
 8002380:	401a      	ands	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <LL_RCC_SetI2SClockSource>:
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80023a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <LL_RCC_SetLPUARTClockSource>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <LL_RCC_SetI2CClockSource>:
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80023f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002406:	43db      	mvns	r3, r3
 8002408:	401a      	ands	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <LL_RCC_SetLPTIMClockSource>:
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800242e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002432:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	041b      	lsls	r3, r3, #16
 800243c:	43db      	mvns	r3, r3
 800243e:	401a      	ands	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	041b      	lsls	r3, r3, #16
 8002444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <LL_RCC_SetRNGClockSource>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002468:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800246c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <LL_RCC_SetADCClockSource>:
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <LL_RCC_SetRTCClockSource>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80024b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <LL_RCC_GetRTCClockSource>:
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <LL_RCC_ForceBackupDomainReset>:
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <LL_RCC_ReleaseBackupDomainReset>:
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800251e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
	...

08002530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800253c:	2300      	movs	r3, #0
 800253e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002540:	2300      	movs	r3, #0
 8002542:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d058      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002550:	f7fe fe04 	bl	800115c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002554:	f7fe f88f 	bl	8000676 <HAL_GetTick>
 8002558:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800255a:	e009      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255c:	f7fe f88b 	bl	8000676 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d902      	bls.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	74fb      	strb	r3, [r7, #19]
        break;
 800256e:	e006      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002570:	4b7b      	ldr	r3, [pc, #492]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800257c:	d1ee      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d13c      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002584:	f7ff ffa7 	bl	80024d6 <LL_RCC_GetRTCClockSource>
 8002588:	4602      	mov	r2, r0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258e:	429a      	cmp	r2, r3
 8002590:	d00f      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025a0:	f7ff ffa5 	bl	80024ee <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025a4:	f7ff ffb3 	bl	800250e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d014      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe f85b 	bl	8000676 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80025c2:	e00b      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe f857 	bl	8000676 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d902      	bls.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	74fb      	strb	r3, [r7, #19]
            break;
 80025da:	e004      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80025dc:	f7ff feb4 	bl	8002348 <LL_RCC_LSE_IsReady>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d1ee      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff5b 	bl	80024ac <LL_RCC_SetRTCClockSource>
 80025f6:	e004      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	74bb      	strb	r3, [r7, #18]
 80025fc:	e001      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fea9 	bl	800236a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fe9e 	bl	800236a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fec0 	bl	80023c4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fee6 	bl	8002426 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002662:	2b00      	cmp	r3, #0
 8002664:	d004      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fedb 	bl	8002426 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fed0 	bl	8002426 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d004      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fea9 	bl	80023ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fe9e 	bl	80023ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d004      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fe93 	bl	80023ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d011      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fe5e 	bl	800239a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	d107      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80026e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d010      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fea5 	bl	8002458 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002720:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002724:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d011      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fea3 	bl	8002482 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002744:	d107      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002754:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002756:	7cbb      	ldrb	r3, [r7, #18]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	58000400 	.word	0x58000400

08002764 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002774:	4904      	ldr	r1, [pc, #16]	; (8002788 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4313      	orrs	r3, r2
 800277a:	608b      	str	r3, [r1, #8]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	58000400 	.word	0x58000400

0800278c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	58000400 	.word	0x58000400

080027ac <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80027b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	58000400 	.word	0x58000400

080027cc <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80027d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027d6:	619a      	str	r2, [r3, #24]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	58000400 	.word	0x58000400

080027e4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d101      	bne.n	80027f8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	58000400 	.word	0x58000400

08002808 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b04      	cmp	r3, #4
 8002816:	d101      	bne.n	800281c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	58000400 	.word	0x58000400

0800282c <LL_RCC_RF_DisableReset>:
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800283c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <LL_RCC_IsRFUnderReset>:
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002860:	d101      	bne.n	8002866 <LL_RCC_IsRFUnderReset+0x1a>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_RCC_IsRFUnderReset+0x1c>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <LL_EXTI_EnableIT_32_63+0x24>)
 800287a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800287e:	4905      	ldr	r1, [pc, #20]	; (8002894 <LL_EXTI_EnableIT_32_63+0x24>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	58000800 	.word	0x58000800

08002898 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
    return status;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	e04b      	b.n	8002946 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	799b      	ldrb	r3, [r3, #6]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fd fec6 	bl	8000654 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80028ce:	f7ff ffad 	bl	800282c <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80028d2:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <HAL_SUBGHZ_Init+0xb8>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	0cdb      	lsrs	r3, r3, #19
 80028e0:	2264      	movs	r2, #100	; 0x64
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d105      	bne.n	80028fa <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	609a      	str	r2, [r3, #8]
      break;
 80028f8:	e007      	b.n	800290a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002900:	f7ff ffa4 	bl	800284c <LL_RCC_IsRFUnderReset>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ee      	bne.n	80028e8 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800290a:	f7ff ff3f 	bl	800278c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800290e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002912:	f7ff ffad 	bl	8002870 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002916:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800291a:	f7ff ff23 	bl	8002764 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800291e:	f7ff ff55 	bl	80027cc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fa2f 	bl	8002d90 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	719a      	strb	r2, [r3, #6]

  return status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000000 	.word	0x20000000

08002954 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	461a      	mov	r2, r3
 8002960:	460b      	mov	r3, r1
 8002962:	817b      	strh	r3, [r7, #10]
 8002964:	4613      	mov	r3, r2
 8002966:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	799b      	ldrb	r3, [r3, #6]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d14a      	bne.n	8002a08 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	795b      	ldrb	r3, [r3, #5]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800297a:	2302      	movs	r3, #2
 800297c:	e045      	b.n	8002a0a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2202      	movs	r2, #2
 8002988:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 face 	bl	8002f2c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002990:	f7ff ff0c 	bl	80027ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8002994:	210d      	movs	r1, #13
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fa1a 	bl	8002dd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800299c:	897b      	ldrh	r3, [r7, #10]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fa12 	bl	8002dd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80029ac:	897b      	ldrh	r3, [r7, #10]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	4619      	mov	r1, r3
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fa0c 	bl	8002dd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80029b8:	2300      	movs	r3, #0
 80029ba:	82bb      	strh	r3, [r7, #20]
 80029bc:	e00a      	b.n	80029d4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80029be:	8abb      	ldrh	r3, [r7, #20]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	4619      	mov	r1, r3
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fa01 	bl	8002dd0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80029ce:	8abb      	ldrh	r3, [r7, #20]
 80029d0:	3301      	adds	r3, #1
 80029d2:	82bb      	strh	r3, [r7, #20]
 80029d4:	8aba      	ldrh	r2, [r7, #20]
 80029d6:	893b      	ldrh	r3, [r7, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3f0      	bcc.n	80029be <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80029dc:	f7ff fed6 	bl	800278c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fac7 	bl	8002f74 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
 80029f2:	e001      	b.n	80029f8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	715a      	strb	r2, [r3, #5]

    return status;
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	e000      	b.n	8002a0a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
  }
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b088      	sub	sp, #32
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	460b      	mov	r3, r1
 8002a20:	817b      	strh	r3, [r7, #10]
 8002a22:	4613      	mov	r3, r2
 8002a24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	799b      	ldrb	r3, [r3, #6]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d14a      	bne.n	8002aca <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	795b      	ldrb	r3, [r3, #5]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e045      	b.n	8002acc <HAL_SUBGHZ_ReadRegisters+0xba>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fa70 	bl	8002f2c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002a4c:	f7ff feae 	bl	80027ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8002a50:	211d      	movs	r1, #29
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f9bc 	bl	8002dd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	4619      	mov	r1, r3
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f9b4 	bl	8002dd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8002a68:	897b      	ldrh	r3, [r7, #10]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f9ae 	bl	8002dd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8002a74:	2100      	movs	r1, #0
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f9aa 	bl	8002dd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	82fb      	strh	r3, [r7, #22]
 8002a80:	e009      	b.n	8002a96 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f9f9 	bl	8002e7c <SUBGHZSPI_Receive>
      pData++;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002a90:	8afb      	ldrh	r3, [r7, #22]
 8002a92:	3301      	adds	r3, #1
 8002a94:	82fb      	strh	r3, [r7, #22]
 8002a96:	8afa      	ldrh	r2, [r7, #22]
 8002a98:	893b      	ldrh	r3, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d3f1      	bcc.n	8002a82 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002a9e:	f7ff fe75 	bl	800278c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fa66 	bl	8002f74 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e001      	b.n	8002aba <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	715a      	strb	r2, [r3, #5]

    return status;
 8002ac6:	7ffb      	ldrb	r3, [r7, #31]
 8002ac8:	e000      	b.n	8002acc <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
  }
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	72fb      	strb	r3, [r7, #11]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	799b      	ldrb	r3, [r3, #6]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d14a      	bne.n	8002b88 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	795b      	ldrb	r3, [r3, #5]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e045      	b.n	8002b8a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fa11 	bl	8002f2c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002b0a:	7afb      	ldrb	r3, [r7, #11]
 8002b0c:	2b84      	cmp	r3, #132	; 0x84
 8002b0e:	d002      	beq.n	8002b16 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002b10:	7afb      	ldrb	r3, [r7, #11]
 8002b12:	2b94      	cmp	r3, #148	; 0x94
 8002b14:	d103      	bne.n	8002b1e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	711a      	strb	r2, [r3, #4]
 8002b1c:	e002      	b.n	8002b24 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002b24:	f7ff fe42 	bl	80027ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002b28:	7afb      	ldrb	r3, [r7, #11]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f94f 	bl	8002dd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	82bb      	strh	r3, [r7, #20]
 8002b36:	e00a      	b.n	8002b4e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002b38:	8abb      	ldrh	r3, [r7, #20]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4619      	mov	r1, r3
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f944 	bl	8002dd0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002b48:	8abb      	ldrh	r3, [r7, #20]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	82bb      	strh	r3, [r7, #20]
 8002b4e:	8aba      	ldrh	r2, [r7, #20]
 8002b50:	893b      	ldrh	r3, [r7, #8]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d3f0      	bcc.n	8002b38 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002b56:	f7ff fe19 	bl	800278c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	2b84      	cmp	r3, #132	; 0x84
 8002b5e:	d002      	beq.n	8002b66 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fa07 	bl	8002f74 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
 8002b72:	e001      	b.n	8002b78 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	715a      	strb	r2, [r3, #5]

    return status;
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	e000      	b.n	8002b8a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b088      	sub	sp, #32
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	72fb      	strb	r3, [r7, #11]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	799b      	ldrb	r3, [r3, #6]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d13d      	bne.n	8002c30 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	795b      	ldrb	r3, [r3, #5]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e038      	b.n	8002c32 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f9b0 	bl	8002f2c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002bcc:	f7ff fdee 	bl	80027ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002bd0:	7afb      	ldrb	r3, [r7, #11]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f8fb 	bl	8002dd0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002bda:	2100      	movs	r1, #0
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f8f7 	bl	8002dd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	82fb      	strh	r3, [r7, #22]
 8002be6:	e009      	b.n	8002bfc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002be8:	69b9      	ldr	r1, [r7, #24]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f946 	bl	8002e7c <SUBGHZSPI_Receive>
      pData++;
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002bf6:	8afb      	ldrh	r3, [r7, #22]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	82fb      	strh	r3, [r7, #22]
 8002bfc:	8afa      	ldrh	r2, [r7, #22]
 8002bfe:	893b      	ldrh	r3, [r7, #8]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d3f1      	bcc.n	8002be8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002c04:	f7ff fdc2 	bl	800278c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f9b3 	bl	8002f74 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	77fb      	strb	r3, [r7, #31]
 8002c1a:	e001      	b.n	8002c20 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	715a      	strb	r2, [r3, #5]

    return status;
 8002c2c:	7ffb      	ldrb	r3, [r7, #31]
 8002c2e:	e000      	b.n	8002c32 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	461a      	mov	r2, r3
 8002c46:	460b      	mov	r3, r1
 8002c48:	72fb      	strb	r3, [r7, #11]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	799b      	ldrb	r3, [r3, #6]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d13e      	bne.n	8002cd6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	795b      	ldrb	r3, [r3, #5]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e039      	b.n	8002cd8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f95e 	bl	8002f2c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002c70:	f7ff fd9c 	bl	80027ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8002c74:	210e      	movs	r1, #14
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f8aa 	bl	8002dd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8002c7c:	7afb      	ldrb	r3, [r7, #11]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f8a5 	bl	8002dd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	82bb      	strh	r3, [r7, #20]
 8002c8a:	e00a      	b.n	8002ca2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002c8c:	8abb      	ldrh	r3, [r7, #20]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	4619      	mov	r1, r3
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f89a 	bl	8002dd0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002c9c:	8abb      	ldrh	r3, [r7, #20]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	82bb      	strh	r3, [r7, #20]
 8002ca2:	8aba      	ldrh	r2, [r7, #20]
 8002ca4:	893b      	ldrh	r3, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d3f0      	bcc.n	8002c8c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002caa:	f7ff fd6f 	bl	800278c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f960 	bl	8002f74 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	75fb      	strb	r3, [r7, #23]
 8002cc0:	e001      	b.n	8002cc6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	715a      	strb	r2, [r3, #5]

    return status;
 8002cd2:	7dfb      	ldrb	r3, [r7, #23]
 8002cd4:	e000      	b.n	8002cd8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	461a      	mov	r2, r3
 8002cec:	460b      	mov	r3, r1
 8002cee:	72fb      	strb	r3, [r7, #11]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	799b      	ldrb	r3, [r3, #6]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d141      	bne.n	8002d86 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	795b      	ldrb	r3, [r3, #5]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_SUBGHZ_ReadBuffer+0x2e>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e03c      	b.n	8002d88 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f909 	bl	8002f2c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002d1a:	f7ff fd47 	bl	80027ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8002d1e:	211e      	movs	r1, #30
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f855 	bl	8002dd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8002d26:	7afb      	ldrb	r3, [r7, #11]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f850 	bl	8002dd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002d30:	2100      	movs	r1, #0
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f84c 	bl	8002dd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	82fb      	strh	r3, [r7, #22]
 8002d3c:	e009      	b.n	8002d52 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002d3e:	69b9      	ldr	r1, [r7, #24]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f89b 	bl	8002e7c <SUBGHZSPI_Receive>
      pData++;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002d4c:	8afb      	ldrh	r3, [r7, #22]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	82fb      	strh	r3, [r7, #22]
 8002d52:	8afa      	ldrh	r2, [r7, #22]
 8002d54:	893b      	ldrh	r3, [r7, #8]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d3f1      	bcc.n	8002d3e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002d5a:	f7ff fd17 	bl	800278c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f908 	bl	8002f74 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e001      	b.n	8002d76 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	715a      	strb	r2, [r3, #5]

    return status;
 8002d82:	7ffb      	ldrb	r3, [r7, #31]
 8002d84:	e000      	b.n	8002d88 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
  }
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <SUBGHZSPI_Init+0x3c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <SUBGHZSPI_Init+0x3c>)
 8002d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8002da4:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <SUBGHZSPI_Init+0x3c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8002dac:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <SUBGHZSPI_Init+0x3c>)
 8002db0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8002db4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <SUBGHZSPI_Init+0x3c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <SUBGHZSPI_Init+0x3c>)
 8002dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc0:	6013      	str	r3, [r2, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	58010000 	.word	0x58010000

08002dd0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002de0:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <SUBGHZSPI_Transmit+0xa0>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	0cdb      	lsrs	r3, r3, #19
 8002dee:	2264      	movs	r2, #100	; 0x64
 8002df0:	fb02 f303 	mul.w	r3, r2, r3
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	609a      	str	r2, [r3, #8]
      break;
 8002e06:	e008      	b.n	8002e1a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002e0e:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <SUBGHZSPI_Transmit+0xa4>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d1ed      	bne.n	8002df6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002e1a:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <SUBGHZSPI_Transmit+0xa8>)
 8002e1c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <SUBGHZSPI_Transmit+0xa0>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	0cdb      	lsrs	r3, r3, #19
 8002e32:	2264      	movs	r2, #100	; 0x64
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	609a      	str	r2, [r3, #8]
      break;
 8002e4a:	e008      	b.n	8002e5e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <SUBGHZSPI_Transmit+0xa4>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d1ed      	bne.n	8002e3a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <SUBGHZSPI_Transmit+0xa4>)
 8002e60:	68db      	ldr	r3, [r3, #12]

  return status;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000000 	.word	0x20000000
 8002e74:	58010000 	.word	0x58010000
 8002e78:	5801000c 	.word	0x5801000c

08002e7c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002e8a:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <SUBGHZSPI_Receive+0xa4>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	0cdb      	lsrs	r3, r3, #19
 8002e98:	2264      	movs	r2, #100	; 0x64
 8002e9a:	fb02 f303 	mul.w	r3, r2, r3
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d105      	bne.n	8002eb2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	609a      	str	r2, [r3, #8]
      break;
 8002eb0:	e008      	b.n	8002ec4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <SUBGHZSPI_Receive+0xa8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d1ed      	bne.n	8002ea0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <SUBGHZSPI_Receive+0xac>)
 8002ec6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	22ff      	movs	r2, #255	; 0xff
 8002ecc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002ece:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <SUBGHZSPI_Receive+0xa4>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	0cdb      	lsrs	r3, r3, #19
 8002edc:	2264      	movs	r2, #100	; 0x64
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	609a      	str	r2, [r3, #8]
      break;
 8002ef4:	e008      	b.n	8002f08 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <SUBGHZSPI_Receive+0xa8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d1ed      	bne.n	8002ee4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <SUBGHZSPI_Receive+0xa8>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	701a      	strb	r2, [r3, #0]

  return status;
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000000 	.word	0x20000000
 8002f24:	58010000 	.word	0x58010000
 8002f28:	5801000c 	.word	0x5801000c

08002f2c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	791b      	ldrb	r3, [r3, #4]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d111      	bne.n	8002f60 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <SUBGHZ_CheckDeviceReady+0x44>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002f4c:	f7ff fc2e 	bl	80027ac <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f9      	bne.n	8002f50 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002f5c:	f7ff fc16 	bl	800278c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f807 	bl	8002f74 <SUBGHZ_WaitOnBusy>
 8002f66:	4603      	mov	r3, r0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000000 	.word	0x20000000

08002f74 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8002f80:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <SUBGHZ_WaitOnBusy+0x58>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	0d1b      	lsrs	r3, r3, #20
 8002f8e:	2264      	movs	r2, #100	; 0x64
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8002f96:	f7ff fc37 	bl	8002808 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8002f9a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d105      	bne.n	8002fae <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	609a      	str	r2, [r3, #8]
      break;
 8002fac:	e009      	b.n	8002fc2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8002fb4:	f7ff fc16 	bl	80027e4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d0e9      	beq.n	8002f96 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000000 	.word	0x20000000

08002fd0 <LL_RCC_GetUSARTClockSource>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	041b      	lsls	r3, r3, #16
 8002fe8:	4313      	orrs	r3, r2
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <LL_RCC_GetLPUARTClockSource>:
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4013      	ands	r3, r2
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e042      	b.n	80030aa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd fd2e 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	; 0x24
 8003040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f8c3 	bl	80031e0 <UART_SetConfig>
 800305a:	4603      	mov	r3, r0
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e022      	b.n	80030aa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fb07 	bl	8003680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003080:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003090:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fb8d 	bl	80037c2 <UART_CheckIdleState>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08a      	sub	sp, #40	; 0x28
 80030b6:	af02      	add	r7, sp, #8
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	f040 8083 	bne.w	80031d4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_UART_Transmit+0x28>
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e07b      	b.n	80031d6 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_UART_Transmit+0x3a>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e074      	b.n	80031d6 <HAL_UART_Transmit+0x124>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2221      	movs	r2, #33	; 0x21
 8003100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003104:	f7fd fab7 	bl	8000676 <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	88fa      	ldrh	r2, [r7, #6]
 800310e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	d108      	bne.n	8003136 <HAL_UART_Transmit+0x84>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d104      	bne.n	8003136 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e003      	b.n	800313e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003146:	e02c      	b.n	80031a2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2200      	movs	r2, #0
 8003150:	2180      	movs	r1, #128	; 0x80
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fb80 	bl	8003858 <UART_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e039      	b.n	80031d6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	3302      	adds	r3, #2
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	e007      	b.n	8003190 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3301      	adds	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1cc      	bne.n	8003148 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2200      	movs	r2, #0
 80031b6:	2140      	movs	r1, #64	; 0x40
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fb4d 	bl	8003858 <UART_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e006      	b.n	80031d6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e000      	b.n	80031d6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e0:	b5b0      	push	{r4, r5, r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	4313      	orrs	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4bab      	ldr	r3, [pc, #684]	; (80034b8 <UART_SetConfig+0x2d8>)
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	69f9      	ldr	r1, [r7, #28]
 8003214:	430b      	orrs	r3, r1
 8003216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4aa0      	ldr	r2, [pc, #640]	; (80034bc <UART_SetConfig+0x2dc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	4313      	orrs	r3, r2
 8003246:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003252:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	69f9      	ldr	r1, [r7, #28]
 800325c:	430b      	orrs	r3, r1
 800325e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	f023 010f 	bic.w	r1, r3, #15
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a91      	ldr	r2, [pc, #580]	; (80034c0 <UART_SetConfig+0x2e0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d122      	bne.n	80032c6 <UART_SetConfig+0xe6>
 8003280:	2003      	movs	r0, #3
 8003282:	f7ff fea5 	bl	8002fd0 <LL_RCC_GetUSARTClockSource>
 8003286:	4603      	mov	r3, r0
 8003288:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800328c:	2b03      	cmp	r3, #3
 800328e:	d817      	bhi.n	80032c0 <UART_SetConfig+0xe0>
 8003290:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <UART_SetConfig+0xb8>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032b5 	.word	0x080032b5
 80032a0:	080032af 	.word	0x080032af
 80032a4:	080032bb 	.word	0x080032bb
 80032a8:	2301      	movs	r3, #1
 80032aa:	76fb      	strb	r3, [r7, #27]
 80032ac:	e072      	b.n	8003394 <UART_SetConfig+0x1b4>
 80032ae:	2302      	movs	r3, #2
 80032b0:	76fb      	strb	r3, [r7, #27]
 80032b2:	e06f      	b.n	8003394 <UART_SetConfig+0x1b4>
 80032b4:	2304      	movs	r3, #4
 80032b6:	76fb      	strb	r3, [r7, #27]
 80032b8:	e06c      	b.n	8003394 <UART_SetConfig+0x1b4>
 80032ba:	2308      	movs	r3, #8
 80032bc:	76fb      	strb	r3, [r7, #27]
 80032be:	e069      	b.n	8003394 <UART_SetConfig+0x1b4>
 80032c0:	2310      	movs	r3, #16
 80032c2:	76fb      	strb	r3, [r7, #27]
 80032c4:	e066      	b.n	8003394 <UART_SetConfig+0x1b4>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7e      	ldr	r2, [pc, #504]	; (80034c4 <UART_SetConfig+0x2e4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d134      	bne.n	800333a <UART_SetConfig+0x15a>
 80032d0:	200c      	movs	r0, #12
 80032d2:	f7ff fe7d 	bl	8002fd0 <LL_RCC_GetUSARTClockSource>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	d829      	bhi.n	8003334 <UART_SetConfig+0x154>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <UART_SetConfig+0x108>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	0800331d 	.word	0x0800331d
 80032ec:	08003335 	.word	0x08003335
 80032f0:	08003335 	.word	0x08003335
 80032f4:	08003335 	.word	0x08003335
 80032f8:	08003329 	.word	0x08003329
 80032fc:	08003335 	.word	0x08003335
 8003300:	08003335 	.word	0x08003335
 8003304:	08003335 	.word	0x08003335
 8003308:	08003323 	.word	0x08003323
 800330c:	08003335 	.word	0x08003335
 8003310:	08003335 	.word	0x08003335
 8003314:	08003335 	.word	0x08003335
 8003318:	0800332f 	.word	0x0800332f
 800331c:	2300      	movs	r3, #0
 800331e:	76fb      	strb	r3, [r7, #27]
 8003320:	e038      	b.n	8003394 <UART_SetConfig+0x1b4>
 8003322:	2302      	movs	r3, #2
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e035      	b.n	8003394 <UART_SetConfig+0x1b4>
 8003328:	2304      	movs	r3, #4
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e032      	b.n	8003394 <UART_SetConfig+0x1b4>
 800332e:	2308      	movs	r3, #8
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e02f      	b.n	8003394 <UART_SetConfig+0x1b4>
 8003334:	2310      	movs	r3, #16
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e02c      	b.n	8003394 <UART_SetConfig+0x1b4>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a5f      	ldr	r2, [pc, #380]	; (80034bc <UART_SetConfig+0x2dc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d125      	bne.n	8003390 <UART_SetConfig+0x1b0>
 8003344:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003348:	f7ff fe54 	bl	8002ff4 <LL_RCC_GetLPUARTClockSource>
 800334c:	4603      	mov	r3, r0
 800334e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003352:	d017      	beq.n	8003384 <UART_SetConfig+0x1a4>
 8003354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003358:	d817      	bhi.n	800338a <UART_SetConfig+0x1aa>
 800335a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800335e:	d00b      	beq.n	8003378 <UART_SetConfig+0x198>
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	d811      	bhi.n	800338a <UART_SetConfig+0x1aa>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <UART_SetConfig+0x192>
 800336a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336e:	d006      	beq.n	800337e <UART_SetConfig+0x19e>
 8003370:	e00b      	b.n	800338a <UART_SetConfig+0x1aa>
 8003372:	2300      	movs	r3, #0
 8003374:	76fb      	strb	r3, [r7, #27]
 8003376:	e00d      	b.n	8003394 <UART_SetConfig+0x1b4>
 8003378:	2302      	movs	r3, #2
 800337a:	76fb      	strb	r3, [r7, #27]
 800337c:	e00a      	b.n	8003394 <UART_SetConfig+0x1b4>
 800337e:	2304      	movs	r3, #4
 8003380:	76fb      	strb	r3, [r7, #27]
 8003382:	e007      	b.n	8003394 <UART_SetConfig+0x1b4>
 8003384:	2308      	movs	r3, #8
 8003386:	76fb      	strb	r3, [r7, #27]
 8003388:	e004      	b.n	8003394 <UART_SetConfig+0x1b4>
 800338a:	2310      	movs	r3, #16
 800338c:	76fb      	strb	r3, [r7, #27]
 800338e:	e001      	b.n	8003394 <UART_SetConfig+0x1b4>
 8003390:	2310      	movs	r3, #16
 8003392:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a48      	ldr	r2, [pc, #288]	; (80034bc <UART_SetConfig+0x2dc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	f040 8098 	bne.w	80034d0 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033a0:	7efb      	ldrb	r3, [r7, #27]
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d823      	bhi.n	80033ee <UART_SetConfig+0x20e>
 80033a6:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <UART_SetConfig+0x1cc>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	080033ef 	.word	0x080033ef
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	080033ef 	.word	0x080033ef
 80033bc:	080033df 	.word	0x080033df
 80033c0:	080033ef 	.word	0x080033ef
 80033c4:	080033ef 	.word	0x080033ef
 80033c8:	080033ef 	.word	0x080033ef
 80033cc:	080033e7 	.word	0x080033e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7fe fee0 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 80033d4:	6178      	str	r0, [r7, #20]
        break;
 80033d6:	e00f      	b.n	80033f8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d8:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <UART_SetConfig+0x2e8>)
 80033da:	617b      	str	r3, [r7, #20]
        break;
 80033dc:	e00c      	b.n	80033f8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033de:	f7fe fe25 	bl	800202c <HAL_RCC_GetSysClockFreq>
 80033e2:	6178      	str	r0, [r7, #20]
        break;
 80033e4:	e008      	b.n	80033f8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ea:	617b      	str	r3, [r7, #20]
        break;
 80033ec:	e004      	b.n	80033f8 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	76bb      	strb	r3, [r7, #26]
        break;
 80033f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8128 	beq.w	8003650 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	4a31      	ldr	r2, [pc, #196]	; (80034cc <UART_SetConfig+0x2ec>)
 8003406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800340a:	461a      	mov	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003412:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	429a      	cmp	r2, r3
 8003422:	d305      	bcc.n	8003430 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d902      	bls.n	8003436 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	76bb      	strb	r3, [r7, #26]
 8003434:	e10c      	b.n	8003650 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	4618      	mov	r0, r3
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	4a22      	ldr	r2, [pc, #136]	; (80034cc <UART_SetConfig+0x2ec>)
 8003444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003448:	b29a      	uxth	r2, r3
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	f7fc fe93 	bl	8000178 <__aeabi_uldivmod>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	020b      	lsls	r3, r1, #8
 8003464:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003468:	0202      	lsls	r2, r0, #8
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	6849      	ldr	r1, [r1, #4]
 800346e:	0849      	lsrs	r1, r1, #1
 8003470:	4608      	mov	r0, r1
 8003472:	f04f 0100 	mov.w	r1, #0
 8003476:	1814      	adds	r4, r2, r0
 8003478:	eb43 0501 	adc.w	r5, r3, r1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	461a      	mov	r2, r3
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	4620      	mov	r0, r4
 8003488:	4629      	mov	r1, r5
 800348a:	f7fc fe75 	bl	8000178 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4613      	mov	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800349c:	d308      	bcc.n	80034b0 <UART_SetConfig+0x2d0>
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034a4:	d204      	bcs.n	80034b0 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	e0cf      	b.n	8003650 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	76bb      	strb	r3, [r7, #26]
 80034b4:	e0cc      	b.n	8003650 <UART_SetConfig+0x470>
 80034b6:	bf00      	nop
 80034b8:	cfff69f3 	.word	0xcfff69f3
 80034bc:	40008000 	.word	0x40008000
 80034c0:	40013800 	.word	0x40013800
 80034c4:	40004400 	.word	0x40004400
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	08008690 	.word	0x08008690
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d8:	d165      	bne.n	80035a6 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 80034da:	7efb      	ldrb	r3, [r7, #27]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d828      	bhi.n	8003532 <UART_SetConfig+0x352>
 80034e0:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <UART_SetConfig+0x308>)
 80034e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e6:	bf00      	nop
 80034e8:	0800350d 	.word	0x0800350d
 80034ec:	08003515 	.word	0x08003515
 80034f0:	0800351d 	.word	0x0800351d
 80034f4:	08003533 	.word	0x08003533
 80034f8:	08003523 	.word	0x08003523
 80034fc:	08003533 	.word	0x08003533
 8003500:	08003533 	.word	0x08003533
 8003504:	08003533 	.word	0x08003533
 8003508:	0800352b 	.word	0x0800352b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800350c:	f7fe fe42 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 8003510:	6178      	str	r0, [r7, #20]
        break;
 8003512:	e013      	b.n	800353c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003514:	f7fe fe50 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 8003518:	6178      	str	r0, [r7, #20]
        break;
 800351a:	e00f      	b.n	800353c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800351c:	4b56      	ldr	r3, [pc, #344]	; (8003678 <UART_SetConfig+0x498>)
 800351e:	617b      	str	r3, [r7, #20]
        break;
 8003520:	e00c      	b.n	800353c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003522:	f7fe fd83 	bl	800202c <HAL_RCC_GetSysClockFreq>
 8003526:	6178      	str	r0, [r7, #20]
        break;
 8003528:	e008      	b.n	800353c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352e:	617b      	str	r3, [r7, #20]
        break;
 8003530:	e004      	b.n	800353c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	76bb      	strb	r3, [r7, #26]
        break;
 800353a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8086 	beq.w	8003650 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	4a4c      	ldr	r2, [pc, #304]	; (800367c <UART_SetConfig+0x49c>)
 800354a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800354e:	461a      	mov	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fbb3 f3f2 	udiv	r3, r3, r2
 8003556:	005a      	lsls	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	441a      	add	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	b29b      	uxth	r3, r3
 800356a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	d916      	bls.n	80035a0 <UART_SetConfig+0x3c0>
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d212      	bcs.n	80035a0 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f023 030f 	bic.w	r3, r3, #15
 8003582:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	b29b      	uxth	r3, r3
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	b29a      	uxth	r2, r3
 8003590:	89fb      	ldrh	r3, [r7, #14]
 8003592:	4313      	orrs	r3, r2
 8003594:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	89fa      	ldrh	r2, [r7, #14]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	e057      	b.n	8003650 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	76bb      	strb	r3, [r7, #26]
 80035a4:	e054      	b.n	8003650 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035a6:	7efb      	ldrb	r3, [r7, #27]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d828      	bhi.n	80035fe <UART_SetConfig+0x41e>
 80035ac:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <UART_SetConfig+0x3d4>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080035e1 	.word	0x080035e1
 80035bc:	080035e9 	.word	0x080035e9
 80035c0:	080035ff 	.word	0x080035ff
 80035c4:	080035ef 	.word	0x080035ef
 80035c8:	080035ff 	.word	0x080035ff
 80035cc:	080035ff 	.word	0x080035ff
 80035d0:	080035ff 	.word	0x080035ff
 80035d4:	080035f7 	.word	0x080035f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7fe fddc 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 80035dc:	6178      	str	r0, [r7, #20]
        break;
 80035de:	e013      	b.n	8003608 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e0:	f7fe fdea 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 80035e4:	6178      	str	r0, [r7, #20]
        break;
 80035e6:	e00f      	b.n	8003608 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e8:	4b23      	ldr	r3, [pc, #140]	; (8003678 <UART_SetConfig+0x498>)
 80035ea:	617b      	str	r3, [r7, #20]
        break;
 80035ec:	e00c      	b.n	8003608 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ee:	f7fe fd1d 	bl	800202c <HAL_RCC_GetSysClockFreq>
 80035f2:	6178      	str	r0, [r7, #20]
        break;
 80035f4:	e008      	b.n	8003608 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fa:	617b      	str	r3, [r7, #20]
        break;
 80035fc:	e004      	b.n	8003608 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	76bb      	strb	r3, [r7, #26]
        break;
 8003606:	bf00      	nop
    }

    if (pclk != 0U)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d020      	beq.n	8003650 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	4a1a      	ldr	r2, [pc, #104]	; (800367c <UART_SetConfig+0x49c>)
 8003614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003618:	461a      	mov	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	441a      	add	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	b29b      	uxth	r3, r3
 8003632:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b0f      	cmp	r3, #15
 8003638:	d908      	bls.n	800364c <UART_SetConfig+0x46c>
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003640:	d204      	bcs.n	800364c <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	e001      	b.n	8003650 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800366c:	7ebb      	ldrb	r3, [r7, #26]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bdb0      	pop	{r4, r5, r7, pc}
 8003676:	bf00      	nop
 8003678:	00f42400 	.word	0x00f42400
 800367c:	08008690 	.word	0x08008690

08003680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01a      	beq.n	8003796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800377e:	d10a      	bne.n	8003796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af02      	add	r7, sp, #8
 80037c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037d2:	f7fc ff50 	bl	8000676 <HAL_GetTick>
 80037d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d10e      	bne.n	8003804 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f82f 	bl	8003858 <UART_WaitOnFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e025      	b.n	8003850 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b04      	cmp	r3, #4
 8003810:	d10e      	bne.n	8003830 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003812:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f819 	bl	8003858 <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e00f      	b.n	8003850 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b09c      	sub	sp, #112	; 0x70
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003868:	e0a9      	b.n	80039be <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	f000 80a5 	beq.w	80039be <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003874:	f7fc feff 	bl	8000676 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003880:	429a      	cmp	r2, r3
 8003882:	d302      	bcc.n	800388a <UART_WaitOnFlagUntilTimeout+0x32>
 8003884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003886:	2b00      	cmp	r3, #0
 8003888:	d140      	bne.n	800390c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800389a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800389e:	667b      	str	r3, [r7, #100]	; 0x64
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038aa:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e6      	bne.n	800388a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3308      	adds	r3, #8
 80038c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	663b      	str	r3, [r7, #96]	; 0x60
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3308      	adds	r3, #8
 80038da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80038de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e5      	bne.n	80038bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e069      	b.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d051      	beq.n	80039be <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003928:	d149      	bne.n	80039be <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003932:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003948:	66fb      	str	r3, [r7, #108]	; 0x6c
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
 8003954:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e6      	bne.n	8003934 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3308      	adds	r3, #8
 800396c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	613b      	str	r3, [r7, #16]
   return(result);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	66bb      	str	r3, [r7, #104]	; 0x68
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3308      	adds	r3, #8
 8003984:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003986:	623a      	str	r2, [r7, #32]
 8003988:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	69f9      	ldr	r1, [r7, #28]
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	61bb      	str	r3, [r7, #24]
   return(result);
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e5      	bne.n	8003966 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e010      	b.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4013      	ands	r3, r2
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	bf0c      	ite	eq
 80039ce:	2301      	moveq	r3, #1
 80039d0:	2300      	movne	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	429a      	cmp	r2, r3
 80039da:	f43f af46 	beq.w	800386a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3770      	adds	r7, #112	; 0x70
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_UARTEx_DisableFifoMode+0x16>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e027      	b.n	8003a4e <HAL_UARTEx_DisableFifoMode+0x66>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2224      	movs	r2, #36	; 0x24
 8003a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003a2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e02d      	b.n	8003acc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f84f 	bl	8003b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e02d      	b.n	8003b48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	; 0x24
 8003af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f811 	bl	8003b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d108      	bne.n	8003b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b70:	e031      	b.n	8003bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b72:	2308      	movs	r3, #8
 8003b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b76:	2308      	movs	r3, #8
 8003b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	0e5b      	lsrs	r3, r3, #25
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	0f5b      	lsrs	r3, r3, #29
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b9a:	7bbb      	ldrb	r3, [r7, #14]
 8003b9c:	7b3a      	ldrb	r2, [r7, #12]
 8003b9e:	4910      	ldr	r1, [pc, #64]	; (8003be0 <UARTEx_SetNbDataToProcess+0x90>)
 8003ba0:	5c8a      	ldrb	r2, [r1, r2]
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ba6:	7b3a      	ldrb	r2, [r7, #12]
 8003ba8:	490e      	ldr	r1, [pc, #56]	; (8003be4 <UARTEx_SetNbDataToProcess+0x94>)
 8003baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	7b7a      	ldrb	r2, [r7, #13]
 8003bbc:	4908      	ldr	r1, [pc, #32]	; (8003be0 <UARTEx_SetNbDataToProcess+0x90>)
 8003bbe:	5c8a      	ldrb	r2, [r1, r2]
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003bc4:	7b7a      	ldrb	r2, [r7, #13]
 8003bc6:	4907      	ldr	r1, [pc, #28]	; (8003be4 <UARTEx_SetNbDataToProcess+0x94>)
 8003bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr
 8003be0:	080086a8 	.word	0x080086a8
 8003be4:	080086b0 	.word	0x080086b0

08003be8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8003bf0:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <RadioInit+0x90>)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8003bf6:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <RadioInit+0x94>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <RadioInit+0x94>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <RadioInit+0x94>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8003c08:	481d      	ldr	r0, [pc, #116]	; (8003c80 <RadioInit+0x98>)
 8003c0a:	f001 fe7b 	bl	8005904 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f001 f818 	bl	8004c44 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8003c14:	f002 f90c 	bl	8005e30 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8003c18:	2100      	movs	r1, #0
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	f002 fc62 	bl	80064e4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8003c20:	2204      	movs	r2, #4
 8003c22:	2100      	movs	r1, #0
 8003c24:	2001      	movs	r0, #1
 8003c26:	f002 fa8d 	bl	8006144 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003c36:	f002 f9c1 	bl	8005fbc <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8003c3a:	f000 fe95 	bl	8004968 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <RadioInit+0x9c>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	f04f 31ff 	mov.w	r1, #4294967295
 8003c4a:	480f      	ldr	r0, [pc, #60]	; (8003c88 <RadioInit+0xa0>)
 8003c4c:	f003 f880 	bl	8006d50 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8003c50:	2300      	movs	r3, #0
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <RadioInit+0xa4>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	f04f 31ff 	mov.w	r1, #4294967295
 8003c5c:	480c      	ldr	r0, [pc, #48]	; (8003c90 <RadioInit+0xa8>)
 8003c5e:	f003 f877 	bl	8006d50 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8003c62:	4809      	ldr	r0, [pc, #36]	; (8003c88 <RadioInit+0xa0>)
 8003c64:	f003 f918 	bl	8006e98 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8003c68:	4809      	ldr	r0, [pc, #36]	; (8003c90 <RadioInit+0xa8>)
 8003c6a:	f003 f915 	bl	8006e98 <UTIL_TIMER_Stop>
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000194 	.word	0x20000194
 8003c7c:	20000300 	.word	0x20000300
 8003c80:	08004d29 	.word	0x08004d29
 8003c84:	08004cb1 	.word	0x08004cb1
 8003c88:	20000358 	.word	0x20000358
 8003c8c:	08004cc5 	.word	0x08004cc5
 8003c90:	20000370 	.word	0x20000370

08003c94 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8003c98:	f001 fe76 	bl	8005988 <SUBGRF_GetOperatingMode>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b07      	cmp	r3, #7
 8003ca0:	d00a      	beq.n	8003cb8 <RadioGetStatus+0x24>
 8003ca2:	2b07      	cmp	r3, #7
 8003ca4:	dc0a      	bgt.n	8003cbc <RadioGetStatus+0x28>
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d002      	beq.n	8003cb0 <RadioGetStatus+0x1c>
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	d002      	beq.n	8003cb4 <RadioGetStatus+0x20>
 8003cae:	e005      	b.n	8003cbc <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e004      	b.n	8003cbe <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e002      	b.n	8003cbe <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e000      	b.n	8003cbe <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8003cbc:	2300      	movs	r3, #0
    }
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8003cce:	4a25      	ldr	r2, [pc, #148]	; (8003d64 <RadioSetModem+0xa0>)
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f002 ff37 	bl	8006b4a <RFW_SetRadioModem>
    switch( modem )
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d80b      	bhi.n	8003cfc <RadioSetModem+0x38>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <RadioSetModem+0x28>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003d0b 	.word	0x08003d0b
 8003cf0:	08003d31 	.word	0x08003d31
 8003cf4:	08003d3f 	.word	0x08003d3f
 8003cf8:	08003d4d 	.word	0x08003d4d
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f002 f9fb 	bl	80060f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <RadioSetModem+0xa0>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	735a      	strb	r2, [r3, #13]
        break;
 8003d08:	e028      	b.n	8003d5c <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	f002 f9f4 	bl	80060f8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8003d10:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <RadioSetModem+0xa0>)
 8003d12:	7b5a      	ldrb	r2, [r3, #13]
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <RadioSetModem+0xa0>)
 8003d16:	7b1b      	ldrb	r3, [r3, #12]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d01e      	beq.n	8003d5a <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <RadioSetModem+0xa0>)
 8003d1e:	7b1a      	ldrb	r2, [r3, #12]
 8003d20:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <RadioSetModem+0xa0>)
 8003d22:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <RadioSetModem+0xa0>)
 8003d26:	7b5b      	ldrb	r3, [r3, #13]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 ff8b 	bl	8004c44 <RadioSetPublicNetwork>
        }
        break;
 8003d2e:	e014      	b.n	8003d5a <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8003d30:	2002      	movs	r0, #2
 8003d32:	f002 f9e1 	bl	80060f8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <RadioSetModem+0xa0>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	735a      	strb	r2, [r3, #13]
        break;
 8003d3c:	e00e      	b.n	8003d5c <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8003d3e:	2002      	movs	r0, #2
 8003d40:	f002 f9da 	bl	80060f8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8003d44:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <RadioSetModem+0xa0>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	735a      	strb	r2, [r3, #13]
        break;
 8003d4a:	e007      	b.n	8003d5c <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f002 f9d3 	bl	80060f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <RadioSetModem+0xa0>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	735a      	strb	r2, [r3, #13]
        break;
 8003d58:	e000      	b.n	8003d5c <RadioSetModem+0x98>
        break;
 8003d5a:	bf00      	nop
    }
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000300 	.word	0x20000300

08003d68 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f002 f97f 	bl	8006074 <SUBGRF_SetRfFrequency>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b090      	sub	sp, #64	; 0x40
 8003d82:	af0a      	add	r7, sp, #40	; 0x28
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	603b      	str	r3, [r7, #0]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8003d9a:	f000 fdf8 	bl	800498e <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f7ff ff90 	bl	8003cc4 <RadioSetModem>

    RadioSetChannel( freq );
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff ffdf 	bl	8003d68 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8003daa:	2301      	movs	r3, #1
 8003dac:	9309      	str	r3, [sp, #36]	; 0x24
 8003dae:	2300      	movs	r3, #0
 8003db0:	9308      	str	r3, [sp, #32]
 8003db2:	2300      	movs	r3, #0
 8003db4:	9307      	str	r3, [sp, #28]
 8003db6:	2300      	movs	r3, #0
 8003db8:	9306      	str	r3, [sp, #24]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9305      	str	r3, [sp, #20]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9304      	str	r3, [sp, #16]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9303      	str	r3, [sp, #12]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	9302      	str	r3, [sp, #8]
 8003dca:	2303      	movs	r3, #3
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f000 f840 	bl	8003e60 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8003de0:	2000      	movs	r0, #0
 8003de2:	f000 fddb 	bl	800499c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8003de6:	f000 ff5b 	bl	8004ca0 <RadioGetWakeupTime>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc fc49 	bl	8000684 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8003df2:	f003 f8eb 	bl	8006fcc <UTIL_TIMER_GetCurrentTime>
 8003df6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003df8:	e00d      	b.n	8003e16 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f000 fea0 	bl	8004b40 <RadioRssi>
 8003e00:	4603      	mov	r3, r0
 8003e02:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8003e04:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	dd02      	ble.n	8003e16 <RadioIsChannelFree+0x98>
        {
            status = false;
 8003e10:	2300      	movs	r3, #0
 8003e12:	75fb      	strb	r3, [r7, #23]
            break;
 8003e14:	e006      	b.n	8003e24 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003e16:	6938      	ldr	r0, [r7, #16]
 8003e18:	f003 f8ea 	bl	8006ff0 <UTIL_TIMER_GetElapsedTime>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d8ea      	bhi.n	8003dfa <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8003e24:	f000 fdb3 	bl	800498e <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	f7ff ff41 	bl	8003cc4 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8003e42:	2300      	movs	r3, #0
 8003e44:	2200      	movs	r2, #0
 8003e46:	2100      	movs	r1, #0
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f002 f8b7 	bl	8005fbc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8003e4e:	f001 fe6c 	bl	8005b2a <SUBGRF_GetRandom>
 8003e52:	6078      	str	r0, [r7, #4]

    return rnd;
 8003e54:	687b      	ldr	r3, [r7, #4]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	4613      	mov	r3, r2
 8003e72:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8003e74:	4abd      	ldr	r2, [pc, #756]	; (800416c <RadioSetRxConfig+0x30c>)
 8003e76:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8003e7a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8003e7c:	f002 fe23 	bl	8006ac6 <RFW_DeInit>
    if( rxContinuous == true )
 8003e80:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8003e8c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8003e94:	4ab6      	ldr	r2, [pc, #728]	; (8004170 <RadioSetRxConfig+0x310>)
 8003e96:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003e9a:	7013      	strb	r3, [r2, #0]
 8003e9c:	e002      	b.n	8003ea4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8003e9e:	4bb4      	ldr	r3, [pc, #720]	; (8004170 <RadioSetRxConfig+0x310>)
 8003ea0:	22ff      	movs	r2, #255	; 0xff
 8003ea2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d009      	beq.n	8003ebe <RadioSetRxConfig+0x5e>
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	f300 81da 	bgt.w	8004264 <RadioSetRxConfig+0x404>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80bf 	beq.w	8004034 <RadioSetRxConfig+0x1d4>
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	f000 812c 	beq.w	8004114 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8003ebc:	e1d2      	b.n	8004264 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f001 ff78 	bl	8005db4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8003ec4:	4ba9      	ldr	r3, [pc, #676]	; (800416c <RadioSetRxConfig+0x30c>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8003ecc:	4aa7      	ldr	r2, [pc, #668]	; (800416c <RadioSetRxConfig+0x30c>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8003ed2:	4ba6      	ldr	r3, [pc, #664]	; (800416c <RadioSetRxConfig+0x30c>)
 8003ed4:	2209      	movs	r2, #9
 8003ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8003eda:	4ba4      	ldr	r3, [pc, #656]	; (800416c <RadioSetRxConfig+0x30c>)
 8003edc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8003ee2:	68b8      	ldr	r0, [r7, #8]
 8003ee4:	f002 fd20 	bl	8006928 <SUBGRF_GetFskBandwidthRegValue>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	461a      	mov	r2, r3
 8003eec:	4b9f      	ldr	r3, [pc, #636]	; (800416c <RadioSetRxConfig+0x30c>)
 8003eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8003ef2:	4b9e      	ldr	r3, [pc, #632]	; (800416c <RadioSetRxConfig+0x30c>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8003ef8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	4b9b      	ldr	r3, [pc, #620]	; (800416c <RadioSetRxConfig+0x30c>)
 8003f00:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8003f02:	4b9a      	ldr	r3, [pc, #616]	; (800416c <RadioSetRxConfig+0x30c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8003f08:	4b98      	ldr	r3, [pc, #608]	; (800416c <RadioSetRxConfig+0x30c>)
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8003f0e:	4b97      	ldr	r3, [pc, #604]	; (800416c <RadioSetRxConfig+0x30c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8003f14:	4b95      	ldr	r3, [pc, #596]	; (800416c <RadioSetRxConfig+0x30c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8003f1a:	4b95      	ldr	r3, [pc, #596]	; (8004170 <RadioSetRxConfig+0x310>)
 8003f1c:	781a      	ldrb	r2, [r3, #0]
 8003f1e:	4b93      	ldr	r3, [pc, #588]	; (800416c <RadioSetRxConfig+0x30c>)
 8003f20:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8003f22:	4b92      	ldr	r3, [pc, #584]	; (800416c <RadioSetRxConfig+0x30c>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8003f28:	4b90      	ldr	r3, [pc, #576]	; (800416c <RadioSetRxConfig+0x30c>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8003f2e:	2004      	movs	r0, #4
 8003f30:	f7ff fec8 	bl	8003cc4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8003f34:	488f      	ldr	r0, [pc, #572]	; (8004174 <RadioSetRxConfig+0x314>)
 8003f36:	f002 f96b 	bl	8006210 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8003f3a:	488f      	ldr	r0, [pc, #572]	; (8004178 <RadioSetRxConfig+0x318>)
 8003f3c:	f002 fa34 	bl	80063a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8003f40:	4a8e      	ldr	r2, [pc, #568]	; (800417c <RadioSetRxConfig+0x31c>)
 8003f42:	f107 031c 	add.w	r3, r7, #28
 8003f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8003f4e:	f107 031c 	add.w	r3, r7, #28
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 fd67 	bl	8005a26 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8003f58:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f5c:	f001 fdb2 	bl	8005ac4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8003f60:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8003f64:	f000 fe0b 	bl	8004b7e <RadioRead>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8003f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f72:	f023 0310 	bic.w	r3, r3, #16
 8003f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8003f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8003f84:	f000 fde9 	bl	8004b5a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8003f88:	2104      	movs	r1, #4
 8003f8a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8003f8e:	f000 fde4 	bl	8004b5a <RadioWrite>
            modReg= RadioRead(0x89b);
 8003f92:	f640 009b 	movw	r0, #2203	; 0x89b
 8003f96:	f000 fdf2 	bl	8004b7e <RadioRead>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8003fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa4:	f023 031c 	bic.w	r3, r3, #28
 8003fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8003fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fb0:	f043 0308 	orr.w	r3, r3, #8
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f640 009b 	movw	r0, #2203	; 0x89b
 8003fbc:	f000 fdcd 	bl	8004b5a <RadioWrite>
            modReg= RadioRead(0x6d1);
 8003fc0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8003fc4:	f000 fddb 	bl	8004b7e <RadioRead>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8003fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fd2:	f023 0318 	bic.w	r3, r3, #24
 8003fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8003fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fde:	f043 0318 	orr.w	r3, r3, #24
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8003fea:	f000 fdb6 	bl	8004b5a <RadioWrite>
            modReg= RadioRead(0x6ac);
 8003fee:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8003ff2:	f000 fdc4 	bl	8004b7e <RadioRead>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8003ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8004008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800400c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8004010:	b2db      	uxtb	r3, r3
 8004012:	4619      	mov	r1, r3
 8004014:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8004018:	f000 fd9f 	bl	8004b5a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800401c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800401e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	461a      	mov	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	fbb2 f3f3 	udiv	r3, r2, r3
 800402e:	4a4f      	ldr	r2, [pc, #316]	; (800416c <RadioSetRxConfig+0x30c>)
 8004030:	6093      	str	r3, [r2, #8]
            break;
 8004032:	e118      	b.n	8004266 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8004034:	2000      	movs	r0, #0
 8004036:	f001 febd 	bl	8005db4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800403a:	4b4c      	ldr	r3, [pc, #304]	; (800416c <RadioSetRxConfig+0x30c>)
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8004042:	4a4a      	ldr	r2, [pc, #296]	; (800416c <RadioSetRxConfig+0x30c>)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8004048:	4b48      	ldr	r3, [pc, #288]	; (800416c <RadioSetRxConfig+0x30c>)
 800404a:	220b      	movs	r2, #11
 800404c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8004050:	68b8      	ldr	r0, [r7, #8]
 8004052:	f002 fc69 	bl	8006928 <SUBGRF_GetFskBandwidthRegValue>
 8004056:	4603      	mov	r3, r0
 8004058:	461a      	mov	r2, r3
 800405a:	4b44      	ldr	r3, [pc, #272]	; (800416c <RadioSetRxConfig+0x30c>)
 800405c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8004060:	4b42      	ldr	r3, [pc, #264]	; (800416c <RadioSetRxConfig+0x30c>)
 8004062:	2200      	movs	r2, #0
 8004064:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8004066:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	b29a      	uxth	r2, r3
 800406c:	4b3f      	ldr	r3, [pc, #252]	; (800416c <RadioSetRxConfig+0x30c>)
 800406e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8004070:	4b3e      	ldr	r3, [pc, #248]	; (800416c <RadioSetRxConfig+0x30c>)
 8004072:	2204      	movs	r2, #4
 8004074:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8004076:	4b3d      	ldr	r3, [pc, #244]	; (800416c <RadioSetRxConfig+0x30c>)
 8004078:	2218      	movs	r2, #24
 800407a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800407c:	4b3b      	ldr	r3, [pc, #236]	; (800416c <RadioSetRxConfig+0x30c>)
 800407e:	2200      	movs	r2, #0
 8004080:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8004082:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004086:	f083 0301 	eor.w	r3, r3, #1
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	4b37      	ldr	r3, [pc, #220]	; (800416c <RadioSetRxConfig+0x30c>)
 8004090:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8004092:	4b37      	ldr	r3, [pc, #220]	; (8004170 <RadioSetRxConfig+0x310>)
 8004094:	781a      	ldrb	r2, [r3, #0]
 8004096:	4b35      	ldr	r3, [pc, #212]	; (800416c <RadioSetRxConfig+0x30c>)
 8004098:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800409a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80040a2:	4b32      	ldr	r3, [pc, #200]	; (800416c <RadioSetRxConfig+0x30c>)
 80040a4:	22f2      	movs	r2, #242	; 0xf2
 80040a6:	75da      	strb	r2, [r3, #23]
 80040a8:	e002      	b.n	80040b0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <RadioSetRxConfig+0x30c>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80040b0:	4b2e      	ldr	r3, [pc, #184]	; (800416c <RadioSetRxConfig+0x30c>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80040b6:	f000 fc6a 	bl	800498e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80040ba:	4b2c      	ldr	r3, [pc, #176]	; (800416c <RadioSetRxConfig+0x30c>)
 80040bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf14      	ite	ne
 80040c4:	2301      	movne	r3, #1
 80040c6:	2300      	moveq	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fdfa 	bl	8003cc4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80040d0:	4828      	ldr	r0, [pc, #160]	; (8004174 <RadioSetRxConfig+0x314>)
 80040d2:	f002 f89d 	bl	8006210 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80040d6:	4828      	ldr	r0, [pc, #160]	; (8004178 <RadioSetRxConfig+0x318>)
 80040d8:	f002 f966 	bl	80063a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80040dc:	4a28      	ldr	r2, [pc, #160]	; (8004180 <RadioSetRxConfig+0x320>)
 80040de:	f107 0314 	add.w	r3, r7, #20
 80040e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80040ea:	f107 0314 	add.w	r3, r7, #20
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fc99 	bl	8005a26 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80040f4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040f8:	f001 fce4 	bl	8005ac4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80040fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80040fe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	461a      	mov	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	fbb2 f3f3 	udiv	r3, r2, r3
 800410e:	4a17      	ldr	r2, [pc, #92]	; (800416c <RadioSetRxConfig+0x30c>)
 8004110:	6093      	str	r3, [r2, #8]
            break;
 8004112:	e0a8      	b.n	8004266 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8004114:	2000      	movs	r0, #0
 8004116:	f001 fe4d 	bl	8005db4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800411a:	4b14      	ldr	r3, [pc, #80]	; (800416c <RadioSetRxConfig+0x30c>)
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	b2da      	uxtb	r2, r3
 8004126:	4b11      	ldr	r3, [pc, #68]	; (800416c <RadioSetRxConfig+0x30c>)
 8004128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <RadioSetRxConfig+0x324>)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4413      	add	r3, r2
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	4b0d      	ldr	r3, [pc, #52]	; (800416c <RadioSetRxConfig+0x30c>)
 8004136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800413a:	4a0c      	ldr	r2, [pc, #48]	; (800416c <RadioSetRxConfig+0x30c>)
 800413c:	7bbb      	ldrb	r3, [r7, #14]
 800413e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d105      	bne.n	8004154 <RadioSetRxConfig+0x2f4>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b0b      	cmp	r3, #11
 800414c:	d008      	beq.n	8004160 <RadioSetRxConfig+0x300>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d005      	beq.n	8004160 <RadioSetRxConfig+0x300>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d116      	bne.n	8004188 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b0c      	cmp	r3, #12
 800415e:	d113      	bne.n	8004188 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8004160:	4b02      	ldr	r3, [pc, #8]	; (800416c <RadioSetRxConfig+0x30c>)
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004168:	e012      	b.n	8004190 <RadioSetRxConfig+0x330>
 800416a:	bf00      	nop
 800416c:	20000300 	.word	0x20000300
 8004170:	20000009 	.word	0x20000009
 8004174:	20000338 	.word	0x20000338
 8004178:	2000030e 	.word	0x2000030e
 800417c:	08008590 	.word	0x08008590
 8004180:	08008598 	.word	0x08008598
 8004184:	0800873c 	.word	0x0800873c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8004188:	4b39      	ldr	r3, [pc, #228]	; (8004270 <RadioSetRxConfig+0x410>)
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8004190:	4b37      	ldr	r3, [pc, #220]	; (8004270 <RadioSetRxConfig+0x410>)
 8004192:	2201      	movs	r2, #1
 8004194:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8004196:	4b36      	ldr	r3, [pc, #216]	; (8004270 <RadioSetRxConfig+0x410>)
 8004198:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800419c:	2b05      	cmp	r3, #5
 800419e:	d004      	beq.n	80041aa <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80041a0:	4b33      	ldr	r3, [pc, #204]	; (8004270 <RadioSetRxConfig+0x410>)
 80041a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d10a      	bne.n	80041c0 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 80041aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041ac:	2b0b      	cmp	r3, #11
 80041ae:	d803      	bhi.n	80041b8 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80041b0:	4b2f      	ldr	r3, [pc, #188]	; (8004270 <RadioSetRxConfig+0x410>)
 80041b2:	220c      	movs	r2, #12
 80041b4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80041b6:	e006      	b.n	80041c6 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80041b8:	4a2d      	ldr	r2, [pc, #180]	; (8004270 <RadioSetRxConfig+0x410>)
 80041ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041bc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80041be:	e002      	b.n	80041c6 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80041c0:	4a2b      	ldr	r2, [pc, #172]	; (8004270 <RadioSetRxConfig+0x410>)
 80041c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041c4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80041c6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80041ca:	4b29      	ldr	r3, [pc, #164]	; (8004270 <RadioSetRxConfig+0x410>)
 80041cc:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80041ce:	4b29      	ldr	r3, [pc, #164]	; (8004274 <RadioSetRxConfig+0x414>)
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	4b27      	ldr	r3, [pc, #156]	; (8004270 <RadioSetRxConfig+0x410>)
 80041d4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80041d6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80041da:	4b25      	ldr	r3, [pc, #148]	; (8004270 <RadioSetRxConfig+0x410>)
 80041dc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80041e0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80041e4:	4b22      	ldr	r3, [pc, #136]	; (8004270 <RadioSetRxConfig+0x410>)
 80041e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80041ea:	f000 fbd0 	bl	800498e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <RadioSetRxConfig+0x410>)
 80041f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	2300      	moveq	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fd60 	bl	8003cc4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8004204:	481c      	ldr	r0, [pc, #112]	; (8004278 <RadioSetRxConfig+0x418>)
 8004206:	f002 f803 	bl	8006210 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800420a:	481c      	ldr	r0, [pc, #112]	; (800427c <RadioSetRxConfig+0x41c>)
 800420c:	f002 f8cc 	bl	80063a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8004210:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004212:	b2db      	uxtb	r3, r3
 8004214:	4618      	mov	r0, r3
 8004216:	f001 fddc 	bl	8005dd2 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <RadioSetRxConfig+0x410>)
 800421c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004220:	2b01      	cmp	r3, #1
 8004222:	d10d      	bne.n	8004240 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8004224:	f240 7036 	movw	r0, #1846	; 0x736
 8004228:	f002 fa1a 	bl	8006660 <SUBGRF_ReadRegister>
 800422c:	4603      	mov	r3, r0
 800422e:	f023 0304 	bic.w	r3, r3, #4
 8004232:	b2db      	uxtb	r3, r3
 8004234:	4619      	mov	r1, r3
 8004236:	f240 7036 	movw	r0, #1846	; 0x736
 800423a:	f002 f9fd 	bl	8006638 <SUBGRF_WriteRegister>
 800423e:	e00c      	b.n	800425a <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8004240:	f240 7036 	movw	r0, #1846	; 0x736
 8004244:	f002 fa0c 	bl	8006660 <SUBGRF_ReadRegister>
 8004248:	4603      	mov	r3, r0
 800424a:	f043 0304 	orr.w	r3, r3, #4
 800424e:	b2db      	uxtb	r3, r3
 8004250:	4619      	mov	r1, r3
 8004252:	f240 7036 	movw	r0, #1846	; 0x736
 8004256:	f002 f9ef 	bl	8006638 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <RadioSetRxConfig+0x410>)
 800425c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004260:	609a      	str	r2, [r3, #8]
            break;
 8004262:	e000      	b.n	8004266 <RadioSetRxConfig+0x406>
            break;
 8004264:	bf00      	nop
    }
}
 8004266:	bf00      	nop
 8004268:	3728      	adds	r7, #40	; 0x28
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000300 	.word	0x20000300
 8004274:	20000009 	.word	0x20000009
 8004278:	20000338 	.word	0x20000338
 800427c:	2000030e 	.word	0x2000030e

08004280 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60ba      	str	r2, [r7, #8]
 8004288:	607b      	str	r3, [r7, #4]
 800428a:	4603      	mov	r3, r0
 800428c:	73fb      	strb	r3, [r7, #15]
 800428e:	460b      	mov	r3, r1
 8004290:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8004292:	f002 fc18 	bl	8006ac6 <RFW_DeInit>
    switch( modem )
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2b03      	cmp	r3, #3
 800429a:	f000 80d7 	beq.w	800444c <RadioSetTxConfig+0x1cc>
 800429e:	2b03      	cmp	r3, #3
 80042a0:	f300 80e6 	bgt.w	8004470 <RadioSetTxConfig+0x1f0>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <RadioSetTxConfig+0x2e>
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d061      	beq.n	8004370 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 80042ac:	e0e0      	b.n	8004470 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80042ae:	4b7c      	ldr	r3, [pc, #496]	; (80044a0 <RadioSetTxConfig+0x220>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80042b6:	4a7a      	ldr	r2, [pc, #488]	; (80044a0 <RadioSetTxConfig+0x220>)
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80042bc:	4b78      	ldr	r3, [pc, #480]	; (80044a0 <RadioSetTxConfig+0x220>)
 80042be:	220b      	movs	r2, #11
 80042c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f002 fb2f 	bl	8006928 <SUBGRF_GetFskBandwidthRegValue>
 80042ca:	4603      	mov	r3, r0
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b74      	ldr	r3, [pc, #464]	; (80044a0 <RadioSetTxConfig+0x220>)
 80042d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80042d4:	4a72      	ldr	r2, [pc, #456]	; (80044a0 <RadioSetTxConfig+0x220>)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80042da:	4b71      	ldr	r3, [pc, #452]	; (80044a0 <RadioSetTxConfig+0x220>)
 80042dc:	2200      	movs	r2, #0
 80042de:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80042e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	4b6e      	ldr	r3, [pc, #440]	; (80044a0 <RadioSetTxConfig+0x220>)
 80042e8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80042ea:	4b6d      	ldr	r3, [pc, #436]	; (80044a0 <RadioSetTxConfig+0x220>)
 80042ec:	2204      	movs	r2, #4
 80042ee:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80042f0:	4b6b      	ldr	r3, [pc, #428]	; (80044a0 <RadioSetTxConfig+0x220>)
 80042f2:	2218      	movs	r2, #24
 80042f4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80042f6:	4b6a      	ldr	r3, [pc, #424]	; (80044a0 <RadioSetTxConfig+0x220>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80042fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004300:	f083 0301 	eor.w	r3, r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	4b65      	ldr	r3, [pc, #404]	; (80044a0 <RadioSetTxConfig+0x220>)
 800430a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800430c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8004314:	4b62      	ldr	r3, [pc, #392]	; (80044a0 <RadioSetTxConfig+0x220>)
 8004316:	22f2      	movs	r2, #242	; 0xf2
 8004318:	75da      	strb	r2, [r3, #23]
 800431a:	e002      	b.n	8004322 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800431c:	4b60      	ldr	r3, [pc, #384]	; (80044a0 <RadioSetTxConfig+0x220>)
 800431e:	2201      	movs	r2, #1
 8004320:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8004322:	4b5f      	ldr	r3, [pc, #380]	; (80044a0 <RadioSetTxConfig+0x220>)
 8004324:	2201      	movs	r2, #1
 8004326:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8004328:	f000 fb31 	bl	800498e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800432c:	4b5c      	ldr	r3, [pc, #368]	; (80044a0 <RadioSetTxConfig+0x220>)
 800432e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fcc1 	bl	8003cc4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8004342:	4858      	ldr	r0, [pc, #352]	; (80044a4 <RadioSetTxConfig+0x224>)
 8004344:	f001 ff64 	bl	8006210 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004348:	4857      	ldr	r0, [pc, #348]	; (80044a8 <RadioSetTxConfig+0x228>)
 800434a:	f002 f82d 	bl	80063a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800434e:	4a57      	ldr	r2, [pc, #348]	; (80044ac <RadioSetTxConfig+0x22c>)
 8004350:	f107 0310 	add.w	r3, r7, #16
 8004354:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004358:	e883 0003 	stmia.w	r3, {r0, r1}
 800435c:	f107 0310 	add.w	r3, r7, #16
 8004360:	4618      	mov	r0, r3
 8004362:	f001 fb60 	bl	8005a26 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8004366:	f240 10ff 	movw	r0, #511	; 0x1ff
 800436a:	f001 fbab 	bl	8005ac4 <SUBGRF_SetWhiteningSeed>
            break;
 800436e:	e080      	b.n	8004472 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8004370:	4b4b      	ldr	r3, [pc, #300]	; (80044a0 <RadioSetTxConfig+0x220>)
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	b2da      	uxtb	r2, r3
 800437c:	4b48      	ldr	r3, [pc, #288]	; (80044a0 <RadioSetTxConfig+0x220>)
 800437e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8004382:	4a4b      	ldr	r2, [pc, #300]	; (80044b0 <RadioSetTxConfig+0x230>)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4413      	add	r3, r2
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	4b45      	ldr	r3, [pc, #276]	; (80044a0 <RadioSetTxConfig+0x220>)
 800438c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8004390:	4a43      	ldr	r2, [pc, #268]	; (80044a0 <RadioSetTxConfig+0x220>)
 8004392:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004396:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d105      	bne.n	80043ac <RadioSetTxConfig+0x12c>
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	2b0b      	cmp	r3, #11
 80043a4:	d008      	beq.n	80043b8 <RadioSetTxConfig+0x138>
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	2b0c      	cmp	r3, #12
 80043aa:	d005      	beq.n	80043b8 <RadioSetTxConfig+0x138>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d107      	bne.n	80043c2 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d104      	bne.n	80043c2 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80043b8:	4b39      	ldr	r3, [pc, #228]	; (80044a0 <RadioSetTxConfig+0x220>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80043c0:	e003      	b.n	80043ca <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80043c2:	4b37      	ldr	r3, [pc, #220]	; (80044a0 <RadioSetTxConfig+0x220>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80043ca:	4b35      	ldr	r3, [pc, #212]	; (80044a0 <RadioSetTxConfig+0x220>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80043d0:	4b33      	ldr	r3, [pc, #204]	; (80044a0 <RadioSetTxConfig+0x220>)
 80043d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	d004      	beq.n	80043e4 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80043da:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <RadioSetTxConfig+0x220>)
 80043dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80043e0:	2b06      	cmp	r3, #6
 80043e2:	d10a      	bne.n	80043fa <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 80043e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043e6:	2b0b      	cmp	r3, #11
 80043e8:	d803      	bhi.n	80043f2 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80043ea:	4b2d      	ldr	r3, [pc, #180]	; (80044a0 <RadioSetTxConfig+0x220>)
 80043ec:	220c      	movs	r2, #12
 80043ee:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80043f0:	e006      	b.n	8004400 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80043f2:	4a2b      	ldr	r2, [pc, #172]	; (80044a0 <RadioSetTxConfig+0x220>)
 80043f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043f6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80043f8:	e002      	b.n	8004400 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80043fa:	4a29      	ldr	r2, [pc, #164]	; (80044a0 <RadioSetTxConfig+0x220>)
 80043fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043fe:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8004400:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004404:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <RadioSetTxConfig+0x220>)
 8004406:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8004408:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <RadioSetTxConfig+0x234>)
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <RadioSetTxConfig+0x220>)
 800440e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8004410:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004414:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <RadioSetTxConfig+0x220>)
 8004416:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800441a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800441e:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <RadioSetTxConfig+0x220>)
 8004420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8004424:	f000 fab3 	bl	800498e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8004428:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <RadioSetTxConfig+0x220>)
 800442a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf14      	ite	ne
 8004432:	2301      	movne	r3, #1
 8004434:	2300      	moveq	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fc43 	bl	8003cc4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800443e:	4819      	ldr	r0, [pc, #100]	; (80044a4 <RadioSetTxConfig+0x224>)
 8004440:	f001 fee6 	bl	8006210 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004444:	4818      	ldr	r0, [pc, #96]	; (80044a8 <RadioSetTxConfig+0x228>)
 8004446:	f001 ffaf 	bl	80063a8 <SUBGRF_SetPacketParams>
            break;
 800444a:	e012      	b.n	8004472 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800444c:	2003      	movs	r0, #3
 800444e:	f7ff fc39 	bl	8003cc4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8004452:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <RadioSetTxConfig+0x220>)
 8004454:	2202      	movs	r2, #2
 8004456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800445a:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <RadioSetTxConfig+0x220>)
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <RadioSetTxConfig+0x220>)
 8004462:	2216      	movs	r2, #22
 8004464:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8004468:	480e      	ldr	r0, [pc, #56]	; (80044a4 <RadioSetTxConfig+0x224>)
 800446a:	f001 fed1 	bl	8006210 <SUBGRF_SetModulationParams>
            break;
 800446e:	e000      	b.n	8004472 <RadioSetTxConfig+0x1f2>
            break;
 8004470:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8004472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004476:	4618      	mov	r0, r3
 8004478:	f002 f9fa 	bl	8006870 <SUBGRF_SetRfTxPower>
 800447c:	4603      	mov	r3, r0
 800447e:	461a      	mov	r2, r3
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <RadioSetTxConfig+0x220>)
 8004482:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <RadioSetTxConfig+0x220>)
 8004488:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800448c:	4618      	mov	r0, r3
 800448e:	f002 fb2e 	bl	8006aee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8004492:	4a03      	ldr	r2, [pc, #12]	; (80044a0 <RadioSetTxConfig+0x220>)
 8004494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004496:	6053      	str	r3, [r2, #4]
}
 8004498:	bf00      	nop
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000300 	.word	0x20000300
 80044a4:	20000338 	.word	0x20000338
 80044a8:	2000030e 	.word	0x2000030e
 80044ac:	08008598 	.word	0x08008598
 80044b0:	0800873c 	.word	0x0800873c
 80044b4:	20000009 	.word	0x20000009

080044b8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    return true;
 80044c0:	2301      	movs	r3, #1
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	2b0a      	cmp	r3, #10
 80044de:	d83e      	bhi.n	800455e <RadioGetLoRaBandwidthInHz+0x92>
 80044e0:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <RadioGetLoRaBandwidthInHz+0x1c>)
 80044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e6:	bf00      	nop
 80044e8:	08004515 	.word	0x08004515
 80044ec:	08004525 	.word	0x08004525
 80044f0:	08004535 	.word	0x08004535
 80044f4:	08004545 	.word	0x08004545
 80044f8:	0800454d 	.word	0x0800454d
 80044fc:	08004553 	.word	0x08004553
 8004500:	08004559 	.word	0x08004559
 8004504:	0800455f 	.word	0x0800455f
 8004508:	0800451d 	.word	0x0800451d
 800450c:	0800452d 	.word	0x0800452d
 8004510:	0800453d 	.word	0x0800453d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8004514:	f641 6384 	movw	r3, #7812	; 0x1e84
 8004518:	60fb      	str	r3, [r7, #12]
        break;
 800451a:	e020      	b.n	800455e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800451c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8004520:	60fb      	str	r3, [r7, #12]
        break;
 8004522:	e01c      	b.n	800455e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8004524:	f643 5309 	movw	r3, #15625	; 0x3d09
 8004528:	60fb      	str	r3, [r7, #12]
        break;
 800452a:	e018      	b.n	800455e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800452c:	f245 1361 	movw	r3, #20833	; 0x5161
 8004530:	60fb      	str	r3, [r7, #12]
        break;
 8004532:	e014      	b.n	800455e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8004534:	f647 2312 	movw	r3, #31250	; 0x7a12
 8004538:	60fb      	str	r3, [r7, #12]
        break;
 800453a:	e010      	b.n	800455e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800453c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8004540:	60fb      	str	r3, [r7, #12]
        break;
 8004542:	e00c      	b.n	800455e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8004544:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004548:	60fb      	str	r3, [r7, #12]
        break;
 800454a:	e008      	b.n	800455e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <RadioGetLoRaBandwidthInHz+0xa0>)
 800454e:	60fb      	str	r3, [r7, #12]
        break;
 8004550:	e005      	b.n	800455e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <RadioGetLoRaBandwidthInHz+0xa4>)
 8004554:	60fb      	str	r3, [r7, #12]
        break;
 8004556:	e002      	b.n	800455e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <RadioGetLoRaBandwidthInHz+0xa8>)
 800455a:	60fb      	str	r3, [r7, #12]
        break;
 800455c:	bf00      	nop
    }

    return bandwidthInHz;
 800455e:	68fb      	ldr	r3, [r7, #12]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	0001e848 	.word	0x0001e848
 8004570:	0003d090 	.word	0x0003d090
 8004574:	0007a120 	.word	0x0007a120

08004578 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	4608      	mov	r0, r1
 8004582:	4611      	mov	r1, r2
 8004584:	461a      	mov	r2, r3
 8004586:	4603      	mov	r3, r0
 8004588:	70fb      	strb	r3, [r7, #3]
 800458a:	460b      	mov	r3, r1
 800458c:	803b      	strh	r3, [r7, #0]
 800458e:	4613      	mov	r3, r2
 8004590:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8004592:	883b      	ldrh	r3, [r7, #0]
 8004594:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8004596:	78ba      	ldrb	r2, [r7, #2]
 8004598:	f082 0201 	eor.w	r2, r2, #1
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	2a00      	cmp	r2, #0
 80045a0:	d001      	beq.n	80045a6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80045a2:	2208      	movs	r2, #8
 80045a4:	e000      	b.n	80045a8 <RadioGetGfskTimeOnAirNumerator+0x30>
 80045a6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80045a8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80045aa:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80045ae:	7c3b      	ldrb	r3, [r7, #16]
 80045b0:	7d39      	ldrb	r1, [r7, #20]
 80045b2:	2900      	cmp	r1, #0
 80045b4:	d001      	beq.n	80045ba <RadioGetGfskTimeOnAirNumerator+0x42>
 80045b6:	2102      	movs	r1, #2
 80045b8:	e000      	b.n	80045bc <RadioGetGfskTimeOnAirNumerator+0x44>
 80045ba:	2100      	movs	r1, #0
 80045bc:	440b      	add	r3, r1
 80045be:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80045c0:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr

080045cc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b08b      	sub	sp, #44	; 0x2c
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	4611      	mov	r1, r2
 80045d8:	461a      	mov	r2, r3
 80045da:	460b      	mov	r3, r1
 80045dc:	71fb      	strb	r3, [r7, #7]
 80045de:	4613      	mov	r3, r2
 80045e0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	3304      	adds	r3, #4
 80045e6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b05      	cmp	r3, #5
 80045f2:	d002      	beq.n	80045fa <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b06      	cmp	r3, #6
 80045f8:	d104      	bne.n	8004604 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80045fa:	88bb      	ldrh	r3, [r7, #4]
 80045fc:	2b0b      	cmp	r3, #11
 80045fe:	d801      	bhi.n	8004604 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8004600:	230c      	movs	r3, #12
 8004602:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d105      	bne.n	8004616 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b0b      	cmp	r3, #11
 800460e:	d008      	beq.n	8004622 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b0c      	cmp	r3, #12
 8004614:	d005      	beq.n	8004622 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d105      	bne.n	8004628 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b0c      	cmp	r3, #12
 8004620:	d102      	bne.n	8004628 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004628:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800462c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800462e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004632:	2a00      	cmp	r2, #0
 8004634:	d001      	beq.n	800463a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8004636:	2210      	movs	r2, #16
 8004638:	e000      	b.n	800463c <RadioGetLoRaTimeOnAirNumerator+0x70>
 800463a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800463c:	4413      	add	r3, r2
 800463e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8004644:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8004646:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800464a:	2a00      	cmp	r2, #0
 800464c:	d001      	beq.n	8004652 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800464e:	2200      	movs	r2, #0
 8004650:	e000      	b.n	8004654 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8004652:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8004654:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004656:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b06      	cmp	r3, #6
 800465c:	d803      	bhi.n	8004666 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	623b      	str	r3, [r7, #32]
 8004664:	e00e      	b.n	8004684 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3308      	adds	r3, #8
 800466a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800466c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	3b02      	subs	r3, #2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	623b      	str	r3, [r7, #32]
 800467c:	e002      	b.n	8004684 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	da01      	bge.n	800468e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	4413      	add	r3, r2
 8004694:	1e5a      	subs	r2, r3, #1
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	fb92 f3f3 	sdiv	r3, r2, r3
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	fb02 f203 	mul.w	r2, r2, r3
 80046a2:	88bb      	ldrh	r3, [r7, #4]
 80046a4:	4413      	add	r3, r2
    int32_t intermediate =
 80046a6:	330c      	adds	r3, #12
 80046a8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b06      	cmp	r3, #6
 80046ae:	d802      	bhi.n	80046b6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	3302      	adds	r3, #2
 80046b4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	3b02      	subs	r3, #2
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	372c      	adds	r7, #44	; 0x2c
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr
	...

080046d0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af04      	add	r7, sp, #16
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
 80046da:	461a      	mov	r2, r3
 80046dc:	4603      	mov	r3, r0
 80046de:	73fb      	strb	r3, [r7, #15]
 80046e0:	4613      	mov	r3, r2
 80046e2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80046e8:	2301      	movs	r3, #1
 80046ea:	613b      	str	r3, [r7, #16]

    switch( modem )
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <RadioTimeOnAir+0x28>
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d017      	beq.n	8004726 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80046f6:	e035      	b.n	8004764 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80046f8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80046fc:	8c3a      	ldrh	r2, [r7, #32]
 80046fe:	7bb9      	ldrb	r1, [r7, #14]
 8004700:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	4603      	mov	r3, r0
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ff32 	bl	8004578 <RadioGetGfskTimeOnAirNumerator>
 8004714:	4603      	mov	r3, r0
 8004716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	613b      	str	r3, [r7, #16]
        break;
 8004724:	e01e      	b.n	8004764 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8004726:	8c39      	ldrh	r1, [r7, #32]
 8004728:	7bba      	ldrb	r2, [r7, #14]
 800472a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800472e:	9302      	str	r3, [sp, #8]
 8004730:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	460b      	mov	r3, r1
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	68b8      	ldr	r0, [r7, #8]
 8004742:	f7ff ff43 	bl	80045cc <RadioGetLoRaTimeOnAirNumerator>
 8004746:	4603      	mov	r3, r0
 8004748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8004752:	4a0a      	ldr	r2, [pc, #40]	; (800477c <RadioTimeOnAir+0xac>)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4413      	add	r3, r2
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff feb6 	bl	80044cc <RadioGetLoRaBandwidthInHz>
 8004760:	6138      	str	r0, [r7, #16]
        break;
 8004762:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4413      	add	r3, r2
 800476a:	1e5a      	subs	r2, r3, #1
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	0800873c 	.word	0x0800873c

08004780 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800478c:	2300      	movs	r3, #0
 800478e:	2200      	movs	r2, #0
 8004790:	f240 2101 	movw	r1, #513	; 0x201
 8004794:	f240 2001 	movw	r0, #513	; 0x201
 8004798:	f001 fc10 	bl	8005fbc <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800479c:	4b6e      	ldr	r3, [pc, #440]	; (8004958 <RadioSend+0x1d8>)
 800479e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80047a2:	2101      	movs	r1, #1
 80047a4:	4618      	mov	r0, r3
 80047a6:	f002 f83b 	bl	8006820 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 80047aa:	4b6b      	ldr	r3, [pc, #428]	; (8004958 <RadioSend+0x1d8>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d112      	bne.n	80047d8 <RadioSend+0x58>
 80047b2:	4b69      	ldr	r3, [pc, #420]	; (8004958 <RadioSend+0x1d8>)
 80047b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047b8:	2b06      	cmp	r3, #6
 80047ba:	d10d      	bne.n	80047d8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80047bc:	f640 0089 	movw	r0, #2185	; 0x889
 80047c0:	f001 ff4e 	bl	8006660 <SUBGRF_ReadRegister>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f023 0304 	bic.w	r3, r3, #4
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	4619      	mov	r1, r3
 80047ce:	f640 0089 	movw	r0, #2185	; 0x889
 80047d2:	f001 ff31 	bl	8006638 <SUBGRF_WriteRegister>
 80047d6:	e00c      	b.n	80047f2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80047d8:	f640 0089 	movw	r0, #2185	; 0x889
 80047dc:	f001 ff40 	bl	8006660 <SUBGRF_ReadRegister>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f043 0304 	orr.w	r3, r3, #4
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	4619      	mov	r1, r3
 80047ea:	f640 0089 	movw	r0, #2185	; 0x889
 80047ee:	f001 ff23 	bl	8006638 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 80047f2:	4b59      	ldr	r3, [pc, #356]	; (8004958 <RadioSend+0x1d8>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	f200 809f 	bhi.w	800493a <RadioSend+0x1ba>
 80047fc:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <RadioSend+0x84>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	0800482f 	.word	0x0800482f
 8004808:	08004815 	.word	0x08004815
 800480c:	08004883 	.word	0x08004883
 8004810:	080048a3 	.word	0x080048a3
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8004814:	4a50      	ldr	r2, [pc, #320]	; (8004958 <RadioSend+0x1d8>)
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800481a:	4850      	ldr	r0, [pc, #320]	; (800495c <RadioSend+0x1dc>)
 800481c:	f001 fdc4 	bl	80063a8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	2200      	movs	r2, #0
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f001 f8ea 	bl	8005a00 <SUBGRF_SendPayload>
            break;
 800482c:	e086      	b.n	800493c <RadioSend+0x1bc>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800482e:	f002 f950 	bl	8006ad2 <RFW_Is_Init>
 8004832:	4603      	mov	r3, r0
 8004834:	2b01      	cmp	r3, #1
 8004836:	d117      	bne.n	8004868 <RadioSend+0xe8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8004838:	f107 020d 	add.w	r2, r7, #13
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f002 f95e 	bl	8006b02 <RFW_TransmitInit>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	f040 8081 	bne.w	8004950 <RadioSend+0x1d0>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800484e:	7b7a      	ldrb	r2, [r7, #13]
 8004850:	4b41      	ldr	r3, [pc, #260]	; (8004958 <RadioSend+0x1d8>)
 8004852:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004854:	4841      	ldr	r0, [pc, #260]	; (800495c <RadioSend+0x1dc>)
 8004856:	f001 fda7 	bl	80063a8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800485a:	7b7b      	ldrb	r3, [r7, #13]
 800485c:	2200      	movs	r2, #0
 800485e:	4619      	mov	r1, r3
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f001 f8cd 	bl	8005a00 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8004866:	e069      	b.n	800493c <RadioSend+0x1bc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8004868:	4a3b      	ldr	r2, [pc, #236]	; (8004958 <RadioSend+0x1d8>)
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800486e:	483b      	ldr	r0, [pc, #236]	; (800495c <RadioSend+0x1dc>)
 8004870:	f001 fd9a 	bl	80063a8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	2200      	movs	r2, #0
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f001 f8c0 	bl	8005a00 <SUBGRF_SendPayload>
            break;
 8004880:	e05c      	b.n	800493c <RadioSend+0x1bc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8004882:	4b35      	ldr	r3, [pc, #212]	; (8004958 <RadioSend+0x1d8>)
 8004884:	2202      	movs	r2, #2
 8004886:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8004888:	4a33      	ldr	r2, [pc, #204]	; (8004958 <RadioSend+0x1d8>)
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800488e:	4833      	ldr	r0, [pc, #204]	; (800495c <RadioSend+0x1dc>)
 8004890:	f001 fd8a 	bl	80063a8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	2200      	movs	r2, #0
 8004898:	4619      	mov	r1, r3
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f001 f8b0 	bl	8005a00 <SUBGRF_SendPayload>
            break;
 80048a0:	e04c      	b.n	800493c <RadioSend+0x1bc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	482d      	ldr	r0, [pc, #180]	; (8004960 <RadioSend+0x1e0>)
 80048aa:	f000 fc30 	bl	800510e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80048ae:	4b2a      	ldr	r3, [pc, #168]	; (8004958 <RadioSend+0x1d8>)
 80048b0:	2202      	movs	r2, #2
 80048b2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	3301      	adds	r3, #1
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	4b27      	ldr	r3, [pc, #156]	; (8004958 <RadioSend+0x1d8>)
 80048bc:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80048be:	4827      	ldr	r0, [pc, #156]	; (800495c <RadioSend+0x1dc>)
 80048c0:	f001 fd72 	bl	80063a8 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 80048c4:	2100      	movs	r1, #0
 80048c6:	20f1      	movs	r0, #241	; 0xf1
 80048c8:	f000 f947 	bl	8004b5a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 80048cc:	2100      	movs	r1, #0
 80048ce:	20f0      	movs	r0, #240	; 0xf0
 80048d0:	f000 f943 	bl	8004b5a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80048d4:	4b20      	ldr	r3, [pc, #128]	; (8004958 <RadioSend+0x1d8>)
 80048d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d8:	2b64      	cmp	r3, #100	; 0x64
 80048da:	d108      	bne.n	80048ee <RadioSend+0x16e>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 80048dc:	2170      	movs	r1, #112	; 0x70
 80048de:	20f3      	movs	r0, #243	; 0xf3
 80048e0:	f000 f93b 	bl	8004b5a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 80048e4:	211d      	movs	r1, #29
 80048e6:	20f2      	movs	r0, #242	; 0xf2
 80048e8:	f000 f937 	bl	8004b5a <RadioWrite>
 80048ec:	e007      	b.n	80048fe <RadioSend+0x17e>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80048ee:	21e1      	movs	r1, #225	; 0xe1
 80048f0:	20f3      	movs	r0, #243	; 0xf3
 80048f2:	f000 f932 	bl	8004b5a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 80048f6:	2104      	movs	r1, #4
 80048f8:	20f2      	movs	r0, #242	; 0xf2
 80048fa:	f000 f92e 	bl	8004b5a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	b29b      	uxth	r3, r3
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	b29b      	uxth	r3, r3
 8004906:	3302      	adds	r3, #2
 8004908:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800490a:	89fb      	ldrh	r3, [r7, #14]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	b29b      	uxth	r3, r3
 8004910:	b2db      	uxtb	r3, r3
 8004912:	4619      	mov	r1, r3
 8004914:	20f4      	movs	r0, #244	; 0xf4
 8004916:	f000 f920 	bl	8004b5a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800491a:	89fb      	ldrh	r3, [r7, #14]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	4619      	mov	r1, r3
 8004920:	20f5      	movs	r0, #245	; 0xf5
 8004922:	f000 f91a 	bl	8004b5a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	3301      	adds	r3, #1
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8004930:	4619      	mov	r1, r3
 8004932:	480b      	ldr	r0, [pc, #44]	; (8004960 <RadioSend+0x1e0>)
 8004934:	f001 f864 	bl	8005a00 <SUBGRF_SendPayload>
            break;
 8004938:	e000      	b.n	800493c <RadioSend+0x1bc>
        }
        default:
            break;
 800493a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <RadioSend+0x1d8>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4619      	mov	r1, r3
 8004942:	4808      	ldr	r0, [pc, #32]	; (8004964 <RadioSend+0x1e4>)
 8004944:	f002 fb18 	bl	8006f78 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8004948:	4806      	ldr	r0, [pc, #24]	; (8004964 <RadioSend+0x1e4>)
 800494a:	f002 fa37 	bl	8006dbc <UTIL_TIMER_Start>
 800494e:	e000      	b.n	8004952 <RadioSend+0x1d2>
                return;
 8004950:	bf00      	nop
}
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000300 	.word	0x20000300
 800495c:	2000030e 	.word	0x2000030e
 8004960:	20000094 	.word	0x20000094
 8004964:	20000358 	.word	0x20000358

08004968 <RadioSleep>:

static void RadioSleep( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800496e:	2300      	movs	r3, #0
 8004970:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8004972:	793b      	ldrb	r3, [r7, #4]
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800497a:	7938      	ldrb	r0, [r7, #4]
 800497c:	f001 f91c 	bl	8005bb8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8004980:	2002      	movs	r0, #2
 8004982:	f7fb fe7f 	bl	8000684 <HAL_Delay>
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <RadioStandby>:

static void RadioStandby( void )
{
 800498e:	b580      	push	{r7, lr}
 8004990:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8004992:	2000      	movs	r0, #0
 8004994:	f001 f942 	bl	8005c1c <SUBGRF_SetStandby>
}
 8004998:	bf00      	nop
 800499a:	bd80      	pop	{r7, pc}

0800499c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 80049a4:	f002 f895 	bl	8006ad2 <RFW_Is_Init>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d102      	bne.n	80049b4 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 80049ae:	f002 f8b8 	bl	8006b22 <RFW_ReceiveInit>
 80049b2:	e007      	b.n	80049c4 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80049b4:	2300      	movs	r3, #0
 80049b6:	2200      	movs	r2, #0
 80049b8:	f240 2162 	movw	r1, #610	; 0x262
 80049bc:	f240 2062 	movw	r0, #610	; 0x262
 80049c0:	f001 fafc 	bl	8005fbc <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d006      	beq.n	80049d8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	480f      	ldr	r0, [pc, #60]	; (8004a0c <RadioRx+0x70>)
 80049ce:	f002 fad3 	bl	8006f78 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80049d2:	480e      	ldr	r0, [pc, #56]	; (8004a0c <RadioRx+0x70>)
 80049d4:	f002 f9f2 	bl	8006dbc <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80049d8:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <RadioRx+0x74>)
 80049da:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 ff1d 	bl	8006820 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <RadioRx+0x74>)
 80049e8:	785b      	ldrb	r3, [r3, #1]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d004      	beq.n	80049f8 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80049ee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80049f2:	f001 f94f 	bl	8005c94 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80049f6:	e005      	b.n	8004a04 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80049f8:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <RadioRx+0x74>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	019b      	lsls	r3, r3, #6
 80049fe:	4618      	mov	r0, r3
 8004a00:	f001 f948 	bl	8005c94 <SUBGRF_SetRx>
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000370 	.word	0x20000370
 8004a10:	20000300 	.word	0x20000300

08004a14 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8004a1c:	f002 f859 	bl	8006ad2 <RFW_Is_Init>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d102      	bne.n	8004a2c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8004a26:	f002 f87c 	bl	8006b22 <RFW_ReceiveInit>
 8004a2a:	e007      	b.n	8004a3c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f240 2162 	movw	r1, #610	; 0x262
 8004a34:	f240 2062 	movw	r0, #610	; 0x262
 8004a38:	f001 fac0 	bl	8005fbc <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d006      	beq.n	8004a50 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	480f      	ldr	r0, [pc, #60]	; (8004a84 <RadioRxBoosted+0x70>)
 8004a46:	f002 fa97 	bl	8006f78 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8004a4a:	480e      	ldr	r0, [pc, #56]	; (8004a84 <RadioRxBoosted+0x70>)
 8004a4c:	f002 f9b6 	bl	8006dbc <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8004a50:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <RadioRxBoosted+0x74>)
 8004a52:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f001 fee1 	bl	8006820 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <RadioRxBoosted+0x74>)
 8004a60:	785b      	ldrb	r3, [r3, #1]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8004a66:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004a6a:	f001 f933 	bl	8005cd4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8004a6e:	e005      	b.n	8004a7c <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <RadioRxBoosted+0x74>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	019b      	lsls	r3, r3, #6
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 f92c 	bl	8005cd4 <SUBGRF_SetRxBoosted>
}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000370 	.word	0x20000370
 8004a88:	20000300 	.word	0x20000300

08004a8c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8004a96:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <RadioSetRxDutyCycle+0x28>)
 8004a98:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 febe 	bl	8006820 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8004aa4:	6839      	ldr	r1, [r7, #0]
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f001 f938 	bl	8005d1c <SUBGRF_SetRxDutyCycle>
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000300 	.word	0x20000300

08004ab8 <RadioStartCad>:

static void RadioStartCad( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <RadioStartCad+0x2c>)
 8004abe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f001 feab 	bl	8006820 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8004aca:	2300      	movs	r3, #0
 8004acc:	2200      	movs	r2, #0
 8004ace:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004ad2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8004ad6:	f001 fa71 	bl	8005fbc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8004ada:	f001 f94b 	bl	8005d74 <SUBGRF_SetCad>
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000300 	.word	0x20000300

08004ae8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	70fb      	strb	r3, [r7, #3]
 8004af4:	4613      	mov	r3, r2
 8004af6:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8004af8:	883b      	ldrh	r3, [r7, #0]
 8004afa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f001 fab5 	bl	8006074 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8004b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f001 feae 	bl	8006870 <SUBGRF_SetRfTxPower>
 8004b14:	4603      	mov	r3, r0
 8004b16:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8004b18:	7afb      	ldrb	r3, [r7, #11]
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 fe7f 	bl	8006820 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8004b22:	f001 f935 	bl	8005d90 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	4804      	ldr	r0, [pc, #16]	; (8004b3c <RadioSetTxContinuousWave+0x54>)
 8004b2a:	f002 fa25 	bl	8006f78 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8004b2e:	4803      	ldr	r0, [pc, #12]	; (8004b3c <RadioSetTxContinuousWave+0x54>)
 8004b30:	f002 f944 	bl	8006dbc <UTIL_TIMER_Start>
}
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000358 	.word	0x20000358

08004b40 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8004b4a:	f001 fce2 	bl	8006512 <SUBGRF_GetRssiInst>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	b21b      	sxth	r3, r3
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	4603      	mov	r3, r0
 8004b62:	460a      	mov	r2, r1
 8004b64:	80fb      	strh	r3, [r7, #6]
 8004b66:	4613      	mov	r3, r2
 8004b68:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8004b6a:	797a      	ldrb	r2, [r7, #5]
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 fd61 	bl	8006638 <SUBGRF_WriteRegister>
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	4603      	mov	r3, r0
 8004b86:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 fd68 	bl	8006660 <SUBGRF_ReadRegister>
 8004b90:	4603      	mov	r3, r0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	6039      	str	r1, [r7, #0]
 8004ba4:	80fb      	strh	r3, [r7, #6]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8004baa:	797b      	ldrb	r3, [r7, #5]
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	6839      	ldr	r1, [r7, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f001 fd68 	bl	8006688 <SUBGRF_WriteRegisters>
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	6039      	str	r1, [r7, #0]
 8004bca:	80fb      	strh	r3, [r7, #6]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8004bd0:	797b      	ldrb	r3, [r7, #5]
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	88fb      	ldrh	r3, [r7, #6]
 8004bd6:	6839      	ldr	r1, [r7, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f001 fd77 	bl	80066cc <SUBGRF_ReadRegisters>
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	460a      	mov	r2, r1
 8004bf2:	71fb      	strb	r3, [r7, #7]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d10a      	bne.n	8004c14 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8004bfe:	4a0e      	ldr	r2, [pc, #56]	; (8004c38 <RadioSetMaxPayloadLength+0x50>)
 8004c00:	79bb      	ldrb	r3, [r7, #6]
 8004c02:	7013      	strb	r3, [r2, #0]
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <RadioSetMaxPayloadLength+0x50>)
 8004c06:	781a      	ldrb	r2, [r3, #0]
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <RadioSetMaxPayloadLength+0x54>)
 8004c0a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004c0c:	480c      	ldr	r0, [pc, #48]	; (8004c40 <RadioSetMaxPayloadLength+0x58>)
 8004c0e:	f001 fbcb 	bl	80063a8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8004c12:	e00d      	b.n	8004c30 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <RadioSetMaxPayloadLength+0x54>)
 8004c16:	7d5b      	ldrb	r3, [r3, #21]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d109      	bne.n	8004c30 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8004c1c:	4a06      	ldr	r2, [pc, #24]	; (8004c38 <RadioSetMaxPayloadLength+0x50>)
 8004c1e:	79bb      	ldrb	r3, [r7, #6]
 8004c20:	7013      	strb	r3, [r2, #0]
 8004c22:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <RadioSetMaxPayloadLength+0x50>)
 8004c24:	781a      	ldrb	r2, [r3, #0]
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <RadioSetMaxPayloadLength+0x54>)
 8004c28:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004c2a:	4805      	ldr	r0, [pc, #20]	; (8004c40 <RadioSetMaxPayloadLength+0x58>)
 8004c2c:	f001 fbbc 	bl	80063a8 <SUBGRF_SetPacketParams>
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20000009 	.word	0x20000009
 8004c3c:	20000300 	.word	0x20000300
 8004c40:	2000030e 	.word	0x2000030e

08004c44 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8004c4e:	4a13      	ldr	r2, [pc, #76]	; (8004c9c <RadioSetPublicNetwork+0x58>)
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	7313      	strb	r3, [r2, #12]
 8004c54:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <RadioSetPublicNetwork+0x58>)
 8004c56:	7b1a      	ldrb	r2, [r3, #12]
 8004c58:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <RadioSetPublicNetwork+0x58>)
 8004c5a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	f7ff f831 	bl	8003cc4 <RadioSetModem>
    if( enable == true )
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8004c68:	2134      	movs	r1, #52	; 0x34
 8004c6a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8004c6e:	f001 fce3 	bl	8006638 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8004c72:	2144      	movs	r1, #68	; 0x44
 8004c74:	f240 7041 	movw	r0, #1857	; 0x741
 8004c78:	f001 fcde 	bl	8006638 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8004c7c:	e009      	b.n	8004c92 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8004c7e:	2114      	movs	r1, #20
 8004c80:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8004c84:	f001 fcd8 	bl	8006638 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8004c88:	2124      	movs	r1, #36	; 0x24
 8004c8a:	f240 7041 	movw	r0, #1857	; 0x741
 8004c8e:	f001 fcd3 	bl	8006638 <SUBGRF_WriteRegister>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000300 	.word	0x20000300

08004ca0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8004ca4:	f001 fe18 	bl	80068d8 <SUBGRF_GetRadioWakeUpTime>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	3303      	adds	r3, #3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8004cb8:	f000 f80e 	bl	8004cd8 <RadioOnTxTimeoutProcess>
}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8004ccc:	f000 f818 	bl	8004d00 <RadioOnRxTimeoutProcess>
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004cdc:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <RadioOnTxTimeoutProcess+0x24>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <RadioOnTxTimeoutProcess+0x1e>
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <RadioOnTxTimeoutProcess+0x24>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8004cee:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <RadioOnTxTimeoutProcess+0x24>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4798      	blx	r3
    }
}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000194 	.word	0x20000194

08004d00 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004d04:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <RadioOnRxTimeoutProcess+0x24>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d008      	beq.n	8004d1e <RadioOnRxTimeoutProcess+0x1e>
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <RadioOnRxTimeoutProcess+0x24>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8004d16:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <RadioOnRxTimeoutProcess+0x24>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4798      	blx	r3
    }
}
 8004d1e:	bf00      	nop
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000194 	.word	0x20000194

08004d28 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8004d32:	4a05      	ldr	r2, [pc, #20]	; (8004d48 <RadioOnDioIrq+0x20>)
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8004d3a:	f000 f807 	bl	8004d4c <RadioIrqProcess>
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000300 	.word	0x20000300

08004d4c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8004d4c:	b590      	push	{r4, r7, lr}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8004d5a:	4bb4      	ldr	r3, [pc, #720]	; (800502c <RadioIrqProcess+0x2e0>)
 8004d5c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d64:	f000 810c 	beq.w	8004f80 <RadioIrqProcess+0x234>
 8004d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6c:	f300 8184 	bgt.w	8005078 <RadioIrqProcess+0x32c>
 8004d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d74:	f000 80f0 	beq.w	8004f58 <RadioIrqProcess+0x20c>
 8004d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7c:	f300 817c 	bgt.w	8005078 <RadioIrqProcess+0x32c>
 8004d80:	2b80      	cmp	r3, #128	; 0x80
 8004d82:	f000 80d5 	beq.w	8004f30 <RadioIrqProcess+0x1e4>
 8004d86:	2b80      	cmp	r3, #128	; 0x80
 8004d88:	f300 8176 	bgt.w	8005078 <RadioIrqProcess+0x32c>
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	dc49      	bgt.n	8004e24 <RadioIrqProcess+0xd8>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f340 8171 	ble.w	8005078 <RadioIrqProcess+0x32c>
 8004d96:	3b01      	subs	r3, #1
 8004d98:	2b1f      	cmp	r3, #31
 8004d9a:	f200 816d 	bhi.w	8005078 <RadioIrqProcess+0x32c>
 8004d9e:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <RadioIrqProcess+0x58>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004e2d 	.word	0x08004e2d
 8004da8:	08004e67 	.word	0x08004e67
 8004dac:	08005079 	.word	0x08005079
 8004db0:	08005079 	.word	0x08005079
 8004db4:	08005079 	.word	0x08005079
 8004db8:	08005079 	.word	0x08005079
 8004dbc:	08005079 	.word	0x08005079
 8004dc0:	08004fe5 	.word	0x08004fe5
 8004dc4:	08005079 	.word	0x08005079
 8004dc8:	08005079 	.word	0x08005079
 8004dcc:	08005079 	.word	0x08005079
 8004dd0:	08005079 	.word	0x08005079
 8004dd4:	08005079 	.word	0x08005079
 8004dd8:	08005079 	.word	0x08005079
 8004ddc:	08005079 	.word	0x08005079
 8004de0:	08005079 	.word	0x08005079
 8004de4:	08005079 	.word	0x08005079
 8004de8:	08005079 	.word	0x08005079
 8004dec:	08005079 	.word	0x08005079
 8004df0:	08005079 	.word	0x08005079
 8004df4:	08005079 	.word	0x08005079
 8004df8:	08005079 	.word	0x08005079
 8004dfc:	08005079 	.word	0x08005079
 8004e00:	08005079 	.word	0x08005079
 8004e04:	08005079 	.word	0x08005079
 8004e08:	08005079 	.word	0x08005079
 8004e0c:	08005079 	.word	0x08005079
 8004e10:	08005079 	.word	0x08005079
 8004e14:	08005079 	.word	0x08005079
 8004e18:	08005079 	.word	0x08005079
 8004e1c:	08005079 	.word	0x08005079
 8004e20:	08004ff5 	.word	0x08004ff5
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	f000 810f 	beq.w	8005048 <RadioIrqProcess+0x2fc>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8004e2a:	e125      	b.n	8005078 <RadioIrqProcess+0x32c>
        TimerStop( &TxTimeoutTimer );
 8004e2c:	4880      	ldr	r0, [pc, #512]	; (8005030 <RadioIrqProcess+0x2e4>)
 8004e2e:	f002 f833 	bl	8006e98 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8004e32:	2000      	movs	r0, #0
 8004e34:	f000 fef2 	bl	8005c1c <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8004e38:	f001 fe52 	bl	8006ae0 <RFW_Is_LongPacketModeEnabled>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8004e42:	f001 fe76 	bl	8006b32 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004e46:	4b7b      	ldr	r3, [pc, #492]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8116 	beq.w	800507c <RadioIrqProcess+0x330>
 8004e50:	4b78      	ldr	r3, [pc, #480]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8110 	beq.w	800507c <RadioIrqProcess+0x330>
            RadioEvents->TxDone( );
 8004e5c:	4b75      	ldr	r3, [pc, #468]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4798      	blx	r3
        break;
 8004e64:	e10a      	b.n	800507c <RadioIrqProcess+0x330>
        TimerStop( &RxTimeoutTimer );
 8004e66:	4874      	ldr	r0, [pc, #464]	; (8005038 <RadioIrqProcess+0x2ec>)
 8004e68:	f002 f816 	bl	8006e98 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8004e6c:	4b6f      	ldr	r3, [pc, #444]	; (800502c <RadioIrqProcess+0x2e0>)
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	f083 0301 	eor.w	r3, r3, #1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d014      	beq.n	8004ea4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f000 fece 	bl	8005c1c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8004e80:	2100      	movs	r1, #0
 8004e82:	f640 1002 	movw	r0, #2306	; 0x902
 8004e86:	f001 fbd7 	bl	8006638 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8004e8a:	f640 1044 	movw	r0, #2372	; 0x944
 8004e8e:	f001 fbe7 	bl	8006660 <SUBGRF_ReadRegister>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f043 0302 	orr.w	r3, r3, #2
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f640 1044 	movw	r0, #2372	; 0x944
 8004ea0:	f001 fbca 	bl	8006638 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8004ea4:	1dfb      	adds	r3, r7, #7
 8004ea6:	22ff      	movs	r2, #255	; 0xff
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4864      	ldr	r0, [pc, #400]	; (800503c <RadioIrqProcess+0x2f0>)
 8004eac:	f000 fd86 	bl	80059bc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8004eb0:	4863      	ldr	r0, [pc, #396]	; (8005040 <RadioIrqProcess+0x2f4>)
 8004eb2:	f001 fb6f 	bl	8006594 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004eb6:	4b5f      	ldr	r3, [pc, #380]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d036      	beq.n	8004f2c <RadioIrqProcess+0x1e0>
 8004ebe:	4b5d      	ldr	r3, [pc, #372]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d031      	beq.n	8004f2c <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 8004ec8:	4b58      	ldr	r3, [pc, #352]	; (800502c <RadioIrqProcess+0x2e0>)
 8004eca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d10e      	bne.n	8004ef0 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8004ed2:	4b58      	ldr	r3, [pc, #352]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689c      	ldr	r4, [r3, #8]
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	b299      	uxth	r1, r3
 8004edc:	4b53      	ldr	r3, [pc, #332]	; (800502c <RadioIrqProcess+0x2e0>)
 8004ede:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8004ee2:	b21a      	sxth	r2, r3
 8004ee4:	4b51      	ldr	r3, [pc, #324]	; (800502c <RadioIrqProcess+0x2e0>)
 8004ee6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8004eea:	4854      	ldr	r0, [pc, #336]	; (800503c <RadioIrqProcess+0x2f0>)
 8004eec:	47a0      	blx	r4
                break;
 8004eee:	e01e      	b.n	8004f2e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8004ef0:	4b4e      	ldr	r3, [pc, #312]	; (800502c <RadioIrqProcess+0x2e0>)
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef4:	463a      	mov	r2, r7
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 fd3d 	bl	8006978 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8004efe:	4b4d      	ldr	r3, [pc, #308]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689c      	ldr	r4, [r3, #8]
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	b299      	uxth	r1, r3
 8004f08:	4b48      	ldr	r3, [pc, #288]	; (800502c <RadioIrqProcess+0x2e0>)
 8004f0a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8004f0e:	b218      	sxth	r0, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004f16:	4a4b      	ldr	r2, [pc, #300]	; (8005044 <RadioIrqProcess+0x2f8>)
 8004f18:	fb82 c203 	smull	ip, r2, r2, r3
 8004f1c:	1192      	asrs	r2, r2, #6
 8004f1e:	17db      	asrs	r3, r3, #31
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	b25b      	sxtb	r3, r3
 8004f24:	4602      	mov	r2, r0
 8004f26:	4845      	ldr	r0, [pc, #276]	; (800503c <RadioIrqProcess+0x2f0>)
 8004f28:	47a0      	blx	r4
                break;
 8004f2a:	e000      	b.n	8004f2e <RadioIrqProcess+0x1e2>
        }
 8004f2c:	bf00      	nop
        break;
 8004f2e:	e0b2      	b.n	8005096 <RadioIrqProcess+0x34a>
        SUBGRF_SetStandby( STDBY_RC );
 8004f30:	2000      	movs	r0, #0
 8004f32:	f000 fe73 	bl	8005c1c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004f36:	4b3f      	ldr	r3, [pc, #252]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80a0 	beq.w	8005080 <RadioIrqProcess+0x334>
 8004f40:	4b3c      	ldr	r3, [pc, #240]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 809a 	beq.w	8005080 <RadioIrqProcess+0x334>
            RadioEvents->CadDone( false );
 8004f4c:	4b39      	ldr	r3, [pc, #228]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2000      	movs	r0, #0
 8004f54:	4798      	blx	r3
        break;
 8004f56:	e093      	b.n	8005080 <RadioIrqProcess+0x334>
        SUBGRF_SetStandby( STDBY_RC );
 8004f58:	2000      	movs	r0, #0
 8004f5a:	f000 fe5f 	bl	8005c1c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004f5e:	4b35      	ldr	r3, [pc, #212]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 808e 	beq.w	8005084 <RadioIrqProcess+0x338>
 8004f68:	4b32      	ldr	r3, [pc, #200]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 8088 	beq.w	8005084 <RadioIrqProcess+0x338>
            RadioEvents->CadDone( true );
 8004f74:	4b2f      	ldr	r3, [pc, #188]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	4798      	blx	r3
        break;
 8004f7e:	e081      	b.n	8005084 <RadioIrqProcess+0x338>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8004f80:	f000 fd02 	bl	8005988 <SUBGRF_GetOperatingMode>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d113      	bne.n	8004fb2 <RadioIrqProcess+0x266>
            TimerStop( &TxTimeoutTimer );
 8004f8a:	4829      	ldr	r0, [pc, #164]	; (8005030 <RadioIrqProcess+0x2e4>)
 8004f8c:	f001 ff84 	bl	8006e98 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8004f90:	2000      	movs	r0, #0
 8004f92:	f000 fe43 	bl	8005c1c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004f96:	4b27      	ldr	r3, [pc, #156]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d074      	beq.n	8005088 <RadioIrqProcess+0x33c>
 8004f9e:	4b25      	ldr	r3, [pc, #148]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d06f      	beq.n	8005088 <RadioIrqProcess+0x33c>
                RadioEvents->TxTimeout( );
 8004fa8:	4b22      	ldr	r3, [pc, #136]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4798      	blx	r3
        break;
 8004fb0:	e06a      	b.n	8005088 <RadioIrqProcess+0x33c>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8004fb2:	f000 fce9 	bl	8005988 <SUBGRF_GetOperatingMode>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b05      	cmp	r3, #5
 8004fba:	d165      	bne.n	8005088 <RadioIrqProcess+0x33c>
            TimerStop( &RxTimeoutTimer );
 8004fbc:	481e      	ldr	r0, [pc, #120]	; (8005038 <RadioIrqProcess+0x2ec>)
 8004fbe:	f001 ff6b 	bl	8006e98 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f000 fe2a 	bl	8005c1c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004fc8:	4b1a      	ldr	r3, [pc, #104]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d05b      	beq.n	8005088 <RadioIrqProcess+0x33c>
 8004fd0:	4b18      	ldr	r3, [pc, #96]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d056      	beq.n	8005088 <RadioIrqProcess+0x33c>
                RadioEvents->RxTimeout( );
 8004fda:	4b16      	ldr	r3, [pc, #88]	; (8005034 <RadioIrqProcess+0x2e8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4798      	blx	r3
        break;
 8004fe2:	e051      	b.n	8005088 <RadioIrqProcess+0x33c>
        if ( 1UL == RFW_Is_Init( ) )
 8004fe4:	f001 fd75 	bl	8006ad2 <RFW_Is_Init>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d14e      	bne.n	800508c <RadioIrqProcess+0x340>
            RFW_ReceivePayload( );
 8004fee:	f001 fda6 	bl	8006b3e <RFW_ReceivePayload>
        break;
 8004ff2:	e04b      	b.n	800508c <RadioIrqProcess+0x340>
        TimerStop( &RxTimeoutTimer );
 8004ff4:	4810      	ldr	r0, [pc, #64]	; (8005038 <RadioIrqProcess+0x2ec>)
 8004ff6:	f001 ff4f 	bl	8006e98 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	; (800502c <RadioIrqProcess+0x2e0>)
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	f083 0301 	eor.w	r3, r3, #1
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <RadioIrqProcess+0x2c2>
            SUBGRF_SetStandby( STDBY_RC );
 8005008:	2000      	movs	r0, #0
 800500a:	f000 fe07 	bl	8005c1c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800500e:	4b09      	ldr	r3, [pc, #36]	; (8005034 <RadioIrqProcess+0x2e8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d03c      	beq.n	8005090 <RadioIrqProcess+0x344>
 8005016:	4b07      	ldr	r3, [pc, #28]	; (8005034 <RadioIrqProcess+0x2e8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d037      	beq.n	8005090 <RadioIrqProcess+0x344>
            RadioEvents->RxTimeout( );
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <RadioIrqProcess+0x2e8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	4798      	blx	r3
        break;
 8005028:	e032      	b.n	8005090 <RadioIrqProcess+0x344>
 800502a:	bf00      	nop
 800502c:	20000300 	.word	0x20000300
 8005030:	20000358 	.word	0x20000358
 8005034:	20000194 	.word	0x20000194
 8005038:	20000370 	.word	0x20000370
 800503c:	20000094 	.word	0x20000094
 8005040:	20000324 	.word	0x20000324
 8005044:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 8005048:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <RadioIrqProcess+0x354>)
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	f083 0301 	eor.w	r3, r3, #1
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 8005056:	2000      	movs	r0, #0
 8005058:	f000 fde0 	bl	8005c1c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800505c:	4b11      	ldr	r3, [pc, #68]	; (80050a4 <RadioIrqProcess+0x358>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d017      	beq.n	8005094 <RadioIrqProcess+0x348>
 8005064:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <RadioIrqProcess+0x358>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d012      	beq.n	8005094 <RadioIrqProcess+0x348>
            RadioEvents->RxError( );
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <RadioIrqProcess+0x358>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	4798      	blx	r3
        break;
 8005076:	e00d      	b.n	8005094 <RadioIrqProcess+0x348>
        break;
 8005078:	bf00      	nop
 800507a:	e00c      	b.n	8005096 <RadioIrqProcess+0x34a>
        break;
 800507c:	bf00      	nop
 800507e:	e00a      	b.n	8005096 <RadioIrqProcess+0x34a>
        break;
 8005080:	bf00      	nop
 8005082:	e008      	b.n	8005096 <RadioIrqProcess+0x34a>
        break;
 8005084:	bf00      	nop
 8005086:	e006      	b.n	8005096 <RadioIrqProcess+0x34a>
        break;
 8005088:	bf00      	nop
 800508a:	e004      	b.n	8005096 <RadioIrqProcess+0x34a>
        break;
 800508c:	bf00      	nop
 800508e:	e002      	b.n	8005096 <RadioIrqProcess+0x34a>
        break;
 8005090:	bf00      	nop
 8005092:	e000      	b.n	8005096 <RadioIrqProcess+0x34a>
        break;
 8005094:	bf00      	nop
  }
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	bd90      	pop	{r4, r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000300 	.word	0x20000300
 80050a4:	20000194 	.word	0x20000194

080050a8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <RadioTxPrbs+0x2c>)
 80050ae:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80050b2:	2101      	movs	r1, #1
 80050b4:	4618      	mov	r0, r3
 80050b6:	f001 fbb3 	bl	8006820 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <RadioTxPrbs+0x30>)
 80050bc:	212d      	movs	r1, #45	; 0x2d
 80050be:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80050c2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80050c4:	f000 fe6d 	bl	8005da2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80050c8:	4804      	ldr	r0, [pc, #16]	; (80050dc <RadioTxPrbs+0x34>)
 80050ca:	f000 fdc3 	bl	8005c54 <SUBGRF_SetTx>
}
 80050ce:	bf00      	nop
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000300 	.word	0x20000300
 80050d8:	08004b5b 	.word	0x08004b5b
 80050dc:	000fffff 	.word	0x000fffff

080050e0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	4603      	mov	r3, r0
 80050e8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80050ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f001 fbbe 	bl	8006870 <SUBGRF_SetRfTxPower>
 80050f4:	4603      	mov	r3, r0
 80050f6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	2101      	movs	r1, #1
 80050fc:	4618      	mov	r0, r3
 80050fe:	f001 fb8f 	bl	8006820 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8005102:	f000 fe45 	bl	8005d90 <SUBGRF_SetTxContinuousWave>
}
 8005106:	bf00      	nop
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800510e:	b480      	push	{r7}
 8005110:	b089      	sub	sp, #36	; 0x24
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	4613      	mov	r3, r2
 800511a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8005124:	2300      	movs	r3, #0
 8005126:	61bb      	str	r3, [r7, #24]
 8005128:	e011      	b.n	800514e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	4413      	add	r3, r2
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	440b      	add	r3, r1
 8005138:	43d2      	mvns	r2, r2
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	3301      	adds	r3, #1
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	429a      	cmp	r2, r3
 8005154:	dbe9      	blt.n	800512a <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8005156:	2300      	movs	r3, #0
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	e049      	b.n	80051f0 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	425a      	negs	r2, r3
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	f002 0207 	and.w	r2, r2, #7
 8005168:	bf58      	it	pl
 800516a:	4253      	negpl	r3, r2
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f1c3 0307 	rsb	r3, r3, #7
 8005172:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	da00      	bge.n	800517c <payload_integration+0x6e>
 800517a:	3307      	adds	r3, #7
 800517c:	10db      	asrs	r3, r3, #3
 800517e:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	3301      	adds	r3, #1
 8005184:	425a      	negs	r2, r3
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	f002 0207 	and.w	r2, r2, #7
 800518e:	bf58      	it	pl
 8005190:	4253      	negpl	r3, r2
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f1c3 0307 	rsb	r3, r3, #7
 8005198:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	3301      	adds	r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	da00      	bge.n	80051a4 <payload_integration+0x96>
 80051a2:	3307      	adds	r3, #7
 80051a4:	10db      	asrs	r3, r3, #3
 80051a6:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80051a8:	7dbb      	ldrb	r3, [r7, #22]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	4413      	add	r3, r2
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	461a      	mov	r2, r3
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
 80051b4:	fa42 f303 	asr.w	r3, r2, r3
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80051c0:	7ffa      	ldrb	r2, [r7, #31]
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	4053      	eors	r3, r2
 80051c6:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80051c8:	7d3b      	ldrb	r3, [r7, #20]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	b25a      	sxtb	r2, r3
 80051d2:	7ff9      	ldrb	r1, [r7, #31]
 80051d4:	7d7b      	ldrb	r3, [r7, #21]
 80051d6:	fa01 f303 	lsl.w	r3, r1, r3
 80051da:	b25b      	sxtb	r3, r3
 80051dc:	4313      	orrs	r3, r2
 80051de:	b259      	sxtb	r1, r3
 80051e0:	7d3b      	ldrb	r3, [r7, #20]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	b2ca      	uxtb	r2, r1
 80051e8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	3301      	adds	r3, #1
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	dbb0      	blt.n	800515c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80051fa:	7ffb      	ldrb	r3, [r7, #31]
 80051fc:	01db      	lsls	r3, r3, #7
 80051fe:	b25a      	sxtb	r2, r3
 8005200:	7ffb      	ldrb	r3, [r7, #31]
 8005202:	019b      	lsls	r3, r3, #6
 8005204:	b25b      	sxtb	r3, r3
 8005206:	4313      	orrs	r3, r2
 8005208:	b25b      	sxtb	r3, r3
 800520a:	7ffa      	ldrb	r2, [r7, #31]
 800520c:	2a00      	cmp	r2, #0
 800520e:	d101      	bne.n	8005214 <payload_integration+0x106>
 8005210:	2220      	movs	r2, #32
 8005212:	e000      	b.n	8005216 <payload_integration+0x108>
 8005214:	2200      	movs	r2, #0
 8005216:	4313      	orrs	r3, r2
 8005218:	b259      	sxtb	r1, r3
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	b2ca      	uxtb	r2, r1
 8005222:	701a      	strb	r2, [r3, #0]
}
 8005224:	bf00      	nop
 8005226:	3724      	adds	r7, #36	; 0x24
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr
	...

08005230 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08c      	sub	sp, #48	; 0x30
 8005234:	af00      	add	r7, sp, #0
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	4603      	mov	r3, r0
 800523e:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8005244:	2300      	movs	r3, #0
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	2300      	movs	r3, #0
 800524a:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800524c:	f001 fc3b 	bl	8006ac6 <RFW_DeInit>

    if( rxContinuous != 0 )
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	bf14      	ite	ne
 8005260:	2301      	movne	r3, #1
 8005262:	2300      	moveq	r3, #0
 8005264:	b2da      	uxtb	r2, r3
 8005266:	4ba9      	ldr	r3, [pc, #676]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 8005268:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <RadioSetRxGenericConfig+0x48>
 8005270:	2b01      	cmp	r3, #1
 8005272:	f000 80e8 	beq.w	8005446 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8005276:	e1a0      	b.n	80055ba <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <RadioSetRxGenericConfig+0x58>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <RadioSetRxGenericConfig+0x5e>
            return -1;
 8005288:	f04f 33ff 	mov.w	r3, #4294967295
 800528c:	e196      	b.n	80055bc <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	7d5b      	ldrb	r3, [r3, #21]
 8005292:	2b08      	cmp	r3, #8
 8005294:	d902      	bls.n	800529c <RadioSetRxGenericConfig+0x6c>
            return -1;
 8005296:	f04f 33ff 	mov.w	r3, #4294967295
 800529a:	e18f      	b.n	80055bc <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800529c:	2300      	movs	r3, #0
 800529e:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a0:	e00d      	b.n	80052be <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	4413      	add	r3, r2
 80052aa:	7819      	ldrb	r1, [r3, #0]
 80052ac:	f107 021c 	add.w	r2, r7, #28
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	4413      	add	r3, r2
 80052b4:	460a      	mov	r2, r1
 80052b6:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	3301      	adds	r3, #1
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	7d5b      	ldrb	r3, [r3, #21]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	4293      	cmp	r3, r2
 80052c8:	dbeb      	blt.n	80052a2 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bf14      	ite	ne
 80052d2:	2301      	movne	r3, #1
 80052d4:	2300      	moveq	r3, #0
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fd6b 	bl	8005db4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80052de:	4b8b      	ldr	r3, [pc, #556]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4a88      	ldr	r2, [pc, #544]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80052ec:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	791a      	ldrb	r2, [r3, #4]
 80052f2:	4b86      	ldr	r3, [pc, #536]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80052f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 fb13 	bl	8006928 <SUBGRF_GetFskBandwidthRegValue>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	4b81      	ldr	r3, [pc, #516]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800530c:	4b7f      	ldr	r3, [pc, #508]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 800530e:	2200      	movs	r2, #0
 8005310:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	b29b      	uxth	r3, r3
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	b29a      	uxth	r2, r3
 800531c:	4b7b      	ldr	r3, [pc, #492]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 800531e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	7d1a      	ldrb	r2, [r3, #20]
 8005324:	4b79      	ldr	r3, [pc, #484]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 8005326:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	7d5b      	ldrb	r3, [r3, #21]
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	b2da      	uxtb	r2, r3
 8005330:	4b76      	ldr	r3, [pc, #472]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 8005332:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800533a:	4b74      	ldr	r3, [pc, #464]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 800533c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005344:	2b00      	cmp	r3, #0
 8005346:	d105      	bne.n	8005354 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	4b6f      	ldr	r3, [pc, #444]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 8005350:	759a      	strb	r2, [r3, #22]
 8005352:	e00b      	b.n	800536c <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800535a:	2b02      	cmp	r3, #2
 800535c:	d103      	bne.n	8005366 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800535e:	4b6b      	ldr	r3, [pc, #428]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 8005360:	22ff      	movs	r2, #255	; 0xff
 8005362:	759a      	strb	r2, [r3, #22]
 8005364:	e002      	b.n	800536c <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8005366:	4b69      	ldr	r3, [pc, #420]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 8005368:	22ff      	movs	r2, #255	; 0xff
 800536a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005372:	2b02      	cmp	r3, #2
 8005374:	d004      	beq.n	8005380 <RadioSetRxGenericConfig+0x150>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800537c:	2b02      	cmp	r3, #2
 800537e:	d12d      	bne.n	80053dc <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005386:	2bf1      	cmp	r3, #241	; 0xf1
 8005388:	d00c      	beq.n	80053a4 <RadioSetRxGenericConfig+0x174>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005390:	2bf2      	cmp	r3, #242	; 0xf2
 8005392:	d007      	beq.n	80053a4 <RadioSetRxGenericConfig+0x174>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800539a:	2b01      	cmp	r3, #1
 800539c:	d002      	beq.n	80053a4 <RadioSetRxGenericConfig+0x174>
            return -1;
 800539e:	f04f 33ff 	mov.w	r3, #4294967295
 80053a2:	e10b      	b.n	80055bc <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 80053a4:	2300      	movs	r3, #0
 80053a6:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80053ac:	4b58      	ldr	r3, [pc, #352]	; (8005510 <RadioSetRxGenericConfig+0x2e0>)
 80053ae:	6819      	ldr	r1, [r3, #0]
 80053b0:	f107 0310 	add.w	r3, r7, #16
 80053b4:	4a57      	ldr	r2, [pc, #348]	; (8005514 <RadioSetRxGenericConfig+0x2e4>)
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 fb78 	bl	8006aac <RFW_Init>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <RadioSetRxGenericConfig+0x198>
            return -1;
 80053c2:	f04f 33ff 	mov.w	r3, #4294967295
 80053c6:	e0f9      	b.n	80055bc <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80053c8:	4b50      	ldr	r3, [pc, #320]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80053ce:	4b4f      	ldr	r3, [pc, #316]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80053d4:	4b4d      	ldr	r3, [pc, #308]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	755a      	strb	r2, [r3, #21]
        {
 80053da:	e00e      	b.n	80053fa <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80053e2:	4b4a      	ldr	r3, [pc, #296]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80053e4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80053ec:	4b47      	ldr	r3, [pc, #284]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80053ee:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80053f6:	4b45      	ldr	r3, [pc, #276]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80053f8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80053fa:	f7ff fac8 	bl	800498e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80053fe:	2000      	movs	r0, #0
 8005400:	f7fe fc60 	bl	8003cc4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005404:	4844      	ldr	r0, [pc, #272]	; (8005518 <RadioSetRxGenericConfig+0x2e8>)
 8005406:	f000 ff03 	bl	8006210 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800540a:	4844      	ldr	r0, [pc, #272]	; (800551c <RadioSetRxGenericConfig+0x2ec>)
 800540c:	f000 ffcc 	bl	80063a8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8005410:	f107 031c 	add.w	r3, r7, #28
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fb06 	bl	8005a26 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	8c1b      	ldrh	r3, [r3, #32]
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fb50 	bl	8005ac4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fb2b 	bl	8005a84 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005434:	fb02 f203 	mul.w	r2, r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	4a32      	ldr	r2, [pc, #200]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 8005442:	6093      	str	r3, [r2, #8]
        break;
 8005444:	e0b9      	b.n	80055ba <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <RadioSetRxGenericConfig+0x224>
            return -1;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295
 8005452:	e0b3      	b.n	80055bc <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800545a:	2b01      	cmp	r3, #1
 800545c:	d104      	bne.n	8005468 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005466:	e002      	b.n	800546e <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8005468:	23ff      	movs	r3, #255	; 0xff
 800546a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005472:	2b00      	cmp	r3, #0
 8005474:	bf14      	ite	ne
 8005476:	2301      	movne	r3, #1
 8005478:	2300      	moveq	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fc99 	bl	8005db4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fca3 	bl	8005dd2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800548c:	4b1f      	ldr	r3, [pc, #124]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800549a:	4b1c      	ldr	r3, [pc, #112]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 800549c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80054a6:	4b19      	ldr	r3, [pc, #100]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80054a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80054b2:	4b16      	ldr	r3, [pc, #88]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80054b4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d010      	beq.n	80054e4 <RadioSetRxGenericConfig+0x2b4>
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	dc2c      	bgt.n	8005520 <RadioSetRxGenericConfig+0x2f0>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <RadioSetRxGenericConfig+0x2a0>
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d005      	beq.n	80054da <RadioSetRxGenericConfig+0x2aa>
            break;
 80054ce:	e027      	b.n	8005520 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80054d0:	4b0e      	ldr	r3, [pc, #56]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80054d8:	e023      	b.n	8005522 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80054da:	4b0c      	ldr	r3, [pc, #48]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80054e2:	e01e      	b.n	8005522 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054ea:	2b0b      	cmp	r3, #11
 80054ec:	d004      	beq.n	80054f8 <RadioSetRxGenericConfig+0x2c8>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	d104      	bne.n	8005502 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80054f8:	4b04      	ldr	r3, [pc, #16]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8005500:	e00f      	b.n	8005522 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005502:	4b02      	ldr	r3, [pc, #8]	; (800550c <RadioSetRxGenericConfig+0x2dc>)
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800550a:	e00a      	b.n	8005522 <RadioSetRxGenericConfig+0x2f2>
 800550c:	20000300 	.word	0x20000300
 8005510:	20000194 	.word	0x20000194
 8005514:	20000370 	.word	0x20000370
 8005518:	20000338 	.word	0x20000338
 800551c:	2000030e 	.word	0x2000030e
            break;
 8005520:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005522:	4b28      	ldr	r3, [pc, #160]	; (80055c4 <RadioSetRxGenericConfig+0x394>)
 8005524:	2201      	movs	r2, #1
 8005526:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <RadioSetRxGenericConfig+0x394>)
 800552e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8005536:	4b23      	ldr	r3, [pc, #140]	; (80055c4 <RadioSetRxGenericConfig+0x394>)
 8005538:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800553a:	4a22      	ldr	r2, [pc, #136]	; (80055c4 <RadioSetRxGenericConfig+0x394>)
 800553c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005540:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005548:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <RadioSetRxGenericConfig+0x394>)
 800554a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8005554:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <RadioSetRxGenericConfig+0x394>)
 8005556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800555a:	f7ff fa18 	bl	800498e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800555e:	2001      	movs	r0, #1
 8005560:	f7fe fbb0 	bl	8003cc4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005564:	4818      	ldr	r0, [pc, #96]	; (80055c8 <RadioSetRxGenericConfig+0x398>)
 8005566:	f000 fe53 	bl	8006210 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800556a:	4818      	ldr	r0, [pc, #96]	; (80055cc <RadioSetRxGenericConfig+0x39c>)
 800556c:	f000 ff1c 	bl	80063a8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8005570:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <RadioSetRxGenericConfig+0x394>)
 8005572:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005576:	2b01      	cmp	r3, #1
 8005578:	d10d      	bne.n	8005596 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800557a:	f240 7036 	movw	r0, #1846	; 0x736
 800557e:	f001 f86f 	bl	8006660 <SUBGRF_ReadRegister>
 8005582:	4603      	mov	r3, r0
 8005584:	f023 0304 	bic.w	r3, r3, #4
 8005588:	b2db      	uxtb	r3, r3
 800558a:	4619      	mov	r1, r3
 800558c:	f240 7036 	movw	r0, #1846	; 0x736
 8005590:	f001 f852 	bl	8006638 <SUBGRF_WriteRegister>
 8005594:	e00c      	b.n	80055b0 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8005596:	f240 7036 	movw	r0, #1846	; 0x736
 800559a:	f001 f861 	bl	8006660 <SUBGRF_ReadRegister>
 800559e:	4603      	mov	r3, r0
 80055a0:	f043 0304 	orr.w	r3, r3, #4
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	4619      	mov	r1, r3
 80055a8:	f240 7036 	movw	r0, #1846	; 0x736
 80055ac:	f001 f844 	bl	8006638 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80055b0:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <RadioSetRxGenericConfig+0x394>)
 80055b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055b6:	609a      	str	r2, [r3, #8]
        break;
 80055b8:	bf00      	nop
    }
    return status;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3730      	adds	r7, #48	; 0x30
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000300 	.word	0x20000300
 80055c8:	20000338 	.word	0x20000338
 80055cc:	2000030e 	.word	0x2000030e

080055d0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	; 0x28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607b      	str	r3, [r7, #4]
 80055da:	4603      	mov	r3, r0
 80055dc:	73fb      	strb	r3, [r7, #15]
 80055de:	4613      	mov	r3, r2
 80055e0:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 80055e2:	2300      	movs	r3, #0
 80055e4:	61fb      	str	r3, [r7, #28]
 80055e6:	2300      	movs	r3, #0
 80055e8:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80055ea:	f001 fa6c 	bl	8006ac6 <RFW_DeInit>
    switch( modem )
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	f000 8144 	beq.w	800587e <RadioSetTxGenericConfig+0x2ae>
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	f300 8160 	bgt.w	80058bc <RadioSetTxGenericConfig+0x2ec>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <RadioSetTxGenericConfig+0x38>
 8005600:	2b01      	cmp	r3, #1
 8005602:	f000 80b7 	beq.w	8005774 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8005606:	e159      	b.n	80058bc <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <RadioSetTxGenericConfig+0x48>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d102      	bne.n	800561e <RadioSetTxGenericConfig+0x4e>
            return -1;
 8005618:	f04f 33ff 	mov.w	r3, #4294967295
 800561c:	e163      	b.n	80058e6 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	7d1b      	ldrb	r3, [r3, #20]
 8005622:	2b08      	cmp	r3, #8
 8005624:	d902      	bls.n	800562c <RadioSetTxGenericConfig+0x5c>
            return -1;
 8005626:	f04f 33ff 	mov.w	r3, #4294967295
 800562a:	e15c      	b.n	80058e6 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800562c:	2300      	movs	r3, #0
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
 8005630:	e00d      	b.n	800564e <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	4413      	add	r3, r2
 800563a:	7819      	ldrb	r1, [r3, #0]
 800563c:	f107 021c 	add.w	r2, r7, #28
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	4413      	add	r3, r2
 8005644:	460a      	mov	r2, r1
 8005646:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	3301      	adds	r3, #1
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	7d1b      	ldrb	r3, [r3, #20]
 8005652:	461a      	mov	r2, r3
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	4293      	cmp	r3, r2
 8005658:	dbeb      	blt.n	8005632 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800565a:	4ba5      	ldr	r3, [pc, #660]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	4aa2      	ldr	r2, [pc, #648]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005668:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	781a      	ldrb	r2, [r3, #0]
 800566e:	4ba0      	ldr	r3, [pc, #640]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	f001 f955 	bl	8006928 <SUBGRF_GetFskBandwidthRegValue>
 800567e:	4603      	mov	r3, r0
 8005680:	461a      	mov	r2, r3
 8005682:	4b9b      	ldr	r3, [pc, #620]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4a98      	ldr	r2, [pc, #608]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 800568e:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005690:	4b97      	ldr	r3, [pc, #604]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005692:	2200      	movs	r2, #0
 8005694:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	b29b      	uxth	r3, r3
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	b29a      	uxth	r2, r3
 80056a0:	4b93      	ldr	r3, [pc, #588]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80056a2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80056a4:	4b92      	ldr	r3, [pc, #584]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80056a6:	2204      	movs	r2, #4
 80056a8:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	7d1b      	ldrb	r3, [r3, #20]
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	4b8f      	ldr	r3, [pc, #572]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80056b4:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80056b6:	4b8e      	ldr	r3, [pc, #568]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d003      	beq.n	80056ce <RadioSetTxGenericConfig+0xfe>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	7f9b      	ldrb	r3, [r3, #30]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d12a      	bne.n	8005724 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	7fdb      	ldrb	r3, [r3, #31]
 80056d2:	2bf1      	cmp	r3, #241	; 0xf1
 80056d4:	d00a      	beq.n	80056ec <RadioSetTxGenericConfig+0x11c>
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	7fdb      	ldrb	r3, [r3, #31]
 80056da:	2bf2      	cmp	r3, #242	; 0xf2
 80056dc:	d006      	beq.n	80056ec <RadioSetTxGenericConfig+0x11c>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	7fdb      	ldrb	r3, [r3, #31]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d002      	beq.n	80056ec <RadioSetTxGenericConfig+0x11c>
                return -1;
 80056e6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ea:	e0fc      	b.n	80058e6 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 80056ec:	2301      	movs	r3, #1
 80056ee:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80056f4:	4b7f      	ldr	r3, [pc, #508]	; (80058f4 <RadioSetTxGenericConfig+0x324>)
 80056f6:	6819      	ldr	r1, [r3, #0]
 80056f8:	f107 0310 	add.w	r3, r7, #16
 80056fc:	4a7e      	ldr	r2, [pc, #504]	; (80058f8 <RadioSetTxGenericConfig+0x328>)
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 f9d4 	bl	8006aac <RFW_Init>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <RadioSetTxGenericConfig+0x140>
              return -1;
 800570a:	f04f 33ff 	mov.w	r3, #4294967295
 800570e:	e0ea      	b.n	80058e6 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8005710:	4b77      	ldr	r3, [pc, #476]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005712:	2200      	movs	r2, #0
 8005714:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8005716:	4b76      	ldr	r3, [pc, #472]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005718:	2201      	movs	r2, #1
 800571a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800571c:	4b74      	ldr	r3, [pc, #464]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 800571e:	2200      	movs	r2, #0
 8005720:	755a      	strb	r2, [r3, #21]
        {
 8005722:	e00c      	b.n	800573e <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	7fda      	ldrb	r2, [r3, #31]
 8005728:	4b71      	ldr	r3, [pc, #452]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 800572a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005732:	4b6f      	ldr	r3, [pc, #444]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005734:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	7f9a      	ldrb	r2, [r3, #30]
 800573a:	4b6d      	ldr	r3, [pc, #436]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 800573c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800573e:	f7ff f926 	bl	800498e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8005742:	2000      	movs	r0, #0
 8005744:	f7fe fabe 	bl	8003cc4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005748:	486c      	ldr	r0, [pc, #432]	; (80058fc <RadioSetTxGenericConfig+0x32c>)
 800574a:	f000 fd61 	bl	8006210 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800574e:	486c      	ldr	r0, [pc, #432]	; (8005900 <RadioSetTxGenericConfig+0x330>)
 8005750:	f000 fe2a 	bl	80063a8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8005754:	f107 031c 	add.w	r3, r7, #28
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f964 	bl	8005a26 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	8b9b      	ldrh	r3, [r3, #28]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f9ae 	bl	8005ac4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	8c1b      	ldrh	r3, [r3, #32]
 800576c:	4618      	mov	r0, r3
 800576e:	f000 f989 	bl	8005a84 <SUBGRF_SetCrcPolynomial>
        break;
 8005772:	e0a4      	b.n	80058be <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005774:	4b5e      	ldr	r3, [pc, #376]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005782:	4b5b      	ldr	r3, [pc, #364]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800578e:	4b58      	ldr	r3, [pc, #352]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800579a:	4b55      	ldr	r3, [pc, #340]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 800579c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d010      	beq.n	80057cc <RadioSetTxGenericConfig+0x1fc>
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	dc22      	bgt.n	80057f4 <RadioSetTxGenericConfig+0x224>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <RadioSetTxGenericConfig+0x1e8>
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d005      	beq.n	80057c2 <RadioSetTxGenericConfig+0x1f2>
            break;
 80057b6:	e01d      	b.n	80057f4 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80057b8:	4b4d      	ldr	r3, [pc, #308]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80057c0:	e019      	b.n	80057f6 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80057c2:	4b4b      	ldr	r3, [pc, #300]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80057ca:	e014      	b.n	80057f6 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057d2:	2b0b      	cmp	r3, #11
 80057d4:	d004      	beq.n	80057e0 <RadioSetTxGenericConfig+0x210>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	d104      	bne.n	80057ea <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80057e0:	4b43      	ldr	r3, [pc, #268]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80057e8:	e005      	b.n	80057f6 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80057ea:	4b41      	ldr	r3, [pc, #260]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80057f2:	e000      	b.n	80057f6 <RadioSetTxGenericConfig+0x226>
            break;
 80057f4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80057f6:	4b3e      	ldr	r3, [pc, #248]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005800:	4b3b      	ldr	r3, [pc, #236]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005802:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800580a:	4b39      	ldr	r3, [pc, #228]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 800580c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005814:	4b36      	ldr	r3, [pc, #216]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005816:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005820:	4b33      	ldr	r3, [pc, #204]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 8005822:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8005826:	f7ff f8b2 	bl	800498e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800582a:	2001      	movs	r0, #1
 800582c:	f7fe fa4a 	bl	8003cc4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005830:	4832      	ldr	r0, [pc, #200]	; (80058fc <RadioSetTxGenericConfig+0x32c>)
 8005832:	f000 fced 	bl	8006210 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005836:	4832      	ldr	r0, [pc, #200]	; (8005900 <RadioSetTxGenericConfig+0x330>)
 8005838:	f000 fdb6 	bl	80063a8 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800583c:	4b2c      	ldr	r3, [pc, #176]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 800583e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005842:	2b06      	cmp	r3, #6
 8005844:	d10d      	bne.n	8005862 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8005846:	f640 0089 	movw	r0, #2185	; 0x889
 800584a:	f000 ff09 	bl	8006660 <SUBGRF_ReadRegister>
 800584e:	4603      	mov	r3, r0
 8005850:	f023 0304 	bic.w	r3, r3, #4
 8005854:	b2db      	uxtb	r3, r3
 8005856:	4619      	mov	r1, r3
 8005858:	f640 0089 	movw	r0, #2185	; 0x889
 800585c:	f000 feec 	bl	8006638 <SUBGRF_WriteRegister>
        break;
 8005860:	e02d      	b.n	80058be <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8005862:	f640 0089 	movw	r0, #2185	; 0x889
 8005866:	f000 fefb 	bl	8006660 <SUBGRF_ReadRegister>
 800586a:	4603      	mov	r3, r0
 800586c:	f043 0304 	orr.w	r3, r3, #4
 8005870:	b2db      	uxtb	r3, r3
 8005872:	4619      	mov	r1, r3
 8005874:	f640 0089 	movw	r0, #2185	; 0x889
 8005878:	f000 fede 	bl	8006638 <SUBGRF_WriteRegister>
        break;
 800587c:	e01f      	b.n	80058be <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <RadioSetTxGenericConfig+0x2c0>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800588e:	d902      	bls.n	8005896 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8005890:	f04f 33ff 	mov.w	r3, #4294967295
 8005894:	e027      	b.n	80058e6 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8005896:	2002      	movs	r0, #2
 8005898:	f7fe fa14 	bl	8003cc4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800589c:	4b14      	ldr	r3, [pc, #80]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a8:	4a11      	ldr	r2, [pc, #68]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80058aa:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80058ac:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80058ae:	2216      	movs	r2, #22
 80058b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80058b4:	4811      	ldr	r0, [pc, #68]	; (80058fc <RadioSetTxGenericConfig+0x32c>)
 80058b6:	f000 fcab 	bl	8006210 <SUBGRF_SetModulationParams>
        break;
 80058ba:	e000      	b.n	80058be <RadioSetTxGenericConfig+0x2ee>
        break;
 80058bc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80058be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 ffd4 	bl	8006870 <SUBGRF_SetRfTxPower>
 80058c8:	4603      	mov	r3, r0
 80058ca:	461a      	mov	r2, r3
 80058cc:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80058ce:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80058d2:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80058d4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80058d8:	4618      	mov	r0, r3
 80058da:	f001 f908 	bl	8006aee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80058de:	4a04      	ldr	r2, [pc, #16]	; (80058f0 <RadioSetTxGenericConfig+0x320>)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6053      	str	r3, [r2, #4]
    return 0;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3728      	adds	r7, #40	; 0x28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000300 	.word	0x20000300
 80058f4:	20000194 	.word	0x20000194
 80058f8:	20000358 	.word	0x20000358
 80058fc:	20000338 	.word	0x20000338
 8005900:	2000030e 	.word	0x2000030e

08005904 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8005912:	4a1a      	ldr	r2, [pc, #104]	; (800597c <SUBGRF_Init+0x78>)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8005918:	f7fa fe8a 	bl	8000630 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800591c:	2002      	movs	r0, #2
 800591e:	f000 ffe2 	bl	80068e6 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8005922:	4b17      	ldr	r3, [pc, #92]	; (8005980 <SUBGRF_Init+0x7c>)
 8005924:	2200      	movs	r2, #0
 8005926:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8005928:	2000      	movs	r0, #0
 800592a:	f000 f977 	bl	8005c1c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800592e:	f001 f9de 	bl	8006cee <RBI_IsTCXO>
 8005932:	4603      	mov	r3, r0
 8005934:	2b01      	cmp	r3, #1
 8005936:	d10e      	bne.n	8005956 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8005938:	2140      	movs	r1, #64	; 0x40
 800593a:	2001      	movs	r0, #1
 800593c:	f000 fb78 	bl	8006030 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8005940:	2100      	movs	r1, #0
 8005942:	f640 1011 	movw	r0, #2321	; 0x911
 8005946:	f000 fe77 	bl	8006638 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800594a:	237f      	movs	r3, #127	; 0x7f
 800594c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800594e:	7b38      	ldrb	r0, [r7, #12]
 8005950:	f000 fa85 	bl	8005e5e <SUBGRF_Calibrate>
 8005954:	e009      	b.n	800596a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8005956:	2120      	movs	r1, #32
 8005958:	f640 1011 	movw	r0, #2321	; 0x911
 800595c:	f000 fe6c 	bl	8006638 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8005960:	2120      	movs	r1, #32
 8005962:	f640 1012 	movw	r0, #2322	; 0x912
 8005966:	f000 fe67 	bl	8006638 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800596a:	f001 f99d 	bl	8006ca8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800596e:	4b05      	ldr	r3, [pc, #20]	; (8005984 <SUBGRF_Init+0x80>)
 8005970:	2201      	movs	r2, #1
 8005972:	701a      	strb	r2, [r3, #0]
}
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	200001a4 	.word	0x200001a4
 8005980:	200001a0 	.word	0x200001a0
 8005984:	20000198 	.word	0x20000198

08005988 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800598c:	4b02      	ldr	r3, [pc, #8]	; (8005998 <SUBGRF_GetOperatingMode+0x10>)
 800598e:	781b      	ldrb	r3, [r3, #0]
}
 8005990:	4618      	mov	r0, r3
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr
 8005998:	20000198 	.word	0x20000198

0800599c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	461a      	mov	r2, r3
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	2000      	movs	r0, #0
 80059b0:	f000 feae 	bl	8006710 <SUBGRF_WriteBuffer>
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	4613      	mov	r3, r2
 80059c8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80059ce:	f107 0317 	add.w	r3, r7, #23
 80059d2:	4619      	mov	r1, r3
 80059d4:	68b8      	ldr	r0, [r7, #8]
 80059d6:	f000 fdb1 	bl	800653c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	79fa      	ldrb	r2, [r7, #7]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d201      	bcs.n	80059e8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e007      	b.n	80059f8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80059e8:	7df8      	ldrb	r0, [r7, #23]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	68f9      	ldr	r1, [r7, #12]
 80059f2:	f000 feaf 	bl	8006754 <SUBGRF_ReadBuffer>

    return 0;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8005a0e:	7afb      	ldrb	r3, [r7, #11]
 8005a10:	4619      	mov	r1, r3
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff ffc2 	bl	800599c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f91b 	bl	8005c54 <SUBGRF_SetTx>
}
 8005a1e:	bf00      	nop
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8005a2e:	2208      	movs	r2, #8
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8005a36:	f000 fe27 	bl	8006688 <SUBGRF_WriteRegisters>
    return 0;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	0a1b      	lsrs	r3, r3, #8
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8005a5e:	f000 fb67 	bl	8006130 <SUBGRF_GetPacketType>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d108      	bne.n	8005a7a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8005a68:	f107 030c 	add.w	r3, r7, #12
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	4619      	mov	r1, r3
 8005a70:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8005a74:	f000 fe08 	bl	8006688 <SUBGRF_WriteRegisters>
            break;
 8005a78:	e000      	b.n	8005a7c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8005a7a:	bf00      	nop
    }
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	0a1b      	lsrs	r3, r3, #8
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8005a98:	88fb      	ldrh	r3, [r7, #6]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8005a9e:	f000 fb47 	bl	8006130 <SUBGRF_GetPacketType>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d108      	bne.n	8005aba <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8005aa8:	f107 030c 	add.w	r3, r7, #12
 8005aac:	2202      	movs	r2, #2
 8005aae:	4619      	mov	r1, r3
 8005ab0:	f240 60be 	movw	r0, #1726	; 0x6be
 8005ab4:	f000 fde8 	bl	8006688 <SUBGRF_WriteRegisters>
            break;
 8005ab8:	e000      	b.n	8005abc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8005aba:	bf00      	nop
    }
}
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8005ad2:	f000 fb2d 	bl	8006130 <SUBGRF_GetPacketType>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d121      	bne.n	8005b20 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8005adc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8005ae0:	f000 fdbe 	bl	8006660 <SUBGRF_ReadRegister>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	0a1b      	lsrs	r3, r3, #8
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	b25b      	sxtb	r3, r3
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	b25a      	sxtb	r2, r3
 8005afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	b25b      	sxtb	r3, r3
 8005b02:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	4619      	mov	r1, r3
 8005b08:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8005b0c:	f000 fd94 	bl	8006638 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	4619      	mov	r1, r3
 8005b16:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8005b1a:	f000 fd8d 	bl	8006638 <SUBGRF_WriteRegister>
            break;
 8005b1e:	e000      	b.n	8005b22 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8005b20:	bf00      	nop
    }
}
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8005b3c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8005b40:	f000 fd8e 	bl	8006660 <SUBGRF_ReadRegister>
 8005b44:	4603      	mov	r3, r0
 8005b46:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8005b48:	79fb      	ldrb	r3, [r7, #7]
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	4619      	mov	r1, r3
 8005b52:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8005b56:	f000 fd6f 	bl	8006638 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8005b5a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8005b5e:	f000 fd7f 	bl	8006660 <SUBGRF_ReadRegister>
 8005b62:	4603      	mov	r3, r0
 8005b64:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8005b66:	79bb      	ldrb	r3, [r7, #6]
 8005b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	4619      	mov	r1, r3
 8005b70:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8005b74:	f000 fd60 	bl	8006638 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005b78:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005b7c:	f000 f88a 	bl	8005c94 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8005b80:	463b      	mov	r3, r7
 8005b82:	2204      	movs	r2, #4
 8005b84:	4619      	mov	r1, r3
 8005b86:	f640 0019 	movw	r0, #2073	; 0x819
 8005b8a:	f000 fd9f 	bl	80066cc <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8005b8e:	2000      	movs	r0, #0
 8005b90:	f000 f844 	bl	8005c1c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	4619      	mov	r1, r3
 8005b98:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8005b9c:	f000 fd4c 	bl	8006638 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8005ba0:	79bb      	ldrb	r3, [r7, #6]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8005ba8:	f000 fd46 	bl	8006638 <SUBGRF_WriteRegister>

    return number;
 8005bac:	683b      	ldr	r3, [r7, #0]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f001 f87c 	bl	8006cbe <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8005bc6:	2002      	movs	r0, #2
 8005bc8:	f000 fe8d 	bl	80068e6 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8005bcc:	793b      	ldrb	r3, [r7, #4]
 8005bce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8005bd8:	793b      	ldrb	r3, [r7, #4]
 8005bda:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8005be2:	b25b      	sxtb	r3, r3
 8005be4:	4313      	orrs	r3, r2
 8005be6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8005be8:	793b      	ldrb	r3, [r7, #4]
 8005bea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	b25b      	sxtb	r3, r3
 8005bf6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8005bf8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8005bfa:	f107 030f 	add.w	r3, r7, #15
 8005bfe:	2201      	movs	r2, #1
 8005c00:	4619      	mov	r1, r3
 8005c02:	2084      	movs	r0, #132	; 0x84
 8005c04:	f000 fdc8 	bl	8006798 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8005c08:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <SUBGRF_SetSleep+0x60>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000198 	.word	0x20000198

08005c1c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8005c26:	1dfb      	adds	r3, r7, #7
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	2080      	movs	r0, #128	; 0x80
 8005c2e:	f000 fdb3 	bl	8006798 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d103      	bne.n	8005c40 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8005c38:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <SUBGRF_SetStandby+0x34>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8005c3e:	e002      	b.n	8005c46 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8005c40:	4b03      	ldr	r3, [pc, #12]	; (8005c50 <SUBGRF_SetStandby+0x34>)
 8005c42:	2202      	movs	r2, #2
 8005c44:	701a      	strb	r2, [r3, #0]
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000198 	.word	0x20000198

08005c54 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <SUBGRF_SetTx+0x3c>)
 8005c5e:	2204      	movs	r2, #4
 8005c60:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	0c1b      	lsrs	r3, r3, #16
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	0a1b      	lsrs	r3, r3, #8
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8005c78:	f107 030c 	add.w	r3, r7, #12
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	4619      	mov	r1, r3
 8005c80:	2083      	movs	r0, #131	; 0x83
 8005c82:	f000 fd89 	bl	8006798 <SUBGRF_WriteCommand>
}
 8005c86:	bf00      	nop
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000198 	.word	0x20000198

08005c94 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8005c9c:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <SUBGRF_SetRx+0x3c>)
 8005c9e:	2205      	movs	r2, #5
 8005ca0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	0c1b      	lsrs	r3, r3, #16
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	0a1b      	lsrs	r3, r3, #8
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8005cb8:	f107 030c 	add.w	r3, r7, #12
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	2082      	movs	r0, #130	; 0x82
 8005cc2:	f000 fd69 	bl	8006798 <SUBGRF_WriteCommand>
}
 8005cc6:	bf00      	nop
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000198 	.word	0x20000198

08005cd4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8005cdc:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <SUBGRF_SetRxBoosted+0x44>)
 8005cde:	2205      	movs	r2, #5
 8005ce0:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8005ce2:	2197      	movs	r1, #151	; 0x97
 8005ce4:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8005ce8:	f000 fca6 	bl	8006638 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	0c1b      	lsrs	r3, r3, #16
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	0a1b      	lsrs	r3, r3, #8
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8005d02:	f107 030c 	add.w	r3, r7, #12
 8005d06:	2203      	movs	r2, #3
 8005d08:	4619      	mov	r1, r3
 8005d0a:	2082      	movs	r0, #130	; 0x82
 8005d0c:	f000 fd44 	bl	8006798 <SUBGRF_WriteCommand>
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000198 	.word	0x20000198

08005d1c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	0c1b      	lsrs	r3, r3, #16
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	0a1b      	lsrs	r3, r3, #8
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	0c1b      	lsrs	r3, r3, #16
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	2206      	movs	r2, #6
 8005d58:	4619      	mov	r1, r3
 8005d5a:	2094      	movs	r0, #148	; 0x94
 8005d5c:	f000 fd1c 	bl	8006798 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8005d60:	4b03      	ldr	r3, [pc, #12]	; (8005d70 <SUBGRF_SetRxDutyCycle+0x54>)
 8005d62:	2206      	movs	r2, #6
 8005d64:	701a      	strb	r2, [r3, #0]
}
 8005d66:	bf00      	nop
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000198 	.word	0x20000198

08005d74 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	20c5      	movs	r0, #197	; 0xc5
 8005d7e:	f000 fd0b 	bl	8006798 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8005d82:	4b02      	ldr	r3, [pc, #8]	; (8005d8c <SUBGRF_SetCad+0x18>)
 8005d84:	2207      	movs	r2, #7
 8005d86:	701a      	strb	r2, [r3, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20000198 	.word	0x20000198

08005d90 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8005d94:	2200      	movs	r2, #0
 8005d96:	2100      	movs	r1, #0
 8005d98:	20d1      	movs	r0, #209	; 0xd1
 8005d9a:	f000 fcfd 	bl	8006798 <SUBGRF_WriteCommand>
}
 8005d9e:	bf00      	nop
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8005da6:	2200      	movs	r2, #0
 8005da8:	2100      	movs	r1, #0
 8005daa:	20d2      	movs	r0, #210	; 0xd2
 8005dac:	f000 fcf4 	bl	8006798 <SUBGRF_WriteCommand>
}
 8005db0:	bf00      	nop
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8005dbe:	1dfb      	adds	r3, r7, #7
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	209f      	movs	r0, #159	; 0x9f
 8005dc6:	f000 fce7 	bl	8006798 <SUBGRF_WriteCommand>
}
 8005dca:	bf00      	nop
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	4603      	mov	r3, r0
 8005dda:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8005ddc:	1dfb      	adds	r3, r7, #7
 8005dde:	2201      	movs	r2, #1
 8005de0:	4619      	mov	r1, r3
 8005de2:	20a0      	movs	r0, #160	; 0xa0
 8005de4:	f000 fcd8 	bl	8006798 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	2b3f      	cmp	r3, #63	; 0x3f
 8005dec:	d91c      	bls.n	8005e28 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8005dfc:	e005      	b.n	8005e0a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	089b      	lsrs	r3, r3, #2
 8005e02:	73fb      	strb	r3, [r7, #15]
            exp++;
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	3301      	adds	r3, #1
 8005e08:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b1f      	cmp	r3, #31
 8005e0e:	d8f6      	bhi.n	8005dfe <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	7bbb      	ldrb	r3, [r7, #14]
 8005e18:	4413      	add	r3, r2
 8005e1a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8005e1c:	7b7b      	ldrb	r3, [r7, #13]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	f240 7006 	movw	r0, #1798	; 0x706
 8005e24:	f000 fc08 	bl	8006638 <SUBGRF_WriteRegister>
    }
}
 8005e28:	bf00      	nop
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8005e36:	f000 ff65 	bl	8006d04 <RBI_IsDCDC>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d102      	bne.n	8005e46 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8005e40:	2301      	movs	r3, #1
 8005e42:	71fb      	strb	r3, [r7, #7]
 8005e44:	e001      	b.n	8005e4a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8005e46:	2300      	movs	r3, #0
 8005e48:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8005e4a:	1dfb      	adds	r3, r7, #7
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	4619      	mov	r1, r3
 8005e50:	2096      	movs	r0, #150	; 0x96
 8005e52:	f000 fca1 	bl	8006798 <SUBGRF_WriteCommand>
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8005e66:	793b      	ldrb	r3, [r7, #4]
 8005e68:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	019b      	lsls	r3, r3, #6
 8005e70:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8005e72:	793b      	ldrb	r3, [r7, #4]
 8005e74:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8005e7c:	b25b      	sxtb	r3, r3
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8005e82:	793b      	ldrb	r3, [r7, #4]
 8005e84:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8005e8c:	b25b      	sxtb	r3, r3
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8005e92:	793b      	ldrb	r3, [r7, #4]
 8005e94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8005e9c:	b25b      	sxtb	r3, r3
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8005ea2:	793b      	ldrb	r3, [r7, #4]
 8005ea4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8005eac:	b25b      	sxtb	r3, r3
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8005eb2:	793b      	ldrb	r3, [r7, #4]
 8005eb4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8005ebc:	b25b      	sxtb	r3, r3
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8005ec2:	793b      	ldrb	r3, [r7, #4]
 8005ec4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	b25b      	sxtb	r3, r3
 8005ed0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8005ed2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8005ed4:	f107 030f 	add.w	r3, r7, #15
 8005ed8:	2201      	movs	r2, #1
 8005eda:	4619      	mov	r1, r3
 8005edc:	2089      	movs	r0, #137	; 0x89
 8005ede:	f000 fc5b 	bl	8006798 <SUBGRF_WriteCommand>
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a1b      	ldr	r2, [pc, #108]	; (8005f64 <SUBGRF_CalibrateImage+0x78>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d904      	bls.n	8005f06 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8005efc:	23e1      	movs	r3, #225	; 0xe1
 8005efe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8005f00:	23e9      	movs	r3, #233	; 0xe9
 8005f02:	737b      	strb	r3, [r7, #13]
 8005f04:	e022      	b.n	8005f4c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a17      	ldr	r2, [pc, #92]	; (8005f68 <SUBGRF_CalibrateImage+0x7c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d904      	bls.n	8005f18 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8005f0e:	23d7      	movs	r3, #215	; 0xd7
 8005f10:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8005f12:	23db      	movs	r3, #219	; 0xdb
 8005f14:	737b      	strb	r3, [r7, #13]
 8005f16:	e019      	b.n	8005f4c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a14      	ldr	r2, [pc, #80]	; (8005f6c <SUBGRF_CalibrateImage+0x80>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d904      	bls.n	8005f2a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8005f20:	23c1      	movs	r3, #193	; 0xc1
 8005f22:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8005f24:	23c5      	movs	r3, #197	; 0xc5
 8005f26:	737b      	strb	r3, [r7, #13]
 8005f28:	e010      	b.n	8005f4c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a10      	ldr	r2, [pc, #64]	; (8005f70 <SUBGRF_CalibrateImage+0x84>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d904      	bls.n	8005f3c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8005f32:	2375      	movs	r3, #117	; 0x75
 8005f34:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8005f36:	2381      	movs	r3, #129	; 0x81
 8005f38:	737b      	strb	r3, [r7, #13]
 8005f3a:	e007      	b.n	8005f4c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a0d      	ldr	r2, [pc, #52]	; (8005f74 <SUBGRF_CalibrateImage+0x88>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d903      	bls.n	8005f4c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8005f44:	236b      	movs	r3, #107	; 0x6b
 8005f46:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8005f48:	236f      	movs	r3, #111	; 0x6f
 8005f4a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8005f4c:	f107 030c 	add.w	r3, r7, #12
 8005f50:	2202      	movs	r2, #2
 8005f52:	4619      	mov	r1, r3
 8005f54:	2098      	movs	r0, #152	; 0x98
 8005f56:	f000 fc1f 	bl	8006798 <SUBGRF_WriteCommand>
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	35a4e900 	.word	0x35a4e900
 8005f68:	32a9f880 	.word	0x32a9f880
 8005f6c:	2de54480 	.word	0x2de54480
 8005f70:	1b6b0b00 	.word	0x1b6b0b00
 8005f74:	1954fc40 	.word	0x1954fc40

08005f78 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4604      	mov	r4, r0
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4623      	mov	r3, r4
 8005f88:	71fb      	strb	r3, [r7, #7]
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	71bb      	strb	r3, [r7, #6]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	717b      	strb	r3, [r7, #5]
 8005f92:	4613      	mov	r3, r2
 8005f94:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8005f9a:	79bb      	ldrb	r3, [r7, #6]
 8005f9c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8005f9e:	797b      	ldrb	r3, [r7, #5]
 8005fa0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8005fa2:	793b      	ldrb	r3, [r7, #4]
 8005fa4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8005fa6:	f107 030c 	add.w	r3, r7, #12
 8005faa:	2204      	movs	r2, #4
 8005fac:	4619      	mov	r1, r3
 8005fae:	2095      	movs	r0, #149	; 0x95
 8005fb0:	f000 fbf2 	bl	8006798 <SUBGRF_WriteCommand>
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd90      	pop	{r4, r7, pc}

08005fbc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	4608      	mov	r0, r1
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4623      	mov	r3, r4
 8005fcc:	80fb      	strh	r3, [r7, #6]
 8005fce:	4603      	mov	r3, r0
 8005fd0:	80bb      	strh	r3, [r7, #4]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	807b      	strh	r3, [r7, #2]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	0a1b      	lsrs	r3, r3, #8
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8005fea:	88bb      	ldrh	r3, [r7, #4]
 8005fec:	0a1b      	lsrs	r3, r3, #8
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8005ff4:	88bb      	ldrh	r3, [r7, #4]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8005ffa:	887b      	ldrh	r3, [r7, #2]
 8005ffc:	0a1b      	lsrs	r3, r3, #8
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	b2db      	uxtb	r3, r3
 8006002:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8006004:	887b      	ldrh	r3, [r7, #2]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800600a:	883b      	ldrh	r3, [r7, #0]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	b29b      	uxth	r3, r3
 8006010:	b2db      	uxtb	r3, r3
 8006012:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8006014:	883b      	ldrh	r3, [r7, #0]
 8006016:	b2db      	uxtb	r3, r3
 8006018:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	2208      	movs	r2, #8
 8006020:	4619      	mov	r1, r3
 8006022:	2008      	movs	r0, #8
 8006024:	f000 fbb8 	bl	8006798 <SUBGRF_WriteCommand>
}
 8006028:	bf00      	nop
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	bd90      	pop	{r4, r7, pc}

08006030 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	6039      	str	r1, [r7, #0]
 800603a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	b2db      	uxtb	r3, r3
 8006044:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	0c1b      	lsrs	r3, r3, #16
 800604a:	b2db      	uxtb	r3, r3
 800604c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	0a1b      	lsrs	r3, r3, #8
 8006052:	b2db      	uxtb	r3, r3
 8006054:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	b2db      	uxtb	r3, r3
 800605a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800605c:	f107 030c 	add.w	r3, r7, #12
 8006060:	2204      	movs	r2, #4
 8006062:	4619      	mov	r1, r3
 8006064:	2097      	movs	r0, #151	; 0x97
 8006066:	f000 fb97 	bl	8006798 <SUBGRF_WriteCommand>
}
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8006074:	b5b0      	push	{r4, r5, r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <SUBGRF_SetRfFrequency+0x7c>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	f083 0301 	eor.w	r3, r3, #1
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff ff2c 	bl	8005eec <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8006094:	4b16      	ldr	r3, [pc, #88]	; (80060f0 <SUBGRF_SetRfFrequency+0x7c>)
 8006096:	2201      	movs	r2, #1
 8006098:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	461a      	mov	r2, r3
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	09d5      	lsrs	r5, r2, #7
 80060a4:	0654      	lsls	r4, r2, #25
 80060a6:	4a13      	ldr	r2, [pc, #76]	; (80060f4 <SUBGRF_SetRfFrequency+0x80>)
 80060a8:	f04f 0300 	mov.w	r3, #0
 80060ac:	4620      	mov	r0, r4
 80060ae:	4629      	mov	r1, r5
 80060b0:	f7fa f862 	bl	8000178 <__aeabi_uldivmod>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4613      	mov	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	0e1b      	lsrs	r3, r3, #24
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	0c1b      	lsrs	r3, r3, #16
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	0a1b      	lsrs	r3, r3, #8
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80060da:	f107 0308 	add.w	r3, r7, #8
 80060de:	2204      	movs	r2, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	2086      	movs	r0, #134	; 0x86
 80060e4:	f000 fb58 	bl	8006798 <SUBGRF_WriteCommand>
}
 80060e8:	bf00      	nop
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bdb0      	pop	{r4, r5, r7, pc}
 80060f0:	200001a0 	.word	0x200001a0
 80060f4:	01e84800 	.word	0x01e84800

080060f8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8006102:	79fa      	ldrb	r2, [r7, #7]
 8006104:	4b09      	ldr	r3, [pc, #36]	; (800612c <SUBGRF_SetPacketType+0x34>)
 8006106:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d104      	bne.n	8006118 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800610e:	2100      	movs	r1, #0
 8006110:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006114:	f000 fa90 	bl	8006638 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8006118:	1dfb      	adds	r3, r7, #7
 800611a:	2201      	movs	r2, #1
 800611c:	4619      	mov	r1, r3
 800611e:	208a      	movs	r0, #138	; 0x8a
 8006120:	f000 fb3a 	bl	8006798 <SUBGRF_WriteCommand>
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000199 	.word	0x20000199

08006130 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
    return PacketType;
 8006134:	4b02      	ldr	r3, [pc, #8]	; (8006140 <SUBGRF_GetPacketType+0x10>)
 8006136:	781b      	ldrb	r3, [r3, #0]
}
 8006138:	4618      	mov	r0, r3
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr
 8006140:	20000199 	.word	0x20000199

08006144 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	4603      	mov	r3, r0
 800614c:	71fb      	strb	r3, [r7, #7]
 800614e:	460b      	mov	r3, r1
 8006150:	71bb      	strb	r3, [r7, #6]
 8006152:	4613      	mov	r3, r2
 8006154:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8006156:	79fb      	ldrb	r3, [r7, #7]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d124      	bne.n	80061a6 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 800615c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006160:	2b0f      	cmp	r3, #15
 8006162:	d106      	bne.n	8006172 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8006164:	2301      	movs	r3, #1
 8006166:	2201      	movs	r2, #1
 8006168:	2100      	movs	r1, #0
 800616a:	2006      	movs	r0, #6
 800616c:	f7ff ff04 	bl	8005f78 <SUBGRF_SetPaConfig>
 8006170:	e005      	b.n	800617e <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8006172:	2301      	movs	r3, #1
 8006174:	2201      	movs	r2, #1
 8006176:	2100      	movs	r1, #0
 8006178:	2004      	movs	r0, #4
 800617a:	f7ff fefd 	bl	8005f78 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 800617e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006182:	2b0d      	cmp	r3, #13
 8006184:	dd02      	ble.n	800618c <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8006186:	230e      	movs	r3, #14
 8006188:	71bb      	strb	r3, [r7, #6]
 800618a:	e006      	b.n	800619a <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 800618c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006190:	f113 0f11 	cmn.w	r3, #17
 8006194:	da01      	bge.n	800619a <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8006196:	23ef      	movs	r3, #239	; 0xef
 8006198:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800619a:	2118      	movs	r1, #24
 800619c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80061a0:	f000 fa4a 	bl	8006638 <SUBGRF_WriteRegister>
 80061a4:	e025      	b.n	80061f2 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 80061a6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80061aa:	f000 fa59 	bl	8006660 <SUBGRF_ReadRegister>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f043 031e 	orr.w	r3, r3, #30
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	4619      	mov	r1, r3
 80061b8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80061bc:	f000 fa3c 	bl	8006638 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 80061c0:	2301      	movs	r3, #1
 80061c2:	2200      	movs	r2, #0
 80061c4:	2107      	movs	r1, #7
 80061c6:	2004      	movs	r0, #4
 80061c8:	f7ff fed6 	bl	8005f78 <SUBGRF_SetPaConfig>
        if( power > 22 )
 80061cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80061d0:	2b16      	cmp	r3, #22
 80061d2:	dd02      	ble.n	80061da <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 80061d4:	2316      	movs	r3, #22
 80061d6:	71bb      	strb	r3, [r7, #6]
 80061d8:	e006      	b.n	80061e8 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 80061da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80061de:	f113 0f09 	cmn.w	r3, #9
 80061e2:	da01      	bge.n	80061e8 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 80061e4:	23f7      	movs	r3, #247	; 0xf7
 80061e6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 80061e8:	2138      	movs	r1, #56	; 0x38
 80061ea:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80061ee:	f000 fa23 	bl	8006638 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80061f2:	79bb      	ldrb	r3, [r7, #6]
 80061f4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 80061f6:	797b      	ldrb	r3, [r7, #5]
 80061f8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 80061fa:	f107 030c 	add.w	r3, r7, #12
 80061fe:	2202      	movs	r2, #2
 8006200:	4619      	mov	r1, r3
 8006202:	208e      	movs	r0, #142	; 0x8e
 8006204:	f000 fac8 	bl	8006798 <SUBGRF_WriteCommand>
}
 8006208:	bf00      	nop
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8006210:	b5b0      	push	{r4, r5, r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800621c:	4a5e      	ldr	r2, [pc, #376]	; (8006398 <SUBGRF_SetModulationParams+0x188>)
 800621e:	f107 0308 	add.w	r3, r7, #8
 8006222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006226:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	781a      	ldrb	r2, [r3, #0]
 800622e:	4b5b      	ldr	r3, [pc, #364]	; (800639c <SUBGRF_SetModulationParams+0x18c>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d004      	beq.n	8006240 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff ff5c 	bl	80060f8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b03      	cmp	r3, #3
 8006246:	f200 80a2 	bhi.w	800638e <SUBGRF_SetModulationParams+0x17e>
 800624a:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <SUBGRF_SetModulationParams+0x40>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	08006261 	.word	0x08006261
 8006254:	0800631d 	.word	0x0800631d
 8006258:	080062df 	.word	0x080062df
 800625c:	0800634b 	.word	0x0800634b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8006260:	2308      	movs	r3, #8
 8006262:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	4a4d      	ldr	r2, [pc, #308]	; (80063a0 <SUBGRF_SetModulationParams+0x190>)
 800626a:	fbb2 f3f3 	udiv	r3, r2, r3
 800626e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	0c1b      	lsrs	r3, r3, #16
 8006274:	b2db      	uxtb	r3, r3
 8006276:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	0a1b      	lsrs	r3, r3, #8
 800627c:	b2db      	uxtb	r3, r3
 800627e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	b2db      	uxtb	r3, r3
 8006284:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	7b1b      	ldrb	r3, [r3, #12]
 800628a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	7b5b      	ldrb	r3, [r3, #13]
 8006290:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	461a      	mov	r2, r3
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	09d5      	lsrs	r5, r2, #7
 800629e:	0654      	lsls	r4, r2, #25
 80062a0:	4a40      	ldr	r2, [pc, #256]	; (80063a4 <SUBGRF_SetModulationParams+0x194>)
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	4620      	mov	r0, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	f7f9 ff65 	bl	8000178 <__aeabi_uldivmod>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4613      	mov	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	0c1b      	lsrs	r3, r3, #16
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	0a1b      	lsrs	r3, r3, #8
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	f107 0308 	add.w	r3, r7, #8
 80062d4:	4619      	mov	r1, r3
 80062d6:	208b      	movs	r0, #139	; 0x8b
 80062d8:	f000 fa5e 	bl	8006798 <SUBGRF_WriteCommand>
        break;
 80062dc:	e058      	b.n	8006390 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 80062de:	2304      	movs	r3, #4
 80062e0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	4a2e      	ldr	r2, [pc, #184]	; (80063a0 <SUBGRF_SetModulationParams+0x190>)
 80062e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	0c1b      	lsrs	r3, r3, #16
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	0a1b      	lsrs	r3, r3, #8
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	7d1b      	ldrb	r3, [r3, #20]
 8006308:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800630a:	7cfb      	ldrb	r3, [r7, #19]
 800630c:	b29a      	uxth	r2, r3
 800630e:	f107 0308 	add.w	r3, r7, #8
 8006312:	4619      	mov	r1, r3
 8006314:	208b      	movs	r0, #139	; 0x8b
 8006316:	f000 fa3f 	bl	8006798 <SUBGRF_WriteCommand>
        break;
 800631a:	e039      	b.n	8006390 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 800631c:	2304      	movs	r3, #4
 800631e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	7e1b      	ldrb	r3, [r3, #24]
 8006324:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	7e5b      	ldrb	r3, [r3, #25]
 800632a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	7e9b      	ldrb	r3, [r3, #26]
 8006330:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	7edb      	ldrb	r3, [r3, #27]
 8006336:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006338:	7cfb      	ldrb	r3, [r7, #19]
 800633a:	b29a      	uxth	r2, r3
 800633c:	f107 0308 	add.w	r3, r7, #8
 8006340:	4619      	mov	r1, r3
 8006342:	208b      	movs	r0, #139	; 0x8b
 8006344:	f000 fa28 	bl	8006798 <SUBGRF_WriteCommand>

        break;
 8006348:	e022      	b.n	8006390 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 800634a:	2305      	movs	r3, #5
 800634c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	4a13      	ldr	r2, [pc, #76]	; (80063a0 <SUBGRF_SetModulationParams+0x190>)
 8006354:	fbb2 f3f3 	udiv	r3, r2, r3
 8006358:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	0c1b      	lsrs	r3, r3, #16
 800635e:	b2db      	uxtb	r3, r3
 8006360:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	0a1b      	lsrs	r3, r3, #8
 8006366:	b2db      	uxtb	r3, r3
 8006368:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	7b1b      	ldrb	r3, [r3, #12]
 8006374:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	7b5b      	ldrb	r3, [r3, #13]
 800637a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800637c:	7cfb      	ldrb	r3, [r7, #19]
 800637e:	b29a      	uxth	r2, r3
 8006380:	f107 0308 	add.w	r3, r7, #8
 8006384:	4619      	mov	r1, r3
 8006386:	208b      	movs	r0, #139	; 0x8b
 8006388:	f000 fa06 	bl	8006798 <SUBGRF_WriteCommand>
        break;
 800638c:	e000      	b.n	8006390 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 800638e:	bf00      	nop
    }
}
 8006390:	bf00      	nop
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bdb0      	pop	{r4, r5, r7, pc}
 8006398:	080085a0 	.word	0x080085a0
 800639c:	20000199 	.word	0x20000199
 80063a0:	3d090000 	.word	0x3d090000
 80063a4:	01e84800 	.word	0x01e84800

080063a8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80063b4:	4a48      	ldr	r2, [pc, #288]	; (80064d8 <SUBGRF_SetPacketParams+0x130>)
 80063b6:	f107 030c 	add.w	r3, r7, #12
 80063ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80063bc:	c303      	stmia	r3!, {r0, r1}
 80063be:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	781a      	ldrb	r2, [r3, #0]
 80063c4:	4b45      	ldr	r3, [pc, #276]	; (80064dc <SUBGRF_SetPacketParams+0x134>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d004      	beq.n	80063d6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fe91 	bl	80060f8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d878      	bhi.n	80064d0 <SUBGRF_SetPacketParams+0x128>
 80063de:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <SUBGRF_SetPacketParams+0x3c>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	080063f5 	.word	0x080063f5
 80063e8:	08006485 	.word	0x08006485
 80063ec:	08006479 	.word	0x08006479
 80063f0:	080063f5 	.word	0x080063f5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	7a5b      	ldrb	r3, [r3, #9]
 80063f8:	2bf1      	cmp	r3, #241	; 0xf1
 80063fa:	d10a      	bne.n	8006412 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80063fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006400:	f7ff fb20 	bl	8005a44 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8006404:	f248 0005 	movw	r0, #32773	; 0x8005
 8006408:	f7ff fb3c 	bl	8005a84 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800640c:	2302      	movs	r3, #2
 800640e:	75bb      	strb	r3, [r7, #22]
 8006410:	e011      	b.n	8006436 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	7a5b      	ldrb	r3, [r3, #9]
 8006416:	2bf2      	cmp	r3, #242	; 0xf2
 8006418:	d10a      	bne.n	8006430 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800641a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800641e:	f7ff fb11 	bl	8005a44 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8006422:	f241 0021 	movw	r0, #4129	; 0x1021
 8006426:	f7ff fb2d 	bl	8005a84 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800642a:	2306      	movs	r3, #6
 800642c:	75bb      	strb	r3, [r7, #22]
 800642e:	e002      	b.n	8006436 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	7a5b      	ldrb	r3, [r3, #9]
 8006434:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8006436:	2309      	movs	r3, #9
 8006438:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	885b      	ldrh	r3, [r3, #2]
 800643e:	0a1b      	lsrs	r3, r3, #8
 8006440:	b29b      	uxth	r3, r3
 8006442:	b2db      	uxtb	r3, r3
 8006444:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	885b      	ldrh	r3, [r3, #2]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	791b      	ldrb	r3, [r3, #4]
 8006452:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	795b      	ldrb	r3, [r3, #5]
 8006458:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	799b      	ldrb	r3, [r3, #6]
 800645e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	79db      	ldrb	r3, [r3, #7]
 8006464:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	7a1b      	ldrb	r3, [r3, #8]
 800646a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800646c:	7dbb      	ldrb	r3, [r7, #22]
 800646e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	7a9b      	ldrb	r3, [r3, #10]
 8006474:	753b      	strb	r3, [r7, #20]
        break;
 8006476:	e022      	b.n	80064be <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8006478:	2301      	movs	r3, #1
 800647a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	7b1b      	ldrb	r3, [r3, #12]
 8006480:	733b      	strb	r3, [r7, #12]
        break;
 8006482:	e01c      	b.n	80064be <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8006484:	2306      	movs	r3, #6
 8006486:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	89db      	ldrh	r3, [r3, #14]
 800648c:	0a1b      	lsrs	r3, r3, #8
 800648e:	b29b      	uxth	r3, r3
 8006490:	b2db      	uxtb	r3, r3
 8006492:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	89db      	ldrh	r3, [r3, #14]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	7c1a      	ldrb	r2, [r3, #16]
 80064a0:	4b0f      	ldr	r3, [pc, #60]	; (80064e0 <SUBGRF_SetPacketParams+0x138>)
 80064a2:	4611      	mov	r1, r2
 80064a4:	7019      	strb	r1, [r3, #0]
 80064a6:	4613      	mov	r3, r2
 80064a8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	7c5b      	ldrb	r3, [r3, #17]
 80064ae:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	7c9b      	ldrb	r3, [r3, #18]
 80064b4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	7cdb      	ldrb	r3, [r3, #19]
 80064ba:	747b      	strb	r3, [r7, #17]
        break;
 80064bc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	f107 030c 	add.w	r3, r7, #12
 80064c6:	4619      	mov	r1, r3
 80064c8:	208c      	movs	r0, #140	; 0x8c
 80064ca:	f000 f965 	bl	8006798 <SUBGRF_WriteCommand>
 80064ce:	e000      	b.n	80064d2 <SUBGRF_SetPacketParams+0x12a>
        return;
 80064d0:	bf00      	nop
}
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	080085a8 	.word	0x080085a8
 80064dc:	20000199 	.word	0x20000199
 80064e0:	2000019a 	.word	0x2000019a

080064e4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	460a      	mov	r2, r1
 80064ee:	71fb      	strb	r3, [r7, #7]
 80064f0:	4613      	mov	r3, r2
 80064f2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80064f8:	79bb      	ldrb	r3, [r7, #6]
 80064fa:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80064fc:	f107 030c 	add.w	r3, r7, #12
 8006500:	2202      	movs	r2, #2
 8006502:	4619      	mov	r1, r3
 8006504:	208f      	movs	r0, #143	; 0x8f
 8006506:	f000 f947 	bl	8006798 <SUBGRF_WriteCommand>
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8006518:	2300      	movs	r3, #0
 800651a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800651c:	1d3b      	adds	r3, r7, #4
 800651e:	2201      	movs	r2, #1
 8006520:	4619      	mov	r1, r3
 8006522:	2015      	movs	r0, #21
 8006524:	f000 f95a 	bl	80067dc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8006528:	793b      	ldrb	r3, [r7, #4]
 800652a:	425b      	negs	r3, r3
 800652c:	105b      	asrs	r3, r3, #1
 800652e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8006530:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8006546:	f107 030c 	add.w	r3, r7, #12
 800654a:	2202      	movs	r2, #2
 800654c:	4619      	mov	r1, r3
 800654e:	2013      	movs	r0, #19
 8006550:	f000 f944 	bl	80067dc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8006554:	f7ff fdec 	bl	8006130 <SUBGRF_GetPacketType>
 8006558:	4603      	mov	r3, r0
 800655a:	2b01      	cmp	r3, #1
 800655c:	d10d      	bne.n	800657a <SUBGRF_GetRxBufferStatus+0x3e>
 800655e:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <SUBGRF_GetRxBufferStatus+0x54>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b01      	cmp	r3, #1
 8006566:	d108      	bne.n	800657a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8006568:	f240 7002 	movw	r0, #1794	; 0x702
 800656c:	f000 f878 	bl	8006660 <SUBGRF_ReadRegister>
 8006570:	4603      	mov	r3, r0
 8006572:	461a      	mov	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	e002      	b.n	8006580 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800657a:	7b3a      	ldrb	r2, [r7, #12]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8006580:	7b7a      	ldrb	r2, [r7, #13]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	701a      	strb	r2, [r3, #0]
}
 8006586:	bf00      	nop
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	2000019a 	.word	0x2000019a

08006594 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800659c:	f107 030c 	add.w	r3, r7, #12
 80065a0:	2203      	movs	r2, #3
 80065a2:	4619      	mov	r1, r3
 80065a4:	2014      	movs	r0, #20
 80065a6:	f000 f919 	bl	80067dc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80065aa:	f7ff fdc1 	bl	8006130 <SUBGRF_GetPacketType>
 80065ae:	4603      	mov	r3, r0
 80065b0:	461a      	mov	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <SUBGRF_GetPacketStatus+0x30>
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d013      	beq.n	80065ea <SUBGRF_GetPacketStatus+0x56>
 80065c2:	e02a      	b.n	800661a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80065c4:	7b3a      	ldrb	r2, [r7, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80065ca:	7b7b      	ldrb	r3, [r7, #13]
 80065cc:	425b      	negs	r3, r3
 80065ce:	105b      	asrs	r3, r3, #1
 80065d0:	b25a      	sxtb	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80065d6:	7bbb      	ldrb	r3, [r7, #14]
 80065d8:	425b      	negs	r3, r3
 80065da:	105b      	asrs	r3, r3, #1
 80065dc:	b25a      	sxtb	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	609a      	str	r2, [r3, #8]
            break;
 80065e8:	e020      	b.n	800662c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80065ea:	7b3b      	ldrb	r3, [r7, #12]
 80065ec:	425b      	negs	r3, r3
 80065ee:	105b      	asrs	r3, r3, #1
 80065f0:	b25a      	sxtb	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80065f6:	7b7b      	ldrb	r3, [r7, #13]
 80065f8:	b25b      	sxtb	r3, r3
 80065fa:	3302      	adds	r3, #2
 80065fc:	109b      	asrs	r3, r3, #2
 80065fe:	b25a      	sxtb	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	425b      	negs	r3, r3
 8006608:	105b      	asrs	r3, r3, #1
 800660a:	b25a      	sxtb	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8006610:	4b08      	ldr	r3, [pc, #32]	; (8006634 <SUBGRF_GetPacketStatus+0xa0>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	611a      	str	r2, [r3, #16]
            break;
 8006618:	e008      	b.n	800662c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800661a:	2214      	movs	r2, #20
 800661c:	2100      	movs	r1, #0
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fb7b 	bl	8006d1a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	220f      	movs	r2, #15
 8006628:	701a      	strb	r2, [r3, #0]
            break;
 800662a:	bf00      	nop
    }
}
 800662c:	bf00      	nop
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	2000019c 	.word	0x2000019c

08006638 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	460a      	mov	r2, r1
 8006642:	80fb      	strh	r3, [r7, #6]
 8006644:	4613      	mov	r3, r2
 8006646:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8006648:	1d7a      	adds	r2, r7, #5
 800664a:	88f9      	ldrh	r1, [r7, #6]
 800664c:	2301      	movs	r3, #1
 800664e:	4803      	ldr	r0, [pc, #12]	; (800665c <SUBGRF_WriteRegister+0x24>)
 8006650:	f7fc f980 	bl	8002954 <HAL_SUBGHZ_WriteRegisters>
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	200001d0 	.word	0x200001d0

08006660 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800666a:	f107 020f 	add.w	r2, r7, #15
 800666e:	88f9      	ldrh	r1, [r7, #6]
 8006670:	2301      	movs	r3, #1
 8006672:	4804      	ldr	r0, [pc, #16]	; (8006684 <SUBGRF_ReadRegister+0x24>)
 8006674:	f7fc f9cd 	bl	8002a12 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8006678:	7bfb      	ldrb	r3, [r7, #15]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	200001d0 	.word	0x200001d0

08006688 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	6039      	str	r1, [r7, #0]
 8006692:	80fb      	strh	r3, [r7, #6]
 8006694:	4613      	mov	r3, r2
 8006696:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006698:	f3ef 8310 	mrs	r3, PRIMASK
 800669c:	60fb      	str	r3, [r7, #12]
  return(result);
 800669e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80066a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80066a2:	b672      	cpsid	i
}
 80066a4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80066a6:	88bb      	ldrh	r3, [r7, #4]
 80066a8:	88f9      	ldrh	r1, [r7, #6]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	4806      	ldr	r0, [pc, #24]	; (80066c8 <SUBGRF_WriteRegisters+0x40>)
 80066ae:	f7fc f951 	bl	8002954 <HAL_SUBGHZ_WriteRegisters>
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f383 8810 	msr	PRIMASK, r3
}
 80066bc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80066be:	bf00      	nop
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	200001d0 	.word	0x200001d0

080066cc <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	6039      	str	r1, [r7, #0]
 80066d6:	80fb      	strh	r3, [r7, #6]
 80066d8:	4613      	mov	r3, r2
 80066da:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066dc:	f3ef 8310 	mrs	r3, PRIMASK
 80066e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80066e2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80066e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80066e6:	b672      	cpsid	i
}
 80066e8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80066ea:	88bb      	ldrh	r3, [r7, #4]
 80066ec:	88f9      	ldrh	r1, [r7, #6]
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	4806      	ldr	r0, [pc, #24]	; (800670c <SUBGRF_ReadRegisters+0x40>)
 80066f2:	f7fc f98e 	bl	8002a12 <HAL_SUBGHZ_ReadRegisters>
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f383 8810 	msr	PRIMASK, r3
}
 8006700:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006702:	bf00      	nop
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	200001d0 	.word	0x200001d0

08006710 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	6039      	str	r1, [r7, #0]
 800671a:	71fb      	strb	r3, [r7, #7]
 800671c:	4613      	mov	r3, r2
 800671e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006720:	f3ef 8310 	mrs	r3, PRIMASK
 8006724:	60fb      	str	r3, [r7, #12]
  return(result);
 8006726:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800672a:	b672      	cpsid	i
}
 800672c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800672e:	79bb      	ldrb	r3, [r7, #6]
 8006730:	b29b      	uxth	r3, r3
 8006732:	79f9      	ldrb	r1, [r7, #7]
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	4806      	ldr	r0, [pc, #24]	; (8006750 <SUBGRF_WriteBuffer+0x40>)
 8006738:	f7fc fa7f 	bl	8002c3a <HAL_SUBGHZ_WriteBuffer>
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f383 8810 	msr	PRIMASK, r3
}
 8006746:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006748:	bf00      	nop
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	200001d0 	.word	0x200001d0

08006754 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	6039      	str	r1, [r7, #0]
 800675e:	71fb      	strb	r3, [r7, #7]
 8006760:	4613      	mov	r3, r2
 8006762:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006764:	f3ef 8310 	mrs	r3, PRIMASK
 8006768:	60fb      	str	r3, [r7, #12]
  return(result);
 800676a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800676c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800676e:	b672      	cpsid	i
}
 8006770:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8006772:	79bb      	ldrb	r3, [r7, #6]
 8006774:	b29b      	uxth	r3, r3
 8006776:	79f9      	ldrb	r1, [r7, #7]
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	4806      	ldr	r0, [pc, #24]	; (8006794 <SUBGRF_ReadBuffer+0x40>)
 800677c:	f7fc fab0 	bl	8002ce0 <HAL_SUBGHZ_ReadBuffer>
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f383 8810 	msr	PRIMASK, r3
}
 800678a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800678c:	bf00      	nop
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	200001d0 	.word	0x200001d0

08006798 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	4603      	mov	r3, r0
 80067a0:	6039      	str	r1, [r7, #0]
 80067a2:	71fb      	strb	r3, [r7, #7]
 80067a4:	4613      	mov	r3, r2
 80067a6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067a8:	f3ef 8310 	mrs	r3, PRIMASK
 80067ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80067ae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80067b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80067b2:	b672      	cpsid	i
}
 80067b4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80067b6:	88bb      	ldrh	r3, [r7, #4]
 80067b8:	79f9      	ldrb	r1, [r7, #7]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	4806      	ldr	r0, [pc, #24]	; (80067d8 <SUBGRF_WriteCommand+0x40>)
 80067be:	f7fc f989 	bl	8002ad4 <HAL_SUBGHZ_ExecSetCmd>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f383 8810 	msr	PRIMASK, r3
}
 80067cc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80067ce:	bf00      	nop
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	200001d0 	.word	0x200001d0

080067dc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	6039      	str	r1, [r7, #0]
 80067e6:	71fb      	strb	r3, [r7, #7]
 80067e8:	4613      	mov	r3, r2
 80067ea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ec:	f3ef 8310 	mrs	r3, PRIMASK
 80067f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80067f2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80067f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80067f6:	b672      	cpsid	i
}
 80067f8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80067fa:	88bb      	ldrh	r3, [r7, #4]
 80067fc:	79f9      	ldrb	r1, [r7, #7]
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	4806      	ldr	r0, [pc, #24]	; (800681c <SUBGRF_ReadCommand+0x40>)
 8006802:	f7fc f9c6 	bl	8002b92 <HAL_SUBGHZ_ExecGetCmd>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f383 8810 	msr	PRIMASK, r3
}
 8006810:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006812:	bf00      	nop
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	200001d0 	.word	0x200001d0

08006820 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	460a      	mov	r2, r1
 800682a:	71fb      	strb	r3, [r7, #7]
 800682c:	4613      	mov	r3, r2
 800682e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8006834:	79bb      	ldrb	r3, [r7, #6]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d10d      	bne.n	8006856 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d104      	bne.n	800684a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8006840:	2302      	movs	r3, #2
 8006842:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8006844:	2004      	movs	r0, #4
 8006846:	f000 f84e 	bl	80068e6 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	2b02      	cmp	r3, #2
 800684e:	d107      	bne.n	8006860 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8006850:	2303      	movs	r3, #3
 8006852:	73fb      	strb	r3, [r7, #15]
 8006854:	e004      	b.n	8006860 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8006856:	79bb      	ldrb	r3, [r7, #6]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fa2b 	bl	8006cbe <RBI_ConfigRFSwitch>
}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800687a:	2301      	movs	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800687e:	f000 fa2b 	bl	8006cd8 <RBI_GetTxConfig>
 8006882:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b02      	cmp	r3, #2
 8006888:	d016      	beq.n	80068b8 <SUBGRF_SetRfTxPower+0x48>
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b02      	cmp	r3, #2
 800688e:	dc16      	bgt.n	80068be <SUBGRF_SetRfTxPower+0x4e>
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <SUBGRF_SetRfTxPower+0x2e>
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d00a      	beq.n	80068b2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800689c:	e00f      	b.n	80068be <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800689e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068a2:	2b0f      	cmp	r3, #15
 80068a4:	dd02      	ble.n	80068ac <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80068a6:	2302      	movs	r3, #2
 80068a8:	73fb      	strb	r3, [r7, #15]
            break;
 80068aa:	e009      	b.n	80068c0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80068ac:	2301      	movs	r3, #1
 80068ae:	73fb      	strb	r3, [r7, #15]
            break;
 80068b0:	e006      	b.n	80068c0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80068b2:	2301      	movs	r3, #1
 80068b4:	73fb      	strb	r3, [r7, #15]
            break;
 80068b6:	e003      	b.n	80068c0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80068b8:	2302      	movs	r3, #2
 80068ba:	73fb      	strb	r3, [r7, #15]
            break;
 80068bc:	e000      	b.n	80068c0 <SUBGRF_SetRfTxPower+0x50>
            break;
 80068be:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80068c0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	2202      	movs	r2, #2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff fc3b 	bl	8006144 <SUBGRF_SetTxParams>

    return paSelect;
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80068dc:	2301      	movs	r3, #1
}
 80068de:	4618      	mov	r0, r3
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr

080068e6 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	4603      	mov	r3, r0
 80068ee:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80068f0:	f000 fa08 	bl	8006d04 <RBI_IsDCDC>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d112      	bne.n	8006920 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80068fa:	f640 1023 	movw	r0, #2339	; 0x923
 80068fe:	f7ff feaf 	bl	8006660 <SUBGRF_ReadRegister>
 8006902:	4603      	mov	r3, r0
 8006904:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	f023 0306 	bic.w	r3, r3, #6
 800690c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800690e:	7bfa      	ldrb	r2, [r7, #15]
 8006910:	79fb      	ldrb	r3, [r7, #7]
 8006912:	4313      	orrs	r3, r2
 8006914:	b2db      	uxtb	r3, r3
 8006916:	4619      	mov	r1, r3
 8006918:	f640 1023 	movw	r0, #2339	; 0x923
 800691c:	f7ff fe8c 	bl	8006638 <SUBGRF_WriteRegister>
  }
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8006936:	231f      	movs	r3, #31
 8006938:	e016      	b.n	8006968 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
 800693e:	e00f      	b.n	8006960 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	4a0c      	ldr	r2, [pc, #48]	; (8006974 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8006944:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	429a      	cmp	r2, r3
 800694c:	d205      	bcs.n	800695a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	4a08      	ldr	r2, [pc, #32]	; (8006974 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	4413      	add	r3, r2
 8006956:	791b      	ldrb	r3, [r3, #4]
 8006958:	e006      	b.n	8006968 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	3301      	adds	r3, #1
 800695e:	73fb      	strb	r3, [r7, #15]
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b15      	cmp	r3, #21
 8006964:	d9ec      	bls.n	8006940 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8006966:	e7fe      	b.n	8006966 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	08008740 	.word	0x08008740

08006978 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8006982:	4b36      	ldr	r3, [pc, #216]	; (8006a5c <SUBGRF_GetCFO+0xe4>)
 8006984:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8006986:	f640 0007 	movw	r0, #2055	; 0x807
 800698a:	f7ff fe69 	bl	8006660 <SUBGRF_ReadRegister>
 800698e:	4603      	mov	r3, r0
 8006990:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8006992:	7ffb      	ldrb	r3, [r7, #31]
 8006994:	08db      	lsrs	r3, r3, #3
 8006996:	b2db      	uxtb	r3, r3
 8006998:	f003 0303 	and.w	r3, r3, #3
 800699c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80069a0:	4413      	add	r3, r2
 80069a2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80069a6:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80069a8:	7ffb      	ldrb	r3, [r7, #31]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80069b0:	7fba      	ldrb	r2, [r7, #30]
 80069b2:	7f7b      	ldrb	r3, [r7, #29]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	4b28      	ldr	r3, [pc, #160]	; (8006a60 <SUBGRF_GetCFO+0xe8>)
 80069be:	fbb3 f3f2 	udiv	r3, r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069cc:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80069ce:	2301      	movs	r3, #1
 80069d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80069d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	fb02 f303 	mul.w	r3, r2, r3
 80069de:	2b07      	cmp	r3, #7
 80069e0:	d802      	bhi.n	80069e8 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 80069e2:	2302      	movs	r3, #2
 80069e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 80069e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	fb02 f303 	mul.w	r3, r2, r3
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d802      	bhi.n	80069fc <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 80069f6:	2304      	movs	r3, #4
 80069f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80069fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	fb02 f303 	mul.w	r3, r2, r3
 8006a06:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8006a08:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8006a0c:	f7ff fe28 	bl	8006660 <SUBGRF_ReadRegister>
 8006a10:	4603      	mov	r3, r0
 8006a12:	021b      	lsls	r3, r3, #8
 8006a14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006a18:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8006a1a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8006a1e:	f7ff fe1f 	bl	8006660 <SUBGRF_ReadRegister>
 8006a22:	4603      	mov	r3, r0
 8006a24:	461a      	mov	r2, r3
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8006a3c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8006a40:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	6a3a      	ldr	r2, [r7, #32]
 8006a48:	fb02 f303 	mul.w	r3, r2, r3
 8006a4c:	11da      	asrs	r2, r3, #7
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	601a      	str	r2, [r3, #0]
}
 8006a52:	bf00      	nop
 8006a54:	3728      	adds	r7, #40	; 0x28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	0c0a0804 	.word	0x0c0a0804
 8006a60:	01e84800 	.word	0x01e84800

08006a64 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8006a76:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8006a7c:	697b      	ldr	r3, [r7, #20]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr

08006a88 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	4603      	mov	r3, r0
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8006aa0:	697b      	ldr	r3, [r7, #20]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr

08006aac <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8006ab8:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr

08006ac6 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8006aca:	bf00      	nop
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8006ad6:	2300      	movs	r3, #0
#endif
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr

08006ae0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8006ae4:	2300      	movs	r3, #0
#endif
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bc80      	pop	{r7}
 8006aec:	4770      	bx	lr

08006aee <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	4603      	mov	r3, r0
 8006af6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr

08006b02 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b087      	sub	sp, #28
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8006b10:	f04f 33ff 	mov.w	r3, #4294967295
 8006b14:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8006b16:	697b      	ldr	r3, [r7, #20]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr

08006b22 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8006b22:	b480      	push	{r7}
 8006b24:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8006b26:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr

08006b32 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8006b32:	b480      	push	{r7}
 8006b34:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8006b36:	bf00      	nop
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr

08006b3e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8006b3e:	b480      	push	{r7}
 8006b40:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8006b42:	bf00      	nop
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bc80      	pop	{r7}
 8006b48:	4770      	bx	lr

08006b4a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	4603      	mov	r3, r0
 8006b52:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8006b62:	f7f9 fd82 	bl	800066a <SystemApp_Init>
  SubghzApp_Init();
 8006b66:	f000 f82f 	bl	8006bc8 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8006b6a:	bf00      	nop
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b0a2      	sub	sp, #136	; 0x88
 8006b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */
	uint8_t buf [128] = {0,};
 8006b76:	2300      	movs	r3, #0
 8006b78:	607b      	str	r3, [r7, #4]
 8006b7a:	f107 0308 	add.w	r3, r7, #8
 8006b7e:	227c      	movs	r2, #124	; 0x7c
 8006b80:	2100      	movs	r1, #0
 8006b82:	4618      	mov	r0, r3
 8006b84:	f001 f834 	bl	8007bf0 <memset>
	simple_sprintf((char *)buf, "Hello");
 8006b88:	1d3b      	adds	r3, r7, #4
 8006b8a:	490e      	ldr	r1, [pc, #56]	; (8006bc4 <MX_SubGHz_Phy_Process+0x54>)
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 ffed 	bl	8007b6c <simple_sprintf>
	uint8_t len = sizeof(buf);
 8006b92:	2380      	movs	r3, #128	; 0x80
 8006b94:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	UART1_print(buf, len);
 8006b98:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8006b9c:	1d3b      	adds	r3, r7, #4
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7f9 ffef 	bl	8000b84 <UART1_print>

	SubghzApp_TxBux(buf, len);
 8006ba6:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8006baa:	1d3b      	adds	r3, r7, #4
 8006bac:	4611      	mov	r1, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 f830 	bl	8006c14 <SubghzApp_TxBux>

	HAL_Delay(500);
 8006bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bb8:	f7f9 fd64 	bl	8000684 <HAL_Delay>
  /* USER CODE END MX_SubGHz_Phy_Process_1 */
}
 8006bbc:	bf00      	nop
 8006bbe:	3788      	adds	r7, #136	; 0x88
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	080085b4 	.word	0x080085b4

08006bc8 <SubghzApp_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <SubghzApp_Init+0x30>)
 8006bce:	4a0b      	ldr	r2, [pc, #44]	; (8006bfc <SubghzApp_Init+0x34>)
 8006bd0:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <SubghzApp_Init+0x30>)
 8006bd4:	4a0a      	ldr	r2, [pc, #40]	; (8006c00 <SubghzApp_Init+0x38>)
 8006bd6:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8006bd8:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <SubghzApp_Init+0x30>)
 8006bda:	4a0a      	ldr	r2, [pc, #40]	; (8006c04 <SubghzApp_Init+0x3c>)
 8006bdc:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8006bde:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <SubghzApp_Init+0x30>)
 8006be0:	4a09      	ldr	r2, [pc, #36]	; (8006c08 <SubghzApp_Init+0x40>)
 8006be2:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8006be4:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <SubghzApp_Init+0x30>)
 8006be6:	4a09      	ldr	r2, [pc, #36]	; (8006c0c <SubghzApp_Init+0x44>)
 8006be8:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8006bea:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <SubghzApp_Init+0x48>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4802      	ldr	r0, [pc, #8]	; (8006bf8 <SubghzApp_Init+0x30>)
 8006bf0:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 8006bf2:	bf00      	nop
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	200001a8 	.word	0x200001a8
 8006bfc:	08006c55 	.word	0x08006c55
 8006c00:	08006c61 	.word	0x08006c61
 8006c04:	08006c85 	.word	0x08006c85
 8006c08:	08006c91 	.word	0x08006c91
 8006c0c:	08006c9d 	.word	0x08006c9d
 8006c10:	080086b8 	.word	0x080086b8

08006c14 <SubghzApp_TxBux>:

/* USER CODE BEGIN EF */
void SubghzApp_TxBux(uint8_t * buf, uint8_t len) {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
	Radio.SetChannel(RF_FREQUENCY);
 8006c20:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <SubghzApp_TxBux+0x38>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	480a      	ldr	r0, [pc, #40]	; (8006c50 <SubghzApp_TxBux+0x3c>)
 8006c26:	4798      	blx	r3
	/* Add delay between TX and RX =
	 time Busy_signal is ON in RX opening window */
	HAL_Delay(Radio.GetWakeupTime() + TCXO_WORKAROUND_TIME_MARGIN);
 8006c28:	4b08      	ldr	r3, [pc, #32]	; (8006c4c <SubghzApp_TxBux+0x38>)
 8006c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2c:	4798      	blx	r3
 8006c2e:	4603      	mov	r3, r0
 8006c30:	3332      	adds	r3, #50	; 0x32
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7f9 fd26 	bl	8000684 <HAL_Delay>

	Radio.Send(buf, len);
 8006c38:	4b04      	ldr	r3, [pc, #16]	; (8006c4c <SubghzApp_TxBux+0x38>)
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3c:	78fa      	ldrb	r2, [r7, #3]
 8006c3e:	4611      	mov	r1, r2
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	4798      	blx	r3
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	080086b8 	.word	0x080086b8
 8006c50:	33bca100 	.word	0x33bca100

08006c54 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8006c58:	bf00      	nop
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bc80      	pop	{r7}
 8006c5e:	4770      	bx	lr

08006c60 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	4608      	mov	r0, r1
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4603      	mov	r3, r0
 8006c70:	817b      	strh	r3, [r7, #10]
 8006c72:	460b      	mov	r3, r1
 8006c74:	813b      	strh	r3, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 8006c7a:	bf00      	nop
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bc80      	pop	{r7}
 8006c82:	4770      	bx	lr

08006c84 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8006c88:	bf00      	nop
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr

08006c90 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 8006c94:	bf00      	nop
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr

08006c9c <OnRxError>:

static void OnRxError(void)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 8006ca0:	bf00      	nop
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr

08006ca8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8006cb2:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr

08006cbe <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	71fb      	strb	r3, [r7, #7]
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr

08006cd8 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 8006ce2:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr

08006cee <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8006cf8:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr

08006d04 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 8006d0e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr

08006d1a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b085      	sub	sp, #20
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	70fb      	strb	r3, [r7, #3]
 8006d26:	4613      	mov	r3, r2
 8006d28:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8006d2e:	e004      	b.n	8006d3a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	60fa      	str	r2, [r7, #12]
 8006d36:	78fa      	ldrb	r2, [r7, #3]
 8006d38:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8006d3a:	883b      	ldrh	r3, [r7, #0]
 8006d3c:	1e5a      	subs	r2, r3, #1
 8006d3e:	803a      	strh	r2, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1f5      	bne.n	8006d30 <UTIL_MEM_set_8+0x16>
  }
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bc80      	pop	{r7}
 8006d4e:	4770      	bx	lr

08006d50 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d023      	beq.n	8006dae <UTIL_TIMER_Create+0x5e>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d020      	beq.n	8006dae <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8006d72:	4b11      	ldr	r3, [pc, #68]	; (8006db8 <UTIL_TIMER_Create+0x68>)
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	68b8      	ldr	r0, [r7, #8]
 8006d78:	4798      	blx	r3
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	79fa      	ldrb	r2, [r7, #7]
 8006da2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	e000      	b.n	8006db0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8006dae:	2301      	movs	r3, #1
  }
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	08008664 	.word	0x08008664

08006dbc <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08a      	sub	sp, #40	; 0x28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d056      	beq.n	8006e7e <UTIL_TIMER_Start+0xc2>
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f929 	bl	8007028 <TimerExists>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	f083 0301 	eor.w	r3, r3, #1
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d04d      	beq.n	8006e7e <UTIL_TIMER_Start+0xc2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	7a5b      	ldrb	r3, [r3, #9]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d149      	bne.n	8006e7e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dea:	f3ef 8310 	mrs	r3, PRIMASK
 8006dee:	613b      	str	r3, [r7, #16]
  return(result);
 8006df0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8006df2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006df4:	b672      	cpsid	i
}
 8006df6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8006dfe:	4b24      	ldr	r3, [pc, #144]	; (8006e90 <UTIL_TIMER_Start+0xd4>)
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	4798      	blx	r3
 8006e04:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8006e06:	6a3a      	ldr	r2, [r7, #32]
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d201      	bcs.n	8006e12 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a3a      	ldr	r2, [r7, #32]
 8006e16:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8006e2a:	4b1a      	ldr	r3, [pc, #104]	; (8006e94 <UTIL_TIMER_Start+0xd8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8006e32:	4b17      	ldr	r3, [pc, #92]	; (8006e90 <UTIL_TIMER_Start+0xd4>)
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f96b 	bl	8007114 <TimerInsertNewHeadTimer>
 8006e3e:	e017      	b.n	8006e70 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8006e40:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <UTIL_TIMER_Start+0xd4>)
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	4798      	blx	r3
 8006e46:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	441a      	add	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <UTIL_TIMER_Start+0xd8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d203      	bcs.n	8006e6a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f956 	bl	8007114 <TimerInsertNewHeadTimer>
 8006e68:	e002      	b.n	8006e70 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f922 	bl	80070b4 <TimerInsertTimer>
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f383 8810 	msr	PRIMASK, r3
}
 8006e7a:	bf00      	nop
  {
 8006e7c:	e002      	b.n	8006e84 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8006e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3728      	adds	r7, #40	; 0x28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	08008664 	.word	0x08008664
 8006e94:	200001c4 	.word	0x200001c4

08006e98 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d05b      	beq.n	8006f62 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8006eae:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8006eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006eb4:	b672      	cpsid	i
}
 8006eb6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8006eb8:	4b2d      	ldr	r3, [pc, #180]	; (8006f70 <UTIL_TIMER_Stop+0xd8>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8006ebe:	4b2c      	ldr	r3, [pc, #176]	; (8006f70 <UTIL_TIMER_Stop+0xd8>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8006eca:	4b29      	ldr	r3, [pc, #164]	; (8006f70 <UTIL_TIMER_Stop+0xd8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d041      	beq.n	8006f56 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8006ed8:	4b25      	ldr	r3, [pc, #148]	; (8006f70 <UTIL_TIMER_Stop+0xd8>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d134      	bne.n	8006f4c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8006ee2:	4b23      	ldr	r3, [pc, #140]	; (8006f70 <UTIL_TIMER_Stop+0xd8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8006eea:	4b21      	ldr	r3, [pc, #132]	; (8006f70 <UTIL_TIMER_Stop+0xd8>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8006ef4:	4b1e      	ldr	r3, [pc, #120]	; (8006f70 <UTIL_TIMER_Stop+0xd8>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	4a1d      	ldr	r2, [pc, #116]	; (8006f70 <UTIL_TIMER_Stop+0xd8>)
 8006efc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8006efe:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <UTIL_TIMER_Stop+0xd8>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 f8ac 	bl	8007060 <TimerSetTimeout>
 8006f08:	e023      	b.n	8006f52 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8006f0a:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <UTIL_TIMER_Stop+0xdc>)
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	4798      	blx	r3
            TimerListHead = NULL;
 8006f10:	4b17      	ldr	r3, [pc, #92]	; (8006f70 <UTIL_TIMER_Stop+0xd8>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e01c      	b.n	8006f52 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d110      	bne.n	8006f42 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d006      	beq.n	8006f36 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8006f34:	e00d      	b.n	8006f52 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	615a      	str	r2, [r3, #20]
            break;
 8006f40:	e007      	b.n	8006f52 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e2      	bne.n	8006f18 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	77fb      	strb	r3, [r7, #31]
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f383 8810 	msr	PRIMASK, r3
}
 8006f60:	e001      	b.n	8006f66 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8006f62:	2301      	movs	r3, #1
 8006f64:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8006f66:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3720      	adds	r7, #32
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	200001c4 	.word	0x200001c4
 8006f74:	08008664 	.word	0x08008664

08006f78 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d102      	bne.n	8006f92 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	73fb      	strb	r3, [r7, #15]
 8006f90:	e014      	b.n	8006fbc <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <UTIL_TIMER_SetPeriod+0x50>)
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	6838      	ldr	r0, [r7, #0]
 8006f98:	4798      	blx	r3
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f841 	bl	8007028 <TimerExists>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff ff73 	bl	8006e98 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff ff02 	bl	8006dbc <UTIL_TIMER_Start>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	08008664 	.word	0x08008664

08006fcc <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8006fd2:	4b06      	ldr	r3, [pc, #24]	; (8006fec <UTIL_TIMER_GetCurrentTime+0x20>)
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	4798      	blx	r3
 8006fd8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8006fda:	4b04      	ldr	r3, [pc, #16]	; (8006fec <UTIL_TIMER_GetCurrentTime+0x20>)
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
 8006fe2:	4603      	mov	r3, r0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	08008664 	.word	0x08008664

08006ff0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <UTIL_TIMER_GetElapsedTime+0x34>)
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	4798      	blx	r3
 8006ffe:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8007000:	4b08      	ldr	r3, [pc, #32]	; (8007024 <UTIL_TIMER_GetElapsedTime+0x34>)
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	4798      	blx	r3
 8007008:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800700a:	4b06      	ldr	r3, [pc, #24]	; (8007024 <UTIL_TIMER_GetElapsedTime+0x34>)
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	68f9      	ldr	r1, [r7, #12]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	1a8a      	subs	r2, r1, r2
 8007014:	4610      	mov	r0, r2
 8007016:	4798      	blx	r3
 8007018:	4603      	mov	r3, r0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	08008664 	.word	0x08008664

08007028 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <TimerExists+0x34>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8007036:	e008      	b.n	800704a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d101      	bne.n	8007044 <TimerExists+0x1c>
    {
      return true;
 8007040:	2301      	movs	r3, #1
 8007042:	e006      	b.n	8007052 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1f3      	bne.n	8007038 <TimerExists+0x10>
  }
  return false;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	bc80      	pop	{r7}
 800705a:	4770      	bx	lr
 800705c:	200001c4 	.word	0x200001c4

08007060 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8007060:	b590      	push	{r4, r7, lr}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8007068:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <TimerSetTimeout+0x50>)
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	4798      	blx	r3
 800706e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681c      	ldr	r4, [r3, #0]
 800707a:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <TimerSetTimeout+0x50>)
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	4798      	blx	r3
 8007080:	4602      	mov	r2, r0
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4413      	add	r3, r2
 8007086:	429c      	cmp	r4, r3
 8007088:	d207      	bcs.n	800709a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800708a:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <TimerSetTimeout+0x50>)
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	4798      	blx	r3
 8007090:	4602      	mov	r2, r0
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	441a      	add	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800709a:	4b05      	ldr	r3, [pc, #20]	; (80070b0 <TimerSetTimeout+0x50>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6812      	ldr	r2, [r2, #0]
 80070a2:	4610      	mov	r0, r2
 80070a4:	4798      	blx	r3
}
 80070a6:	bf00      	nop
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd90      	pop	{r4, r7, pc}
 80070ae:	bf00      	nop
 80070b0:	08008664 	.word	0x08008664

080070b4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80070bc:	4b14      	ldr	r3, [pc, #80]	; (8007110 <TimerInsertTimer+0x5c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80070c2:	4b13      	ldr	r3, [pc, #76]	; (8007110 <TimerInsertTimer+0x5c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 80070ca:	e012      	b.n	80070f2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d905      	bls.n	80070e4 <TimerInsertTimer+0x30>
    {
        cur = next;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	60bb      	str	r3, [r7, #8]
 80070e2:	e006      	b.n	80070f2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	615a      	str	r2, [r3, #20]
        return;
 80070f0:	e009      	b.n	8007106 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e8      	bne.n	80070cc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	615a      	str	r2, [r3, #20]
}
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	bc80      	pop	{r7}
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	200001c4 	.word	0x200001c4

08007114 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800711c:	4b0b      	ldr	r3, [pc, #44]	; (800714c <TimerInsertNewHeadTimer+0x38>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8007134:	4a05      	ldr	r2, [pc, #20]	; (800714c <TimerInsertNewHeadTimer+0x38>)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800713a:	4b04      	ldr	r3, [pc, #16]	; (800714c <TimerInsertNewHeadTimer+0x38>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff ff8e 	bl	8007060 <TimerSetTimeout>
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	200001c4 	.word	0x200001c4

08007150 <simple_outputchar>:
#include <stdarg.h>

int putchar(int c);

static void simple_outputchar(char **str, char c)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
	if (str) {
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d009      	beq.n	8007176 <simple_outputchar+0x26>
		**str = c;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	701a      	strb	r2, [r3, #0]
		++(*str);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	601a      	str	r2, [r3, #0]
	} else {
		putchar(c);
	}
}
 8007174:	e003      	b.n	800717e <simple_outputchar+0x2e>
		putchar(c);
 8007176:	78fb      	ldrb	r3, [r7, #3]
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fd41 	bl	8007c00 <putchar>
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <prints>:
	PAD_ZERO	= 1,
	PAD_RIGHT	= 2,
};

static int prints(char **out, const char *string, int width, int flags)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b088      	sub	sp, #32
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	603b      	str	r3, [r7, #0]
	int pc = 0, padchar = ' ';
 8007194:	2300      	movs	r3, #0
 8007196:	61fb      	str	r3, [r7, #28]
 8007198:	2320      	movs	r3, #32
 800719a:	61bb      	str	r3, [r7, #24]

	if (width > 0) {
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	dd20      	ble.n	80071e4 <prints+0x5e>
		int len = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	617b      	str	r3, [r7, #20]
		const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	613b      	str	r3, [r7, #16]
 80071aa:	e005      	b.n	80071b8 <prints+0x32>
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	3301      	adds	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	3301      	adds	r3, #1
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1f5      	bne.n	80071ac <prints+0x26>
		if (len >= width) width = 0;
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	db02      	blt.n	80071ce <prints+0x48>
 80071c8:	2300      	movs	r3, #0
 80071ca:	607b      	str	r3, [r7, #4]
 80071cc:	e003      	b.n	80071d6 <prints+0x50>
		else width -= len;
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	607b      	str	r3, [r7, #4]
		if (flags & PAD_ZERO)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <prints+0x5e>
			padchar = '0';
 80071e0:	2330      	movs	r3, #48	; 0x30
 80071e2:	61bb      	str	r3, [r7, #24]
	}
	if (!(flags & PAD_RIGHT)) {
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d11c      	bne.n	8007228 <prints+0xa2>
		for ( ; width > 0; --width) {
 80071ee:	e00b      	b.n	8007208 <prints+0x82>
			simple_outputchar(out, padchar);
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	4619      	mov	r1, r3
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f7ff ffaa 	bl	8007150 <simple_outputchar>
			++pc;
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	3301      	adds	r3, #1
 8007200:	61fb      	str	r3, [r7, #28]
		for ( ; width > 0; --width) {
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	3b01      	subs	r3, #1
 8007206:	607b      	str	r3, [r7, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	dcf0      	bgt.n	80071f0 <prints+0x6a>
		}
	}
	for ( ; *string ; ++string) {
 800720e:	e00b      	b.n	8007228 <prints+0xa2>
		simple_outputchar(out, *string);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	4619      	mov	r1, r3
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff ff9a 	bl	8007150 <simple_outputchar>
		++pc;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	3301      	adds	r3, #1
 8007220:	61fb      	str	r3, [r7, #28]
	for ( ; *string ; ++string) {
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	3301      	adds	r3, #1
 8007226:	60bb      	str	r3, [r7, #8]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1ef      	bne.n	8007210 <prints+0x8a>
	}
	for ( ; width > 0; --width) {
 8007230:	e00b      	b.n	800724a <prints+0xc4>
		simple_outputchar(out, padchar);
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	b2db      	uxtb	r3, r3
 8007236:	4619      	mov	r1, r3
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff ff89 	bl	8007150 <simple_outputchar>
		++pc;
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	3301      	adds	r3, #1
 8007242:	61fb      	str	r3, [r7, #28]
	for ( ; width > 0; --width) {
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3b01      	subs	r3, #1
 8007248:	607b      	str	r3, [r7, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	dcf0      	bgt.n	8007232 <prints+0xac>
	}

	return pc;
 8007250:	69fb      	ldr	r3, [r7, #28]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <simple_outputi>:

#define PRINT_BUF_LEN 64

static int simple_outputi(char **out, long long i, int base, int sign, int width, int flags, int letbase)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b09a      	sub	sp, #104	; 0x68
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	e9c7 2300 	strd	r2, r3, [r7]
	char print_buf[PRINT_BUF_LEN];
	char *s;
	int t, neg = 0, pc = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	65fb      	str	r3, [r7, #92]	; 0x5c
 800726a:	2300      	movs	r3, #0
 800726c:	65bb      	str	r3, [r7, #88]	; 0x58
	unsigned long long u = i;
 800726e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007272:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	if (i == 0) {
 8007276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800727a:	4313      	orrs	r3, r2
 800727c:	d10c      	bne.n	8007298 <simple_outputi+0x3e>
		print_buf[0] = '0';
 800727e:	2330      	movs	r3, #48	; 0x30
 8007280:	743b      	strb	r3, [r7, #16]
		print_buf[1] = '\0';
 8007282:	2300      	movs	r3, #0
 8007284:	747b      	strb	r3, [r7, #17]
		return prints(out, print_buf, width, flags);
 8007286:	f107 0110 	add.w	r1, r7, #16
 800728a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800728c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff ff79 	bl	8007186 <prints>
 8007294:	4603      	mov	r3, r0
 8007296:	e06d      	b.n	8007374 <simple_outputi+0x11a>
	}

	if (sign && base == 10 && i < 0) {
 8007298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800729a:	2b00      	cmp	r3, #0
 800729c:	d011      	beq.n	80072c2 <simple_outputi+0x68>
 800729e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072a0:	2b0a      	cmp	r3, #10
 80072a2:	d10e      	bne.n	80072c2 <simple_outputi+0x68>
 80072a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	f173 0300 	sbcs.w	r3, r3, #0
 80072ae:	da08      	bge.n	80072c2 <simple_outputi+0x68>
		neg = 1;
 80072b0:	2301      	movs	r3, #1
 80072b2:	65fb      	str	r3, [r7, #92]	; 0x5c
		u = -i;
 80072b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b8:	4252      	negs	r2, r2
 80072ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80072be:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}

	s = print_buf + PRINT_BUF_LEN-1;
 80072c2:	f107 0310 	add.w	r3, r7, #16
 80072c6:	333f      	adds	r3, #63	; 0x3f
 80072c8:	667b      	str	r3, [r7, #100]	; 0x64
	*s = '\0';
 80072ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072cc:	2200      	movs	r2, #0
 80072ce:	701a      	strb	r2, [r3, #0]

	while (u) {
 80072d0:	e027      	b.n	8007322 <simple_outputi+0xc8>
		t = u % base;
 80072d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072d4:	461a      	mov	r2, r3
 80072d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80072da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072de:	f7f8 ff4b 	bl	8000178 <__aeabi_uldivmod>
 80072e2:	4613      	mov	r3, r2
 80072e4:	663b      	str	r3, [r7, #96]	; 0x60
		if( t >= 10 )
 80072e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e8:	2b09      	cmp	r3, #9
 80072ea:	dd05      	ble.n	80072f8 <simple_outputi+0x9e>
			t += letbase - '0' - 10;
 80072ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072f0:	3b3a      	subs	r3, #58	; 0x3a
 80072f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072f4:	4413      	add	r3, r2
 80072f6:	663b      	str	r3, [r7, #96]	; 0x60
		*--s = t + '0';
 80072f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80072fe:	3a01      	subs	r2, #1
 8007300:	667a      	str	r2, [r7, #100]	; 0x64
 8007302:	3330      	adds	r3, #48	; 0x30
 8007304:	b2da      	uxtb	r2, r3
 8007306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007308:	701a      	strb	r2, [r3, #0]
		u /= base;
 800730a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800730c:	461a      	mov	r2, r3
 800730e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007312:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007316:	f7f8 ff2f 	bl	8000178 <__aeabi_uldivmod>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	while (u) {
 8007322:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007326:	4313      	orrs	r3, r2
 8007328:	d1d3      	bne.n	80072d2 <simple_outputi+0x78>
	}

	if (neg) {
 800732a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d018      	beq.n	8007362 <simple_outputi+0x108>
		if( width && (flags & PAD_ZERO) ) {
 8007330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00f      	beq.n	8007356 <simple_outputi+0xfc>
 8007336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <simple_outputi+0xfc>
			simple_outputchar (out, '-');
 8007340:	212d      	movs	r1, #45	; 0x2d
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f7ff ff04 	bl	8007150 <simple_outputchar>
			++pc;
 8007348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800734a:	3301      	adds	r3, #1
 800734c:	65bb      	str	r3, [r7, #88]	; 0x58
			--width;
 800734e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007350:	3b01      	subs	r3, #1
 8007352:	67bb      	str	r3, [r7, #120]	; 0x78
 8007354:	e005      	b.n	8007362 <simple_outputi+0x108>
		}
		else {
			*--s = '-';
 8007356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007358:	3b01      	subs	r3, #1
 800735a:	667b      	str	r3, [r7, #100]	; 0x64
 800735c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800735e:	222d      	movs	r2, #45	; 0x2d
 8007360:	701a      	strb	r2, [r3, #0]
		}
	}

	return pc + prints (out, s, width, flags);
 8007362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007364:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007366:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f7ff ff0c 	bl	8007186 <prints>
 800736e:	4602      	mov	r2, r0
 8007370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007372:	4413      	add	r3, r2
}
 8007374:	4618      	mov	r0, r3
 8007376:	3768      	adds	r7, #104	; 0x68
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <simple_vsprintf>:


static int simple_vsprintf(char **out, char *format, va_list ap)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b090      	sub	sp, #64	; 0x40
 8007380:	af06      	add	r7, sp, #24
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
	int width, flags;
	int pc = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	61fb      	str	r3, [r7, #28]
		signed char hhi;
		unsigned char hhu;
		void *p;
	} u;

	for (; *format != 0; ++format) {
 800738c:	e3da      	b.n	8007b44 <simple_vsprintf+0x7c8>
		if (*format == '%') {
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b25      	cmp	r3, #37	; 0x25
 8007394:	f040 83c5 	bne.w	8007b22 <simple_vsprintf+0x7a6>
			++format;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	3301      	adds	r3, #1
 800739c:	60bb      	str	r3, [r7, #8]
			width = flags = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	623b      	str	r3, [r7, #32]
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
			if (*format == '\0')
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 83d0 	beq.w	8007b50 <simple_vsprintf+0x7d4>
				break;
			if (*format == '%')
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b25      	cmp	r3, #37	; 0x25
 80073b6:	f000 83b6 	beq.w	8007b26 <simple_vsprintf+0x7aa>
				goto out;
			if (*format == '-') {
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b2d      	cmp	r3, #45	; 0x2d
 80073c0:	d10c      	bne.n	80073dc <simple_vsprintf+0x60>
				++format;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	3301      	adds	r3, #1
 80073c6:	60bb      	str	r3, [r7, #8]
				flags = PAD_RIGHT;
 80073c8:	2302      	movs	r3, #2
 80073ca:	623b      	str	r3, [r7, #32]
			}
			while (*format == '0') {
 80073cc:	e006      	b.n	80073dc <simple_vsprintf+0x60>
				++format;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	3301      	adds	r3, #1
 80073d2:	60bb      	str	r3, [r7, #8]
				flags |= PAD_ZERO;
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	f043 0301 	orr.w	r3, r3, #1
 80073da:	623b      	str	r3, [r7, #32]
			while (*format == '0') {
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b30      	cmp	r3, #48	; 0x30
 80073e2:	d0f4      	beq.n	80073ce <simple_vsprintf+0x52>
			}
			if (*format == '*') {
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b2a      	cmp	r3, #42	; 0x2a
 80073ea:	d117      	bne.n	800741c <simple_vsprintf+0xa0>
				width = va_arg(ap, int);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	1d1a      	adds	r2, r3, #4
 80073f0:	607a      	str	r2, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
				format++;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	3301      	adds	r3, #1
 80073fa:	60bb      	str	r3, [r7, #8]
 80073fc:	e016      	b.n	800742c <simple_vsprintf+0xb0>
			} else {
				for ( ; *format >= '0' && *format <= '9'; ++format) {
					width *= 10;
 80073fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	627b      	str	r3, [r7, #36]	; 0x24
					width += *format - '0';
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	3b30      	subs	r3, #48	; 0x30
 8007410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007412:	4413      	add	r3, r2
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
				for ( ; *format >= '0' && *format <= '9'; ++format) {
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	3301      	adds	r3, #1
 800741a:	60bb      	str	r3, [r7, #8]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b2f      	cmp	r3, #47	; 0x2f
 8007422:	d903      	bls.n	800742c <simple_vsprintf+0xb0>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b39      	cmp	r3, #57	; 0x39
 800742a:	d9e8      	bls.n	80073fe <simple_vsprintf+0x82>
				}
			}
			switch (*format) {
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	3b58      	subs	r3, #88	; 0x58
 8007432:	2b20      	cmp	r3, #32
 8007434:	f200 8382 	bhi.w	8007b3c <simple_vsprintf+0x7c0>
 8007438:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <simple_vsprintf+0xc4>)
 800743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743e:	bf00      	nop
 8007440:	08007567 	.word	0x08007567
 8007444:	08007b3d 	.word	0x08007b3d
 8007448:	08007b3d 	.word	0x08007b3d
 800744c:	08007b3d 	.word	0x08007b3d
 8007450:	08007b3d 	.word	0x08007b3d
 8007454:	08007b3d 	.word	0x08007b3d
 8007458:	08007b3d 	.word	0x08007b3d
 800745c:	08007b3d 	.word	0x08007b3d
 8007460:	08007b3d 	.word	0x08007b3d
 8007464:	08007b3d 	.word	0x08007b3d
 8007468:	08007b3d 	.word	0x08007b3d
 800746c:	0800759d 	.word	0x0800759d
 8007470:	080074c5 	.word	0x080074c5
 8007474:	08007b3d 	.word	0x08007b3d
 8007478:	08007b3d 	.word	0x08007b3d
 800747c:	08007b3d 	.word	0x08007b3d
 8007480:	080078af 	.word	0x080078af
 8007484:	08007b3d 	.word	0x08007b3d
 8007488:	08007b3d 	.word	0x08007b3d
 800748c:	08007b3d 	.word	0x08007b3d
 8007490:	080075f3 	.word	0x080075f3
 8007494:	08007b3d 	.word	0x08007b3d
 8007498:	08007b3d 	.word	0x08007b3d
 800749c:	08007b3d 	.word	0x08007b3d
 80074a0:	08007b3d 	.word	0x08007b3d
 80074a4:	08007b3d 	.word	0x08007b3d
 80074a8:	08007b3d 	.word	0x08007b3d
 80074ac:	080075c9 	.word	0x080075c9
 80074b0:	08007b3d 	.word	0x08007b3d
 80074b4:	080074fb 	.word	0x080074fb
 80074b8:	08007b3d 	.word	0x08007b3d
 80074bc:	08007b3d 	.word	0x08007b3d
 80074c0:	08007531 	.word	0x08007531
				case('d'):
					u.i = va_arg(ap, int);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	1d1a      	adds	r2, r3, #4
 80074c8:	607a      	str	r2, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	613b      	str	r3, [r7, #16]
					pc += simple_outputi(out, u.i, 10, 1, width, flags, 'a');
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	461a      	mov	r2, r3
 80074d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80074d6:	2161      	movs	r1, #97	; 0x61
 80074d8:	9104      	str	r1, [sp, #16]
 80074da:	6a39      	ldr	r1, [r7, #32]
 80074dc:	9103      	str	r1, [sp, #12]
 80074de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074e0:	9102      	str	r1, [sp, #8]
 80074e2:	2101      	movs	r1, #1
 80074e4:	9101      	str	r1, [sp, #4]
 80074e6:	210a      	movs	r1, #10
 80074e8:	9100      	str	r1, [sp, #0]
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f7ff feb5 	bl	800725a <simple_outputi>
 80074f0:	4602      	mov	r2, r0
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	61fb      	str	r3, [r7, #28]
					break;
 80074f8:	e321      	b.n	8007b3e <simple_vsprintf+0x7c2>

				case('u'):
					u.u = va_arg(ap, unsigned int);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	1d1a      	adds	r2, r3, #4
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	613b      	str	r3, [r7, #16]
					pc += simple_outputi(out, u.u, 10, 0, width, flags, 'a');
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	461a      	mov	r2, r3
 8007508:	f04f 0300 	mov.w	r3, #0
 800750c:	2161      	movs	r1, #97	; 0x61
 800750e:	9104      	str	r1, [sp, #16]
 8007510:	6a39      	ldr	r1, [r7, #32]
 8007512:	9103      	str	r1, [sp, #12]
 8007514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007516:	9102      	str	r1, [sp, #8]
 8007518:	2100      	movs	r1, #0
 800751a:	9101      	str	r1, [sp, #4]
 800751c:	210a      	movs	r1, #10
 800751e:	9100      	str	r1, [sp, #0]
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f7ff fe9a 	bl	800725a <simple_outputi>
 8007526:	4602      	mov	r2, r0
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	4413      	add	r3, r2
 800752c:	61fb      	str	r3, [r7, #28]
					break;
 800752e:	e306      	b.n	8007b3e <simple_vsprintf+0x7c2>

				case('x'):
					u.u = va_arg(ap, unsigned int);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	1d1a      	adds	r2, r3, #4
 8007534:	607a      	str	r2, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	613b      	str	r3, [r7, #16]
					pc += simple_outputi(out, u.u, 16, 0, width, flags, 'a');
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	461a      	mov	r2, r3
 800753e:	f04f 0300 	mov.w	r3, #0
 8007542:	2161      	movs	r1, #97	; 0x61
 8007544:	9104      	str	r1, [sp, #16]
 8007546:	6a39      	ldr	r1, [r7, #32]
 8007548:	9103      	str	r1, [sp, #12]
 800754a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800754c:	9102      	str	r1, [sp, #8]
 800754e:	2100      	movs	r1, #0
 8007550:	9101      	str	r1, [sp, #4]
 8007552:	2110      	movs	r1, #16
 8007554:	9100      	str	r1, [sp, #0]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff fe7f 	bl	800725a <simple_outputi>
 800755c:	4602      	mov	r2, r0
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	4413      	add	r3, r2
 8007562:	61fb      	str	r3, [r7, #28]
					break;
 8007564:	e2eb      	b.n	8007b3e <simple_vsprintf+0x7c2>

				case('X'):
					u.u = va_arg(ap, unsigned int);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	1d1a      	adds	r2, r3, #4
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	613b      	str	r3, [r7, #16]
					pc += simple_outputi(out, u.u, 16, 0, width, flags, 'A');
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	461a      	mov	r2, r3
 8007574:	f04f 0300 	mov.w	r3, #0
 8007578:	2141      	movs	r1, #65	; 0x41
 800757a:	9104      	str	r1, [sp, #16]
 800757c:	6a39      	ldr	r1, [r7, #32]
 800757e:	9103      	str	r1, [sp, #12]
 8007580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007582:	9102      	str	r1, [sp, #8]
 8007584:	2100      	movs	r1, #0
 8007586:	9101      	str	r1, [sp, #4]
 8007588:	2110      	movs	r1, #16
 800758a:	9100      	str	r1, [sp, #0]
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff fe64 	bl	800725a <simple_outputi>
 8007592:	4602      	mov	r2, r0
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	61fb      	str	r3, [r7, #28]
					break;
 800759a:	e2d0      	b.n	8007b3e <simple_vsprintf+0x7c2>

				case('c'):
					u.c = va_arg(ap, int);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	1d1a      	adds	r2, r3, #4
 80075a0:	607a      	str	r2, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	743b      	strb	r3, [r7, #16]
					scr[0] = u.c;
 80075a8:	7c3b      	ldrb	r3, [r7, #16]
 80075aa:	763b      	strb	r3, [r7, #24]
					scr[1] = '\0';
 80075ac:	2300      	movs	r3, #0
 80075ae:	767b      	strb	r3, [r7, #25]
					pc += prints(out, scr, width, flags);
 80075b0:	f107 0118 	add.w	r1, r7, #24
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f7ff fde4 	bl	8007186 <prints>
 80075be:	4602      	mov	r2, r0
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	4413      	add	r3, r2
 80075c4:	61fb      	str	r3, [r7, #28]
					break;
 80075c6:	e2ba      	b.n	8007b3e <simple_vsprintf+0x7c2>

				case('s'):
					u.s = va_arg(ap, char *);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	1d1a      	adds	r2, r3, #4
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	613b      	str	r3, [r7, #16]
					pc += prints(out, u.s ? u.s : "(null)", width, flags);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <simple_vsprintf+0x260>
 80075d8:	6939      	ldr	r1, [r7, #16]
 80075da:	e000      	b.n	80075de <simple_vsprintf+0x262>
 80075dc:	499f      	ldr	r1, [pc, #636]	; (800785c <simple_vsprintf+0x4e0>)
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff fdcf 	bl	8007186 <prints>
 80075e8:	4602      	mov	r2, r0
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	4413      	add	r3, r2
 80075ee:	61fb      	str	r3, [r7, #28]
					break;
 80075f0:	e2a5      	b.n	8007b3e <simple_vsprintf+0x7c2>
				case('l'):
					++format;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	3301      	adds	r3, #1
 80075f6:	60bb      	str	r3, [r7, #8]
					switch (*format) {
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	3b58      	subs	r3, #88	; 0x58
 80075fe:	2b20      	cmp	r3, #32
 8007600:	f200 8153 	bhi.w	80078aa <simple_vsprintf+0x52e>
 8007604:	a201      	add	r2, pc, #4	; (adr r2, 800760c <simple_vsprintf+0x290>)
 8007606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760a:	bf00      	nop
 800760c:	08007733 	.word	0x08007733
 8007610:	080078ab 	.word	0x080078ab
 8007614:	080078ab 	.word	0x080078ab
 8007618:	080078ab 	.word	0x080078ab
 800761c:	080078ab 	.word	0x080078ab
 8007620:	080078ab 	.word	0x080078ab
 8007624:	080078ab 	.word	0x080078ab
 8007628:	080078ab 	.word	0x080078ab
 800762c:	080078ab 	.word	0x080078ab
 8007630:	080078ab 	.word	0x080078ab
 8007634:	080078ab 	.word	0x080078ab
 8007638:	080078ab 	.word	0x080078ab
 800763c:	08007691 	.word	0x08007691
 8007640:	080078ab 	.word	0x080078ab
 8007644:	080078ab 	.word	0x080078ab
 8007648:	080078ab 	.word	0x080078ab
 800764c:	080078ab 	.word	0x080078ab
 8007650:	080078ab 	.word	0x080078ab
 8007654:	080078ab 	.word	0x080078ab
 8007658:	080078ab 	.word	0x080078ab
 800765c:	08007769 	.word	0x08007769
 8007660:	080078ab 	.word	0x080078ab
 8007664:	080078ab 	.word	0x080078ab
 8007668:	080078ab 	.word	0x080078ab
 800766c:	080078ab 	.word	0x080078ab
 8007670:	080078ab 	.word	0x080078ab
 8007674:	080078ab 	.word	0x080078ab
 8007678:	080078ab 	.word	0x080078ab
 800767c:	080078ab 	.word	0x080078ab
 8007680:	080076c7 	.word	0x080076c7
 8007684:	080078ab 	.word	0x080078ab
 8007688:	080078ab 	.word	0x080078ab
 800768c:	080076fd 	.word	0x080076fd
						case('d'):
							u.li = va_arg(ap, long);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	1d1a      	adds	r2, r3, #4
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	613b      	str	r3, [r7, #16]
							pc += simple_outputi(out, u.li, 10, 1, width, flags, 'a');
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	461a      	mov	r2, r3
 800769e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80076a2:	2161      	movs	r1, #97	; 0x61
 80076a4:	9104      	str	r1, [sp, #16]
 80076a6:	6a39      	ldr	r1, [r7, #32]
 80076a8:	9103      	str	r1, [sp, #12]
 80076aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ac:	9102      	str	r1, [sp, #8]
 80076ae:	2101      	movs	r1, #1
 80076b0:	9101      	str	r1, [sp, #4]
 80076b2:	210a      	movs	r1, #10
 80076b4:	9100      	str	r1, [sp, #0]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff fdcf 	bl	800725a <simple_outputi>
 80076bc:	4602      	mov	r2, r0
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	4413      	add	r3, r2
 80076c2:	61fb      	str	r3, [r7, #28]
							break;
 80076c4:	e0f2      	b.n	80078ac <simple_vsprintf+0x530>

						case('u'):
							u.lu = va_arg(ap, unsigned long);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	1d1a      	adds	r2, r3, #4
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	613b      	str	r3, [r7, #16]
							pc += simple_outputi(out, u.lu, 10, 0, width, flags, 'a');
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	461a      	mov	r2, r3
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	2161      	movs	r1, #97	; 0x61
 80076da:	9104      	str	r1, [sp, #16]
 80076dc:	6a39      	ldr	r1, [r7, #32]
 80076de:	9103      	str	r1, [sp, #12]
 80076e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076e2:	9102      	str	r1, [sp, #8]
 80076e4:	2100      	movs	r1, #0
 80076e6:	9101      	str	r1, [sp, #4]
 80076e8:	210a      	movs	r1, #10
 80076ea:	9100      	str	r1, [sp, #0]
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff fdb4 	bl	800725a <simple_outputi>
 80076f2:	4602      	mov	r2, r0
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	4413      	add	r3, r2
 80076f8:	61fb      	str	r3, [r7, #28]
							break;
 80076fa:	e0d7      	b.n	80078ac <simple_vsprintf+0x530>

						case('x'):
							u.lu = va_arg(ap, unsigned long);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	1d1a      	adds	r2, r3, #4
 8007700:	607a      	str	r2, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	613b      	str	r3, [r7, #16]
							pc += simple_outputi(out, u.lu, 16, 0, width, flags, 'a');
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	461a      	mov	r2, r3
 800770a:	f04f 0300 	mov.w	r3, #0
 800770e:	2161      	movs	r1, #97	; 0x61
 8007710:	9104      	str	r1, [sp, #16]
 8007712:	6a39      	ldr	r1, [r7, #32]
 8007714:	9103      	str	r1, [sp, #12]
 8007716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007718:	9102      	str	r1, [sp, #8]
 800771a:	2100      	movs	r1, #0
 800771c:	9101      	str	r1, [sp, #4]
 800771e:	2110      	movs	r1, #16
 8007720:	9100      	str	r1, [sp, #0]
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f7ff fd99 	bl	800725a <simple_outputi>
 8007728:	4602      	mov	r2, r0
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	4413      	add	r3, r2
 800772e:	61fb      	str	r3, [r7, #28]
							break;
 8007730:	e0bc      	b.n	80078ac <simple_vsprintf+0x530>

						case('X'):
							u.lu = va_arg(ap, unsigned long);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	1d1a      	adds	r2, r3, #4
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	613b      	str	r3, [r7, #16]
							pc += simple_outputi(out, u.lu, 16, 0, width, flags, 'A');
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	461a      	mov	r2, r3
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	2141      	movs	r1, #65	; 0x41
 8007746:	9104      	str	r1, [sp, #16]
 8007748:	6a39      	ldr	r1, [r7, #32]
 800774a:	9103      	str	r1, [sp, #12]
 800774c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800774e:	9102      	str	r1, [sp, #8]
 8007750:	2100      	movs	r1, #0
 8007752:	9101      	str	r1, [sp, #4]
 8007754:	2110      	movs	r1, #16
 8007756:	9100      	str	r1, [sp, #0]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff fd7e 	bl	800725a <simple_outputi>
 800775e:	4602      	mov	r2, r0
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	4413      	add	r3, r2
 8007764:	61fb      	str	r3, [r7, #28]
							break;
 8007766:	e0a1      	b.n	80078ac <simple_vsprintf+0x530>

						case('l'):
							++format;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	3301      	adds	r3, #1
 800776c:	60bb      	str	r3, [r7, #8]
							switch (*format) {
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b78      	cmp	r3, #120	; 0x78
 8007774:	d04e      	beq.n	8007814 <simple_vsprintf+0x498>
 8007776:	2b78      	cmp	r3, #120	; 0x78
 8007778:	f300 8095 	bgt.w	80078a6 <simple_vsprintf+0x52a>
 800777c:	2b75      	cmp	r3, #117	; 0x75
 800777e:	d026      	beq.n	80077ce <simple_vsprintf+0x452>
 8007780:	2b75      	cmp	r3, #117	; 0x75
 8007782:	f300 8090 	bgt.w	80078a6 <simple_vsprintf+0x52a>
 8007786:	2b58      	cmp	r3, #88	; 0x58
 8007788:	d06a      	beq.n	8007860 <simple_vsprintf+0x4e4>
 800778a:	2b64      	cmp	r3, #100	; 0x64
 800778c:	f040 808b 	bne.w	80078a6 <simple_vsprintf+0x52a>
								case('d'):
									u.lli = va_arg(ap, long long);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3307      	adds	r3, #7
 8007794:	f023 0307 	bic.w	r3, r3, #7
 8007798:	f103 0208 	add.w	r2, r3, #8
 800779c:	607a      	str	r2, [r7, #4]
 800779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
									pc += simple_outputi(out, u.lli, 10, 1, width, flags, 'a');
 80077a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077aa:	2161      	movs	r1, #97	; 0x61
 80077ac:	9104      	str	r1, [sp, #16]
 80077ae:	6a39      	ldr	r1, [r7, #32]
 80077b0:	9103      	str	r1, [sp, #12]
 80077b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077b4:	9102      	str	r1, [sp, #8]
 80077b6:	2101      	movs	r1, #1
 80077b8:	9101      	str	r1, [sp, #4]
 80077ba:	210a      	movs	r1, #10
 80077bc:	9100      	str	r1, [sp, #0]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7ff fd4b 	bl	800725a <simple_outputi>
 80077c4:	4602      	mov	r2, r0
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	4413      	add	r3, r2
 80077ca:	61fb      	str	r3, [r7, #28]
									break;
 80077cc:	e06c      	b.n	80078a8 <simple_vsprintf+0x52c>

								case('u'):
									u.llu = va_arg(ap, unsigned long long);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3307      	adds	r3, #7
 80077d2:	f023 0307 	bic.w	r3, r3, #7
 80077d6:	f103 0208 	add.w	r2, r3, #8
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
									pc += simple_outputi(out, u.llu, 10, 0, width, flags, 'a');
 80077e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077e8:	4610      	mov	r0, r2
 80077ea:	4619      	mov	r1, r3
 80077ec:	2361      	movs	r3, #97	; 0x61
 80077ee:	9304      	str	r3, [sp, #16]
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	9303      	str	r3, [sp, #12]
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	9302      	str	r3, [sp, #8]
 80077f8:	2300      	movs	r3, #0
 80077fa:	9301      	str	r3, [sp, #4]
 80077fc:	230a      	movs	r3, #10
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f7ff fd28 	bl	800725a <simple_outputi>
 800780a:	4602      	mov	r2, r0
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	4413      	add	r3, r2
 8007810:	61fb      	str	r3, [r7, #28]
									break;
 8007812:	e049      	b.n	80078a8 <simple_vsprintf+0x52c>

								case('x'):
									u.llu = va_arg(ap, unsigned long long);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3307      	adds	r3, #7
 8007818:	f023 0307 	bic.w	r3, r3, #7
 800781c:	f103 0208 	add.w	r2, r3, #8
 8007820:	607a      	str	r2, [r7, #4]
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	e9c7 2304 	strd	r2, r3, [r7, #16]
									pc += simple_outputi(out, u.llu, 16, 0, width, flags, 'a');
 800782a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800782e:	4610      	mov	r0, r2
 8007830:	4619      	mov	r1, r3
 8007832:	2361      	movs	r3, #97	; 0x61
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	9303      	str	r3, [sp, #12]
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	9302      	str	r3, [sp, #8]
 800783e:	2300      	movs	r3, #0
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	2310      	movs	r3, #16
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f7ff fd05 	bl	800725a <simple_outputi>
 8007850:	4602      	mov	r2, r0
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	4413      	add	r3, r2
 8007856:	61fb      	str	r3, [r7, #28]
									break;
 8007858:	e026      	b.n	80078a8 <simple_vsprintf+0x52c>
 800785a:	bf00      	nop
 800785c:	080085bc 	.word	0x080085bc

								case('X'):
									u.llu = va_arg(ap, unsigned long long);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	3307      	adds	r3, #7
 8007864:	f023 0307 	bic.w	r3, r3, #7
 8007868:	f103 0208 	add.w	r2, r3, #8
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	e9c7 2304 	strd	r2, r3, [r7, #16]
									pc += simple_outputi(out, u.llu, 16, 0, width, flags, 'A');
 8007876:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800787a:	4610      	mov	r0, r2
 800787c:	4619      	mov	r1, r3
 800787e:	2341      	movs	r3, #65	; 0x41
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	9303      	str	r3, [sp, #12]
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	9302      	str	r3, [sp, #8]
 800788a:	2300      	movs	r3, #0
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	2310      	movs	r3, #16
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f7ff fcdf 	bl	800725a <simple_outputi>
 800789c:	4602      	mov	r2, r0
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	4413      	add	r3, r2
 80078a2:	61fb      	str	r3, [r7, #28]
									break;
 80078a4:	e000      	b.n	80078a8 <simple_vsprintf+0x52c>

								default:
									break;
 80078a6:	bf00      	nop
							}
							break;
 80078a8:	e000      	b.n	80078ac <simple_vsprintf+0x530>
						default:
							break;
 80078aa:	bf00      	nop
					}
					break;
 80078ac:	e147      	b.n	8007b3e <simple_vsprintf+0x7c2>
				case('h'):
					++format;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	3301      	adds	r3, #1
 80078b2:	60bb      	str	r3, [r7, #8]
					switch (*format) {
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	3b58      	subs	r3, #88	; 0x58
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	f200 812f 	bhi.w	8007b1e <simple_vsprintf+0x7a2>
 80078c0:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <simple_vsprintf+0x54c>)
 80078c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c6:	bf00      	nop
 80078c8:	080079ef 	.word	0x080079ef
 80078cc:	08007b1f 	.word	0x08007b1f
 80078d0:	08007b1f 	.word	0x08007b1f
 80078d4:	08007b1f 	.word	0x08007b1f
 80078d8:	08007b1f 	.word	0x08007b1f
 80078dc:	08007b1f 	.word	0x08007b1f
 80078e0:	08007b1f 	.word	0x08007b1f
 80078e4:	08007b1f 	.word	0x08007b1f
 80078e8:	08007b1f 	.word	0x08007b1f
 80078ec:	08007b1f 	.word	0x08007b1f
 80078f0:	08007b1f 	.word	0x08007b1f
 80078f4:	08007b1f 	.word	0x08007b1f
 80078f8:	0800794d 	.word	0x0800794d
 80078fc:	08007b1f 	.word	0x08007b1f
 8007900:	08007b1f 	.word	0x08007b1f
 8007904:	08007b1f 	.word	0x08007b1f
 8007908:	08007a23 	.word	0x08007a23
 800790c:	08007b1f 	.word	0x08007b1f
 8007910:	08007b1f 	.word	0x08007b1f
 8007914:	08007b1f 	.word	0x08007b1f
 8007918:	08007b1f 	.word	0x08007b1f
 800791c:	08007b1f 	.word	0x08007b1f
 8007920:	08007b1f 	.word	0x08007b1f
 8007924:	08007b1f 	.word	0x08007b1f
 8007928:	08007b1f 	.word	0x08007b1f
 800792c:	08007b1f 	.word	0x08007b1f
 8007930:	08007b1f 	.word	0x08007b1f
 8007934:	08007b1f 	.word	0x08007b1f
 8007938:	08007b1f 	.word	0x08007b1f
 800793c:	08007987 	.word	0x08007987
 8007940:	08007b1f 	.word	0x08007b1f
 8007944:	08007b1f 	.word	0x08007b1f
 8007948:	080079bb 	.word	0x080079bb
						case('d'):
							u.hi = va_arg(ap, int);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	1d1a      	adds	r2, r3, #4
 8007950:	607a      	str	r2, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	b21b      	sxth	r3, r3
 8007956:	823b      	strh	r3, [r7, #16]
							pc += simple_outputi(out, u.hi, 10, 1, width, flags, 'a');
 8007958:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800795c:	b21a      	sxth	r2, r3
 800795e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007962:	2161      	movs	r1, #97	; 0x61
 8007964:	9104      	str	r1, [sp, #16]
 8007966:	6a39      	ldr	r1, [r7, #32]
 8007968:	9103      	str	r1, [sp, #12]
 800796a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800796c:	9102      	str	r1, [sp, #8]
 800796e:	2101      	movs	r1, #1
 8007970:	9101      	str	r1, [sp, #4]
 8007972:	210a      	movs	r1, #10
 8007974:	9100      	str	r1, [sp, #0]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7ff fc6f 	bl	800725a <simple_outputi>
 800797c:	4602      	mov	r2, r0
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	4413      	add	r3, r2
 8007982:	61fb      	str	r3, [r7, #28]
							break;
 8007984:	e0cc      	b.n	8007b20 <simple_vsprintf+0x7a4>

						case('u'):
							u.hu = va_arg(ap, unsigned int);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	1d1a      	adds	r2, r3, #4
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	b29b      	uxth	r3, r3
 8007990:	823b      	strh	r3, [r7, #16]
							pc += simple_outputi(out, u.lli, 10, 0, width, flags, 'a');
 8007992:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007996:	2161      	movs	r1, #97	; 0x61
 8007998:	9104      	str	r1, [sp, #16]
 800799a:	6a39      	ldr	r1, [r7, #32]
 800799c:	9103      	str	r1, [sp, #12]
 800799e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079a0:	9102      	str	r1, [sp, #8]
 80079a2:	2100      	movs	r1, #0
 80079a4:	9101      	str	r1, [sp, #4]
 80079a6:	210a      	movs	r1, #10
 80079a8:	9100      	str	r1, [sp, #0]
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f7ff fc55 	bl	800725a <simple_outputi>
 80079b0:	4602      	mov	r2, r0
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	4413      	add	r3, r2
 80079b6:	61fb      	str	r3, [r7, #28]
							break;
 80079b8:	e0b2      	b.n	8007b20 <simple_vsprintf+0x7a4>

						case('x'):
							u.hu = va_arg(ap, unsigned int);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	1d1a      	adds	r2, r3, #4
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	823b      	strh	r3, [r7, #16]
							pc += simple_outputi(out, u.lli, 16, 0, width, flags, 'a');
 80079c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079ca:	2161      	movs	r1, #97	; 0x61
 80079cc:	9104      	str	r1, [sp, #16]
 80079ce:	6a39      	ldr	r1, [r7, #32]
 80079d0:	9103      	str	r1, [sp, #12]
 80079d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079d4:	9102      	str	r1, [sp, #8]
 80079d6:	2100      	movs	r1, #0
 80079d8:	9101      	str	r1, [sp, #4]
 80079da:	2110      	movs	r1, #16
 80079dc:	9100      	str	r1, [sp, #0]
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f7ff fc3b 	bl	800725a <simple_outputi>
 80079e4:	4602      	mov	r2, r0
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	61fb      	str	r3, [r7, #28]
							break;
 80079ec:	e098      	b.n	8007b20 <simple_vsprintf+0x7a4>

						case('X'):
							u.hu = va_arg(ap, unsigned int);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	1d1a      	adds	r2, r3, #4
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	823b      	strh	r3, [r7, #16]
							pc += simple_outputi(out, u.lli, 16, 0, width, flags, 'A');
 80079fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079fe:	2141      	movs	r1, #65	; 0x41
 8007a00:	9104      	str	r1, [sp, #16]
 8007a02:	6a39      	ldr	r1, [r7, #32]
 8007a04:	9103      	str	r1, [sp, #12]
 8007a06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a08:	9102      	str	r1, [sp, #8]
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	9101      	str	r1, [sp, #4]
 8007a0e:	2110      	movs	r1, #16
 8007a10:	9100      	str	r1, [sp, #0]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f7ff fc21 	bl	800725a <simple_outputi>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	61fb      	str	r3, [r7, #28]
							break;
 8007a20:	e07e      	b.n	8007b20 <simple_vsprintf+0x7a4>

						case('h'):
							++format;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	3301      	adds	r3, #1
 8007a26:	60bb      	str	r3, [r7, #8]
							switch (*format) {
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b78      	cmp	r3, #120	; 0x78
 8007a2e:	d040      	beq.n	8007ab2 <simple_vsprintf+0x736>
 8007a30:	2b78      	cmp	r3, #120	; 0x78
 8007a32:	dc72      	bgt.n	8007b1a <simple_vsprintf+0x79e>
 8007a34:	2b75      	cmp	r3, #117	; 0x75
 8007a36:	d022      	beq.n	8007a7e <simple_vsprintf+0x702>
 8007a38:	2b75      	cmp	r3, #117	; 0x75
 8007a3a:	dc6e      	bgt.n	8007b1a <simple_vsprintf+0x79e>
 8007a3c:	2b58      	cmp	r3, #88	; 0x58
 8007a3e:	d052      	beq.n	8007ae6 <simple_vsprintf+0x76a>
 8007a40:	2b64      	cmp	r3, #100	; 0x64
 8007a42:	d16a      	bne.n	8007b1a <simple_vsprintf+0x79e>
								case('d'):
									u.hhi = va_arg(ap, int);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	1d1a      	adds	r2, r3, #4
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	b25b      	sxtb	r3, r3
 8007a4e:	743b      	strb	r3, [r7, #16]
									pc += simple_outputi(out, u.hhi, 10, 1, width, flags, 'a');
 8007a50:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8007a54:	b25a      	sxtb	r2, r3
 8007a56:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007a5a:	2161      	movs	r1, #97	; 0x61
 8007a5c:	9104      	str	r1, [sp, #16]
 8007a5e:	6a39      	ldr	r1, [r7, #32]
 8007a60:	9103      	str	r1, [sp, #12]
 8007a62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a64:	9102      	str	r1, [sp, #8]
 8007a66:	2101      	movs	r1, #1
 8007a68:	9101      	str	r1, [sp, #4]
 8007a6a:	210a      	movs	r1, #10
 8007a6c:	9100      	str	r1, [sp, #0]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f7ff fbf3 	bl	800725a <simple_outputi>
 8007a74:	4602      	mov	r2, r0
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	4413      	add	r3, r2
 8007a7a:	61fb      	str	r3, [r7, #28]
									break;
 8007a7c:	e04e      	b.n	8007b1c <simple_vsprintf+0x7a0>

								case('u'):
									u.hhu = va_arg(ap, unsigned int);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	1d1a      	adds	r2, r3, #4
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	743b      	strb	r3, [r7, #16]
									pc += simple_outputi(out, u.lli, 10, 0, width, flags, 'a');
 8007a8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a8e:	2161      	movs	r1, #97	; 0x61
 8007a90:	9104      	str	r1, [sp, #16]
 8007a92:	6a39      	ldr	r1, [r7, #32]
 8007a94:	9103      	str	r1, [sp, #12]
 8007a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a98:	9102      	str	r1, [sp, #8]
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	9101      	str	r1, [sp, #4]
 8007a9e:	210a      	movs	r1, #10
 8007aa0:	9100      	str	r1, [sp, #0]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f7ff fbd9 	bl	800725a <simple_outputi>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	61fb      	str	r3, [r7, #28]
									break;
 8007ab0:	e034      	b.n	8007b1c <simple_vsprintf+0x7a0>

								case('x'):
									u.hhu = va_arg(ap, unsigned int);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	1d1a      	adds	r2, r3, #4
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	743b      	strb	r3, [r7, #16]
									pc += simple_outputi(out, u.lli, 16, 0, width, flags, 'a');
 8007abe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ac2:	2161      	movs	r1, #97	; 0x61
 8007ac4:	9104      	str	r1, [sp, #16]
 8007ac6:	6a39      	ldr	r1, [r7, #32]
 8007ac8:	9103      	str	r1, [sp, #12]
 8007aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007acc:	9102      	str	r1, [sp, #8]
 8007ace:	2100      	movs	r1, #0
 8007ad0:	9101      	str	r1, [sp, #4]
 8007ad2:	2110      	movs	r1, #16
 8007ad4:	9100      	str	r1, [sp, #0]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f7ff fbbf 	bl	800725a <simple_outputi>
 8007adc:	4602      	mov	r2, r0
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	61fb      	str	r3, [r7, #28]
									break;
 8007ae4:	e01a      	b.n	8007b1c <simple_vsprintf+0x7a0>

								case('X'):
									u.hhu = va_arg(ap, unsigned int);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	1d1a      	adds	r2, r3, #4
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	743b      	strb	r3, [r7, #16]
									pc += simple_outputi(out, u.lli, 16, 0, width, flags, 'A');
 8007af2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007af6:	2141      	movs	r1, #65	; 0x41
 8007af8:	9104      	str	r1, [sp, #16]
 8007afa:	6a39      	ldr	r1, [r7, #32]
 8007afc:	9103      	str	r1, [sp, #12]
 8007afe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b00:	9102      	str	r1, [sp, #8]
 8007b02:	2100      	movs	r1, #0
 8007b04:	9101      	str	r1, [sp, #4]
 8007b06:	2110      	movs	r1, #16
 8007b08:	9100      	str	r1, [sp, #0]
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f7ff fba5 	bl	800725a <simple_outputi>
 8007b10:	4602      	mov	r2, r0
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	4413      	add	r3, r2
 8007b16:	61fb      	str	r3, [r7, #28]
									break;
 8007b18:	e000      	b.n	8007b1c <simple_vsprintf+0x7a0>

								default:
									break;
 8007b1a:	bf00      	nop
							}
							break;
 8007b1c:	e000      	b.n	8007b20 <simple_vsprintf+0x7a4>
						default:
							break;
 8007b1e:	bf00      	nop
					}
					break;
 8007b20:	e00d      	b.n	8007b3e <simple_vsprintf+0x7c2>
				default:
					break;
			}
		}
		else {
out:
 8007b22:	bf00      	nop
 8007b24:	e000      	b.n	8007b28 <simple_vsprintf+0x7ac>
				goto out;
 8007b26:	bf00      	nop
			simple_outputchar (out, *format);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f7ff fb0e 	bl	8007150 <simple_outputchar>
			++pc;
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	3301      	adds	r3, #1
 8007b38:	61fb      	str	r3, [r7, #28]
 8007b3a:	e000      	b.n	8007b3e <simple_vsprintf+0x7c2>
					break;
 8007b3c:	bf00      	nop
	for (; *format != 0; ++format) {
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	3301      	adds	r3, #1
 8007b42:	60bb      	str	r3, [r7, #8]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f47f ac20 	bne.w	800738e <simple_vsprintf+0x12>
 8007b4e:	e000      	b.n	8007b52 <simple_vsprintf+0x7d6>
				break;
 8007b50:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <simple_vsprintf+0x7e4>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	701a      	strb	r2, [r3, #0]
	return pc;
 8007b60:	69fb      	ldr	r3, [r7, #28]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3728      	adds	r7, #40	; 0x28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop

08007b6c <simple_sprintf>:

	return r;
}

int simple_sprintf(char *buf, char *fmt, ...)
{
 8007b6c:	b40e      	push	{r1, r2, r3}
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b085      	sub	sp, #20
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
	va_list ap;
	int r;

	va_start(ap, fmt);
 8007b76:	f107 0320 	add.w	r3, r7, #32
 8007b7a:	60bb      	str	r3, [r7, #8]
	r = simple_vsprintf(&buf, fmt, ap);
 8007b7c:	1d3b      	adds	r3, r7, #4
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	69f9      	ldr	r1, [r7, #28]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff fbfa 	bl	800737c <simple_vsprintf>
 8007b88:	60f8      	str	r0, [r7, #12]
	va_end(ap);

	return r;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b96:	b003      	add	sp, #12
 8007b98:	4770      	bx	lr
	...

08007b9c <__errno>:
 8007b9c:	4b01      	ldr	r3, [pc, #4]	; (8007ba4 <__errno+0x8>)
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	2000000c 	.word	0x2000000c

08007ba8 <__libc_init_array>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	4d0d      	ldr	r5, [pc, #52]	; (8007be0 <__libc_init_array+0x38>)
 8007bac:	4c0d      	ldr	r4, [pc, #52]	; (8007be4 <__libc_init_array+0x3c>)
 8007bae:	1b64      	subs	r4, r4, r5
 8007bb0:	10a4      	asrs	r4, r4, #2
 8007bb2:	2600      	movs	r6, #0
 8007bb4:	42a6      	cmp	r6, r4
 8007bb6:	d109      	bne.n	8007bcc <__libc_init_array+0x24>
 8007bb8:	4d0b      	ldr	r5, [pc, #44]	; (8007be8 <__libc_init_array+0x40>)
 8007bba:	4c0c      	ldr	r4, [pc, #48]	; (8007bec <__libc_init_array+0x44>)
 8007bbc:	f000 fcca 	bl	8008554 <_init>
 8007bc0:	1b64      	subs	r4, r4, r5
 8007bc2:	10a4      	asrs	r4, r4, #2
 8007bc4:	2600      	movs	r6, #0
 8007bc6:	42a6      	cmp	r6, r4
 8007bc8:	d105      	bne.n	8007bd6 <__libc_init_array+0x2e>
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd0:	4798      	blx	r3
 8007bd2:	3601      	adds	r6, #1
 8007bd4:	e7ee      	b.n	8007bb4 <__libc_init_array+0xc>
 8007bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bda:	4798      	blx	r3
 8007bdc:	3601      	adds	r6, #1
 8007bde:	e7f2      	b.n	8007bc6 <__libc_init_array+0x1e>
 8007be0:	0800885c 	.word	0x0800885c
 8007be4:	0800885c 	.word	0x0800885c
 8007be8:	0800885c 	.word	0x0800885c
 8007bec:	08008860 	.word	0x08008860

08007bf0 <memset>:
 8007bf0:	4402      	add	r2, r0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d100      	bne.n	8007bfa <memset+0xa>
 8007bf8:	4770      	bx	lr
 8007bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8007bfe:	e7f9      	b.n	8007bf4 <memset+0x4>

08007c00 <putchar>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <putchar+0x24>)
 8007c04:	681c      	ldr	r4, [r3, #0]
 8007c06:	4605      	mov	r5, r0
 8007c08:	b124      	cbz	r4, 8007c14 <putchar+0x14>
 8007c0a:	69a3      	ldr	r3, [r4, #24]
 8007c0c:	b913      	cbnz	r3, 8007c14 <putchar+0x14>
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 f862 	bl	8007cd8 <__sinit>
 8007c14:	68a2      	ldr	r2, [r4, #8]
 8007c16:	4629      	mov	r1, r5
 8007c18:	4620      	mov	r0, r4
 8007c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c1e:	f000 b955 	b.w	8007ecc <_putc_r>
 8007c22:	bf00      	nop
 8007c24:	2000000c 	.word	0x2000000c

08007c28 <std>:
 8007c28:	2300      	movs	r3, #0
 8007c2a:	b510      	push	{r4, lr}
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c36:	6083      	str	r3, [r0, #8]
 8007c38:	8181      	strh	r1, [r0, #12]
 8007c3a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c3c:	81c2      	strh	r2, [r0, #14]
 8007c3e:	6183      	str	r3, [r0, #24]
 8007c40:	4619      	mov	r1, r3
 8007c42:	2208      	movs	r2, #8
 8007c44:	305c      	adds	r0, #92	; 0x5c
 8007c46:	f7ff ffd3 	bl	8007bf0 <memset>
 8007c4a:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <std+0x38>)
 8007c4c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c4e:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <std+0x3c>)
 8007c50:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c52:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <std+0x40>)
 8007c54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c56:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <std+0x44>)
 8007c58:	6224      	str	r4, [r4, #32]
 8007c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8007c5c:	bd10      	pop	{r4, pc}
 8007c5e:	bf00      	nop
 8007c60:	08007f7d 	.word	0x08007f7d
 8007c64:	08007f9f 	.word	0x08007f9f
 8007c68:	08007fd7 	.word	0x08007fd7
 8007c6c:	08007ffb 	.word	0x08007ffb

08007c70 <_cleanup_r>:
 8007c70:	4901      	ldr	r1, [pc, #4]	; (8007c78 <_cleanup_r+0x8>)
 8007c72:	f000 b8af 	b.w	8007dd4 <_fwalk_reent>
 8007c76:	bf00      	nop
 8007c78:	080082d5 	.word	0x080082d5

08007c7c <__sfmoreglue>:
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	1e4a      	subs	r2, r1, #1
 8007c80:	2568      	movs	r5, #104	; 0x68
 8007c82:	4355      	muls	r5, r2
 8007c84:	460e      	mov	r6, r1
 8007c86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c8a:	f000 f8c5 	bl	8007e18 <_malloc_r>
 8007c8e:	4604      	mov	r4, r0
 8007c90:	b140      	cbz	r0, 8007ca4 <__sfmoreglue+0x28>
 8007c92:	2100      	movs	r1, #0
 8007c94:	e9c0 1600 	strd	r1, r6, [r0]
 8007c98:	300c      	adds	r0, #12
 8007c9a:	60a0      	str	r0, [r4, #8]
 8007c9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ca0:	f7ff ffa6 	bl	8007bf0 <memset>
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	bd70      	pop	{r4, r5, r6, pc}

08007ca8 <__sfp_lock_acquire>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	; (8007cb0 <__sfp_lock_acquire+0x8>)
 8007caa:	f000 b8b3 	b.w	8007e14 <__retarget_lock_acquire_recursive>
 8007cae:	bf00      	nop
 8007cb0:	20000390 	.word	0x20000390

08007cb4 <__sfp_lock_release>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	; (8007cbc <__sfp_lock_release+0x8>)
 8007cb6:	f000 b8ae 	b.w	8007e16 <__retarget_lock_release_recursive>
 8007cba:	bf00      	nop
 8007cbc:	20000390 	.word	0x20000390

08007cc0 <__sinit_lock_acquire>:
 8007cc0:	4801      	ldr	r0, [pc, #4]	; (8007cc8 <__sinit_lock_acquire+0x8>)
 8007cc2:	f000 b8a7 	b.w	8007e14 <__retarget_lock_acquire_recursive>
 8007cc6:	bf00      	nop
 8007cc8:	2000038b 	.word	0x2000038b

08007ccc <__sinit_lock_release>:
 8007ccc:	4801      	ldr	r0, [pc, #4]	; (8007cd4 <__sinit_lock_release+0x8>)
 8007cce:	f000 b8a2 	b.w	8007e16 <__retarget_lock_release_recursive>
 8007cd2:	bf00      	nop
 8007cd4:	2000038b 	.word	0x2000038b

08007cd8 <__sinit>:
 8007cd8:	b510      	push	{r4, lr}
 8007cda:	4604      	mov	r4, r0
 8007cdc:	f7ff fff0 	bl	8007cc0 <__sinit_lock_acquire>
 8007ce0:	69a3      	ldr	r3, [r4, #24]
 8007ce2:	b11b      	cbz	r3, 8007cec <__sinit+0x14>
 8007ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce8:	f7ff bff0 	b.w	8007ccc <__sinit_lock_release>
 8007cec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cf0:	6523      	str	r3, [r4, #80]	; 0x50
 8007cf2:	4b13      	ldr	r3, [pc, #76]	; (8007d40 <__sinit+0x68>)
 8007cf4:	4a13      	ldr	r2, [pc, #76]	; (8007d44 <__sinit+0x6c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cfa:	42a3      	cmp	r3, r4
 8007cfc:	bf04      	itt	eq
 8007cfe:	2301      	moveq	r3, #1
 8007d00:	61a3      	streq	r3, [r4, #24]
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 f820 	bl	8007d48 <__sfp>
 8007d08:	6060      	str	r0, [r4, #4]
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f000 f81c 	bl	8007d48 <__sfp>
 8007d10:	60a0      	str	r0, [r4, #8]
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 f818 	bl	8007d48 <__sfp>
 8007d18:	2200      	movs	r2, #0
 8007d1a:	60e0      	str	r0, [r4, #12]
 8007d1c:	2104      	movs	r1, #4
 8007d1e:	6860      	ldr	r0, [r4, #4]
 8007d20:	f7ff ff82 	bl	8007c28 <std>
 8007d24:	68a0      	ldr	r0, [r4, #8]
 8007d26:	2201      	movs	r2, #1
 8007d28:	2109      	movs	r1, #9
 8007d2a:	f7ff ff7d 	bl	8007c28 <std>
 8007d2e:	68e0      	ldr	r0, [r4, #12]
 8007d30:	2202      	movs	r2, #2
 8007d32:	2112      	movs	r1, #18
 8007d34:	f7ff ff78 	bl	8007c28 <std>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	61a3      	str	r3, [r4, #24]
 8007d3c:	e7d2      	b.n	8007ce4 <__sinit+0xc>
 8007d3e:	bf00      	nop
 8007d40:	080087f0 	.word	0x080087f0
 8007d44:	08007c71 	.word	0x08007c71

08007d48 <__sfp>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	4607      	mov	r7, r0
 8007d4c:	f7ff ffac 	bl	8007ca8 <__sfp_lock_acquire>
 8007d50:	4b1e      	ldr	r3, [pc, #120]	; (8007dcc <__sfp+0x84>)
 8007d52:	681e      	ldr	r6, [r3, #0]
 8007d54:	69b3      	ldr	r3, [r6, #24]
 8007d56:	b913      	cbnz	r3, 8007d5e <__sfp+0x16>
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f7ff ffbd 	bl	8007cd8 <__sinit>
 8007d5e:	3648      	adds	r6, #72	; 0x48
 8007d60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	d503      	bpl.n	8007d70 <__sfp+0x28>
 8007d68:	6833      	ldr	r3, [r6, #0]
 8007d6a:	b30b      	cbz	r3, 8007db0 <__sfp+0x68>
 8007d6c:	6836      	ldr	r6, [r6, #0]
 8007d6e:	e7f7      	b.n	8007d60 <__sfp+0x18>
 8007d70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d74:	b9d5      	cbnz	r5, 8007dac <__sfp+0x64>
 8007d76:	4b16      	ldr	r3, [pc, #88]	; (8007dd0 <__sfp+0x88>)
 8007d78:	60e3      	str	r3, [r4, #12]
 8007d7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d7e:	6665      	str	r5, [r4, #100]	; 0x64
 8007d80:	f000 f847 	bl	8007e12 <__retarget_lock_init_recursive>
 8007d84:	f7ff ff96 	bl	8007cb4 <__sfp_lock_release>
 8007d88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d90:	6025      	str	r5, [r4, #0]
 8007d92:	61a5      	str	r5, [r4, #24]
 8007d94:	2208      	movs	r2, #8
 8007d96:	4629      	mov	r1, r5
 8007d98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d9c:	f7ff ff28 	bl	8007bf0 <memset>
 8007da0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007da4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007da8:	4620      	mov	r0, r4
 8007daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dac:	3468      	adds	r4, #104	; 0x68
 8007dae:	e7d9      	b.n	8007d64 <__sfp+0x1c>
 8007db0:	2104      	movs	r1, #4
 8007db2:	4638      	mov	r0, r7
 8007db4:	f7ff ff62 	bl	8007c7c <__sfmoreglue>
 8007db8:	4604      	mov	r4, r0
 8007dba:	6030      	str	r0, [r6, #0]
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d1d5      	bne.n	8007d6c <__sfp+0x24>
 8007dc0:	f7ff ff78 	bl	8007cb4 <__sfp_lock_release>
 8007dc4:	230c      	movs	r3, #12
 8007dc6:	603b      	str	r3, [r7, #0]
 8007dc8:	e7ee      	b.n	8007da8 <__sfp+0x60>
 8007dca:	bf00      	nop
 8007dcc:	080087f0 	.word	0x080087f0
 8007dd0:	ffff0001 	.word	0xffff0001

08007dd4 <_fwalk_reent>:
 8007dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd8:	4606      	mov	r6, r0
 8007dda:	4688      	mov	r8, r1
 8007ddc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007de0:	2700      	movs	r7, #0
 8007de2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007de6:	f1b9 0901 	subs.w	r9, r9, #1
 8007dea:	d505      	bpl.n	8007df8 <_fwalk_reent+0x24>
 8007dec:	6824      	ldr	r4, [r4, #0]
 8007dee:	2c00      	cmp	r4, #0
 8007df0:	d1f7      	bne.n	8007de2 <_fwalk_reent+0xe>
 8007df2:	4638      	mov	r0, r7
 8007df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007df8:	89ab      	ldrh	r3, [r5, #12]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d907      	bls.n	8007e0e <_fwalk_reent+0x3a>
 8007dfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e02:	3301      	adds	r3, #1
 8007e04:	d003      	beq.n	8007e0e <_fwalk_reent+0x3a>
 8007e06:	4629      	mov	r1, r5
 8007e08:	4630      	mov	r0, r6
 8007e0a:	47c0      	blx	r8
 8007e0c:	4307      	orrs	r7, r0
 8007e0e:	3568      	adds	r5, #104	; 0x68
 8007e10:	e7e9      	b.n	8007de6 <_fwalk_reent+0x12>

08007e12 <__retarget_lock_init_recursive>:
 8007e12:	4770      	bx	lr

08007e14 <__retarget_lock_acquire_recursive>:
 8007e14:	4770      	bx	lr

08007e16 <__retarget_lock_release_recursive>:
 8007e16:	4770      	bx	lr

08007e18 <_malloc_r>:
 8007e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1a:	1ccd      	adds	r5, r1, #3
 8007e1c:	f025 0503 	bic.w	r5, r5, #3
 8007e20:	3508      	adds	r5, #8
 8007e22:	2d0c      	cmp	r5, #12
 8007e24:	bf38      	it	cc
 8007e26:	250c      	movcc	r5, #12
 8007e28:	2d00      	cmp	r5, #0
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	db01      	blt.n	8007e32 <_malloc_r+0x1a>
 8007e2e:	42a9      	cmp	r1, r5
 8007e30:	d903      	bls.n	8007e3a <_malloc_r+0x22>
 8007e32:	230c      	movs	r3, #12
 8007e34:	6033      	str	r3, [r6, #0]
 8007e36:	2000      	movs	r0, #0
 8007e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e3a:	f000 fafd 	bl	8008438 <__malloc_lock>
 8007e3e:	4921      	ldr	r1, [pc, #132]	; (8007ec4 <_malloc_r+0xac>)
 8007e40:	680a      	ldr	r2, [r1, #0]
 8007e42:	4614      	mov	r4, r2
 8007e44:	b99c      	cbnz	r4, 8007e6e <_malloc_r+0x56>
 8007e46:	4f20      	ldr	r7, [pc, #128]	; (8007ec8 <_malloc_r+0xb0>)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	b923      	cbnz	r3, 8007e56 <_malloc_r+0x3e>
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f000 f884 	bl	8007f5c <_sbrk_r>
 8007e54:	6038      	str	r0, [r7, #0]
 8007e56:	4629      	mov	r1, r5
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f000 f87f 	bl	8007f5c <_sbrk_r>
 8007e5e:	1c43      	adds	r3, r0, #1
 8007e60:	d123      	bne.n	8007eaa <_malloc_r+0x92>
 8007e62:	230c      	movs	r3, #12
 8007e64:	6033      	str	r3, [r6, #0]
 8007e66:	4630      	mov	r0, r6
 8007e68:	f000 faec 	bl	8008444 <__malloc_unlock>
 8007e6c:	e7e3      	b.n	8007e36 <_malloc_r+0x1e>
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	1b5b      	subs	r3, r3, r5
 8007e72:	d417      	bmi.n	8007ea4 <_malloc_r+0x8c>
 8007e74:	2b0b      	cmp	r3, #11
 8007e76:	d903      	bls.n	8007e80 <_malloc_r+0x68>
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	441c      	add	r4, r3
 8007e7c:	6025      	str	r5, [r4, #0]
 8007e7e:	e004      	b.n	8007e8a <_malloc_r+0x72>
 8007e80:	6863      	ldr	r3, [r4, #4]
 8007e82:	42a2      	cmp	r2, r4
 8007e84:	bf0c      	ite	eq
 8007e86:	600b      	streq	r3, [r1, #0]
 8007e88:	6053      	strne	r3, [r2, #4]
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f000 fada 	bl	8008444 <__malloc_unlock>
 8007e90:	f104 000b 	add.w	r0, r4, #11
 8007e94:	1d23      	adds	r3, r4, #4
 8007e96:	f020 0007 	bic.w	r0, r0, #7
 8007e9a:	1ac2      	subs	r2, r0, r3
 8007e9c:	d0cc      	beq.n	8007e38 <_malloc_r+0x20>
 8007e9e:	1a1b      	subs	r3, r3, r0
 8007ea0:	50a3      	str	r3, [r4, r2]
 8007ea2:	e7c9      	b.n	8007e38 <_malloc_r+0x20>
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	6864      	ldr	r4, [r4, #4]
 8007ea8:	e7cc      	b.n	8007e44 <_malloc_r+0x2c>
 8007eaa:	1cc4      	adds	r4, r0, #3
 8007eac:	f024 0403 	bic.w	r4, r4, #3
 8007eb0:	42a0      	cmp	r0, r4
 8007eb2:	d0e3      	beq.n	8007e7c <_malloc_r+0x64>
 8007eb4:	1a21      	subs	r1, r4, r0
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f000 f850 	bl	8007f5c <_sbrk_r>
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d1dd      	bne.n	8007e7c <_malloc_r+0x64>
 8007ec0:	e7cf      	b.n	8007e62 <_malloc_r+0x4a>
 8007ec2:	bf00      	nop
 8007ec4:	200001c8 	.word	0x200001c8
 8007ec8:	200001cc 	.word	0x200001cc

08007ecc <_putc_r>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	460d      	mov	r5, r1
 8007ed0:	4614      	mov	r4, r2
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	b118      	cbz	r0, 8007ede <_putc_r+0x12>
 8007ed6:	6983      	ldr	r3, [r0, #24]
 8007ed8:	b90b      	cbnz	r3, 8007ede <_putc_r+0x12>
 8007eda:	f7ff fefd 	bl	8007cd8 <__sinit>
 8007ede:	4b1c      	ldr	r3, [pc, #112]	; (8007f50 <_putc_r+0x84>)
 8007ee0:	429c      	cmp	r4, r3
 8007ee2:	d124      	bne.n	8007f2e <_putc_r+0x62>
 8007ee4:	6874      	ldr	r4, [r6, #4]
 8007ee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ee8:	07d8      	lsls	r0, r3, #31
 8007eea:	d405      	bmi.n	8007ef8 <_putc_r+0x2c>
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	0599      	lsls	r1, r3, #22
 8007ef0:	d402      	bmi.n	8007ef8 <_putc_r+0x2c>
 8007ef2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ef4:	f7ff ff8e 	bl	8007e14 <__retarget_lock_acquire_recursive>
 8007ef8:	68a3      	ldr	r3, [r4, #8]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	60a3      	str	r3, [r4, #8]
 8007f00:	da05      	bge.n	8007f0e <_putc_r+0x42>
 8007f02:	69a2      	ldr	r2, [r4, #24]
 8007f04:	4293      	cmp	r3, r2
 8007f06:	db1c      	blt.n	8007f42 <_putc_r+0x76>
 8007f08:	b2eb      	uxtb	r3, r5
 8007f0a:	2b0a      	cmp	r3, #10
 8007f0c:	d019      	beq.n	8007f42 <_putc_r+0x76>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	6022      	str	r2, [r4, #0]
 8007f14:	701d      	strb	r5, [r3, #0]
 8007f16:	b2ed      	uxtb	r5, r5
 8007f18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f1a:	07da      	lsls	r2, r3, #31
 8007f1c:	d405      	bmi.n	8007f2a <_putc_r+0x5e>
 8007f1e:	89a3      	ldrh	r3, [r4, #12]
 8007f20:	059b      	lsls	r3, r3, #22
 8007f22:	d402      	bmi.n	8007f2a <_putc_r+0x5e>
 8007f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f26:	f7ff ff76 	bl	8007e16 <__retarget_lock_release_recursive>
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	bd70      	pop	{r4, r5, r6, pc}
 8007f2e:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <_putc_r+0x88>)
 8007f30:	429c      	cmp	r4, r3
 8007f32:	d101      	bne.n	8007f38 <_putc_r+0x6c>
 8007f34:	68b4      	ldr	r4, [r6, #8]
 8007f36:	e7d6      	b.n	8007ee6 <_putc_r+0x1a>
 8007f38:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <_putc_r+0x8c>)
 8007f3a:	429c      	cmp	r4, r3
 8007f3c:	bf08      	it	eq
 8007f3e:	68f4      	ldreq	r4, [r6, #12]
 8007f40:	e7d1      	b.n	8007ee6 <_putc_r+0x1a>
 8007f42:	4629      	mov	r1, r5
 8007f44:	4622      	mov	r2, r4
 8007f46:	4630      	mov	r0, r6
 8007f48:	f000 f85c 	bl	8008004 <__swbuf_r>
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	e7e3      	b.n	8007f18 <_putc_r+0x4c>
 8007f50:	08008814 	.word	0x08008814
 8007f54:	08008834 	.word	0x08008834
 8007f58:	080087f4 	.word	0x080087f4

08007f5c <_sbrk_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d06      	ldr	r5, [pc, #24]	; (8007f78 <_sbrk_r+0x1c>)
 8007f60:	2300      	movs	r3, #0
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	602b      	str	r3, [r5, #0]
 8007f68:	f7f8 fc02 	bl	8000770 <_sbrk>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_sbrk_r+0x1a>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_sbrk_r+0x1a>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	20000394 	.word	0x20000394

08007f7c <__sread>:
 8007f7c:	b510      	push	{r4, lr}
 8007f7e:	460c      	mov	r4, r1
 8007f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f84:	f000 fab2 	bl	80084ec <_read_r>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	bfab      	itete	ge
 8007f8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8007f90:	181b      	addge	r3, r3, r0
 8007f92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f96:	bfac      	ite	ge
 8007f98:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f9a:	81a3      	strhlt	r3, [r4, #12]
 8007f9c:	bd10      	pop	{r4, pc}

08007f9e <__swrite>:
 8007f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa2:	461f      	mov	r7, r3
 8007fa4:	898b      	ldrh	r3, [r1, #12]
 8007fa6:	05db      	lsls	r3, r3, #23
 8007fa8:	4605      	mov	r5, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	4616      	mov	r6, r2
 8007fae:	d505      	bpl.n	8007fbc <__swrite+0x1e>
 8007fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f000 f9c8 	bl	800834c <_lseek_r>
 8007fbc:	89a3      	ldrh	r3, [r4, #12]
 8007fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fc6:	81a3      	strh	r3, [r4, #12]
 8007fc8:	4632      	mov	r2, r6
 8007fca:	463b      	mov	r3, r7
 8007fcc:	4628      	mov	r0, r5
 8007fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd2:	f000 b869 	b.w	80080a8 <_write_r>

08007fd6 <__sseek>:
 8007fd6:	b510      	push	{r4, lr}
 8007fd8:	460c      	mov	r4, r1
 8007fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fde:	f000 f9b5 	bl	800834c <_lseek_r>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	bf15      	itete	ne
 8007fe8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ff2:	81a3      	strheq	r3, [r4, #12]
 8007ff4:	bf18      	it	ne
 8007ff6:	81a3      	strhne	r3, [r4, #12]
 8007ff8:	bd10      	pop	{r4, pc}

08007ffa <__sclose>:
 8007ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ffe:	f000 b8d3 	b.w	80081a8 <_close_r>
	...

08008004 <__swbuf_r>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	460e      	mov	r6, r1
 8008008:	4614      	mov	r4, r2
 800800a:	4605      	mov	r5, r0
 800800c:	b118      	cbz	r0, 8008016 <__swbuf_r+0x12>
 800800e:	6983      	ldr	r3, [r0, #24]
 8008010:	b90b      	cbnz	r3, 8008016 <__swbuf_r+0x12>
 8008012:	f7ff fe61 	bl	8007cd8 <__sinit>
 8008016:	4b21      	ldr	r3, [pc, #132]	; (800809c <__swbuf_r+0x98>)
 8008018:	429c      	cmp	r4, r3
 800801a:	d12b      	bne.n	8008074 <__swbuf_r+0x70>
 800801c:	686c      	ldr	r4, [r5, #4]
 800801e:	69a3      	ldr	r3, [r4, #24]
 8008020:	60a3      	str	r3, [r4, #8]
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	071a      	lsls	r2, r3, #28
 8008026:	d52f      	bpl.n	8008088 <__swbuf_r+0x84>
 8008028:	6923      	ldr	r3, [r4, #16]
 800802a:	b36b      	cbz	r3, 8008088 <__swbuf_r+0x84>
 800802c:	6923      	ldr	r3, [r4, #16]
 800802e:	6820      	ldr	r0, [r4, #0]
 8008030:	1ac0      	subs	r0, r0, r3
 8008032:	6963      	ldr	r3, [r4, #20]
 8008034:	b2f6      	uxtb	r6, r6
 8008036:	4283      	cmp	r3, r0
 8008038:	4637      	mov	r7, r6
 800803a:	dc04      	bgt.n	8008046 <__swbuf_r+0x42>
 800803c:	4621      	mov	r1, r4
 800803e:	4628      	mov	r0, r5
 8008040:	f000 f948 	bl	80082d4 <_fflush_r>
 8008044:	bb30      	cbnz	r0, 8008094 <__swbuf_r+0x90>
 8008046:	68a3      	ldr	r3, [r4, #8]
 8008048:	3b01      	subs	r3, #1
 800804a:	60a3      	str	r3, [r4, #8]
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	6022      	str	r2, [r4, #0]
 8008052:	701e      	strb	r6, [r3, #0]
 8008054:	6963      	ldr	r3, [r4, #20]
 8008056:	3001      	adds	r0, #1
 8008058:	4283      	cmp	r3, r0
 800805a:	d004      	beq.n	8008066 <__swbuf_r+0x62>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	07db      	lsls	r3, r3, #31
 8008060:	d506      	bpl.n	8008070 <__swbuf_r+0x6c>
 8008062:	2e0a      	cmp	r6, #10
 8008064:	d104      	bne.n	8008070 <__swbuf_r+0x6c>
 8008066:	4621      	mov	r1, r4
 8008068:	4628      	mov	r0, r5
 800806a:	f000 f933 	bl	80082d4 <_fflush_r>
 800806e:	b988      	cbnz	r0, 8008094 <__swbuf_r+0x90>
 8008070:	4638      	mov	r0, r7
 8008072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008074:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <__swbuf_r+0x9c>)
 8008076:	429c      	cmp	r4, r3
 8008078:	d101      	bne.n	800807e <__swbuf_r+0x7a>
 800807a:	68ac      	ldr	r4, [r5, #8]
 800807c:	e7cf      	b.n	800801e <__swbuf_r+0x1a>
 800807e:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <__swbuf_r+0xa0>)
 8008080:	429c      	cmp	r4, r3
 8008082:	bf08      	it	eq
 8008084:	68ec      	ldreq	r4, [r5, #12]
 8008086:	e7ca      	b.n	800801e <__swbuf_r+0x1a>
 8008088:	4621      	mov	r1, r4
 800808a:	4628      	mov	r0, r5
 800808c:	f000 f81e 	bl	80080cc <__swsetup_r>
 8008090:	2800      	cmp	r0, #0
 8008092:	d0cb      	beq.n	800802c <__swbuf_r+0x28>
 8008094:	f04f 37ff 	mov.w	r7, #4294967295
 8008098:	e7ea      	b.n	8008070 <__swbuf_r+0x6c>
 800809a:	bf00      	nop
 800809c:	08008814 	.word	0x08008814
 80080a0:	08008834 	.word	0x08008834
 80080a4:	080087f4 	.word	0x080087f4

080080a8 <_write_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d07      	ldr	r5, [pc, #28]	; (80080c8 <_write_r+0x20>)
 80080ac:	4604      	mov	r4, r0
 80080ae:	4608      	mov	r0, r1
 80080b0:	4611      	mov	r1, r2
 80080b2:	2200      	movs	r2, #0
 80080b4:	602a      	str	r2, [r5, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	f7f8 fb0d 	bl	80006d6 <_write>
 80080bc:	1c43      	adds	r3, r0, #1
 80080be:	d102      	bne.n	80080c6 <_write_r+0x1e>
 80080c0:	682b      	ldr	r3, [r5, #0]
 80080c2:	b103      	cbz	r3, 80080c6 <_write_r+0x1e>
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	20000394 	.word	0x20000394

080080cc <__swsetup_r>:
 80080cc:	4b32      	ldr	r3, [pc, #200]	; (8008198 <__swsetup_r+0xcc>)
 80080ce:	b570      	push	{r4, r5, r6, lr}
 80080d0:	681d      	ldr	r5, [r3, #0]
 80080d2:	4606      	mov	r6, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	b125      	cbz	r5, 80080e2 <__swsetup_r+0x16>
 80080d8:	69ab      	ldr	r3, [r5, #24]
 80080da:	b913      	cbnz	r3, 80080e2 <__swsetup_r+0x16>
 80080dc:	4628      	mov	r0, r5
 80080de:	f7ff fdfb 	bl	8007cd8 <__sinit>
 80080e2:	4b2e      	ldr	r3, [pc, #184]	; (800819c <__swsetup_r+0xd0>)
 80080e4:	429c      	cmp	r4, r3
 80080e6:	d10f      	bne.n	8008108 <__swsetup_r+0x3c>
 80080e8:	686c      	ldr	r4, [r5, #4]
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080f0:	0719      	lsls	r1, r3, #28
 80080f2:	d42c      	bmi.n	800814e <__swsetup_r+0x82>
 80080f4:	06dd      	lsls	r5, r3, #27
 80080f6:	d411      	bmi.n	800811c <__swsetup_r+0x50>
 80080f8:	2309      	movs	r3, #9
 80080fa:	6033      	str	r3, [r6, #0]
 80080fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008100:	81a3      	strh	r3, [r4, #12]
 8008102:	f04f 30ff 	mov.w	r0, #4294967295
 8008106:	e03e      	b.n	8008186 <__swsetup_r+0xba>
 8008108:	4b25      	ldr	r3, [pc, #148]	; (80081a0 <__swsetup_r+0xd4>)
 800810a:	429c      	cmp	r4, r3
 800810c:	d101      	bne.n	8008112 <__swsetup_r+0x46>
 800810e:	68ac      	ldr	r4, [r5, #8]
 8008110:	e7eb      	b.n	80080ea <__swsetup_r+0x1e>
 8008112:	4b24      	ldr	r3, [pc, #144]	; (80081a4 <__swsetup_r+0xd8>)
 8008114:	429c      	cmp	r4, r3
 8008116:	bf08      	it	eq
 8008118:	68ec      	ldreq	r4, [r5, #12]
 800811a:	e7e6      	b.n	80080ea <__swsetup_r+0x1e>
 800811c:	0758      	lsls	r0, r3, #29
 800811e:	d512      	bpl.n	8008146 <__swsetup_r+0x7a>
 8008120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008122:	b141      	cbz	r1, 8008136 <__swsetup_r+0x6a>
 8008124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008128:	4299      	cmp	r1, r3
 800812a:	d002      	beq.n	8008132 <__swsetup_r+0x66>
 800812c:	4630      	mov	r0, r6
 800812e:	f000 f98f 	bl	8008450 <_free_r>
 8008132:	2300      	movs	r3, #0
 8008134:	6363      	str	r3, [r4, #52]	; 0x34
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800813c:	81a3      	strh	r3, [r4, #12]
 800813e:	2300      	movs	r3, #0
 8008140:	6063      	str	r3, [r4, #4]
 8008142:	6923      	ldr	r3, [r4, #16]
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	f043 0308 	orr.w	r3, r3, #8
 800814c:	81a3      	strh	r3, [r4, #12]
 800814e:	6923      	ldr	r3, [r4, #16]
 8008150:	b94b      	cbnz	r3, 8008166 <__swsetup_r+0x9a>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800815c:	d003      	beq.n	8008166 <__swsetup_r+0x9a>
 800815e:	4621      	mov	r1, r4
 8008160:	4630      	mov	r0, r6
 8008162:	f000 f929 	bl	80083b8 <__smakebuf_r>
 8008166:	89a0      	ldrh	r0, [r4, #12]
 8008168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800816c:	f010 0301 	ands.w	r3, r0, #1
 8008170:	d00a      	beq.n	8008188 <__swsetup_r+0xbc>
 8008172:	2300      	movs	r3, #0
 8008174:	60a3      	str	r3, [r4, #8]
 8008176:	6963      	ldr	r3, [r4, #20]
 8008178:	425b      	negs	r3, r3
 800817a:	61a3      	str	r3, [r4, #24]
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	b943      	cbnz	r3, 8008192 <__swsetup_r+0xc6>
 8008180:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008184:	d1ba      	bne.n	80080fc <__swsetup_r+0x30>
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	0781      	lsls	r1, r0, #30
 800818a:	bf58      	it	pl
 800818c:	6963      	ldrpl	r3, [r4, #20]
 800818e:	60a3      	str	r3, [r4, #8]
 8008190:	e7f4      	b.n	800817c <__swsetup_r+0xb0>
 8008192:	2000      	movs	r0, #0
 8008194:	e7f7      	b.n	8008186 <__swsetup_r+0xba>
 8008196:	bf00      	nop
 8008198:	2000000c 	.word	0x2000000c
 800819c:	08008814 	.word	0x08008814
 80081a0:	08008834 	.word	0x08008834
 80081a4:	080087f4 	.word	0x080087f4

080081a8 <_close_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d06      	ldr	r5, [pc, #24]	; (80081c4 <_close_r+0x1c>)
 80081ac:	2300      	movs	r3, #0
 80081ae:	4604      	mov	r4, r0
 80081b0:	4608      	mov	r0, r1
 80081b2:	602b      	str	r3, [r5, #0]
 80081b4:	f7f8 faab 	bl	800070e <_close>
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	d102      	bne.n	80081c2 <_close_r+0x1a>
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	b103      	cbz	r3, 80081c2 <_close_r+0x1a>
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	20000394 	.word	0x20000394

080081c8 <__sflush_r>:
 80081c8:	898a      	ldrh	r2, [r1, #12]
 80081ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ce:	4605      	mov	r5, r0
 80081d0:	0710      	lsls	r0, r2, #28
 80081d2:	460c      	mov	r4, r1
 80081d4:	d458      	bmi.n	8008288 <__sflush_r+0xc0>
 80081d6:	684b      	ldr	r3, [r1, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	dc05      	bgt.n	80081e8 <__sflush_r+0x20>
 80081dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081de:	2b00      	cmp	r3, #0
 80081e0:	dc02      	bgt.n	80081e8 <__sflush_r+0x20>
 80081e2:	2000      	movs	r0, #0
 80081e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081ea:	2e00      	cmp	r6, #0
 80081ec:	d0f9      	beq.n	80081e2 <__sflush_r+0x1a>
 80081ee:	2300      	movs	r3, #0
 80081f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081f4:	682f      	ldr	r7, [r5, #0]
 80081f6:	602b      	str	r3, [r5, #0]
 80081f8:	d032      	beq.n	8008260 <__sflush_r+0x98>
 80081fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	075a      	lsls	r2, r3, #29
 8008200:	d505      	bpl.n	800820e <__sflush_r+0x46>
 8008202:	6863      	ldr	r3, [r4, #4]
 8008204:	1ac0      	subs	r0, r0, r3
 8008206:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008208:	b10b      	cbz	r3, 800820e <__sflush_r+0x46>
 800820a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800820c:	1ac0      	subs	r0, r0, r3
 800820e:	2300      	movs	r3, #0
 8008210:	4602      	mov	r2, r0
 8008212:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008214:	6a21      	ldr	r1, [r4, #32]
 8008216:	4628      	mov	r0, r5
 8008218:	47b0      	blx	r6
 800821a:	1c43      	adds	r3, r0, #1
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	d106      	bne.n	800822e <__sflush_r+0x66>
 8008220:	6829      	ldr	r1, [r5, #0]
 8008222:	291d      	cmp	r1, #29
 8008224:	d82c      	bhi.n	8008280 <__sflush_r+0xb8>
 8008226:	4a2a      	ldr	r2, [pc, #168]	; (80082d0 <__sflush_r+0x108>)
 8008228:	40ca      	lsrs	r2, r1
 800822a:	07d6      	lsls	r6, r2, #31
 800822c:	d528      	bpl.n	8008280 <__sflush_r+0xb8>
 800822e:	2200      	movs	r2, #0
 8008230:	6062      	str	r2, [r4, #4]
 8008232:	04d9      	lsls	r1, r3, #19
 8008234:	6922      	ldr	r2, [r4, #16]
 8008236:	6022      	str	r2, [r4, #0]
 8008238:	d504      	bpl.n	8008244 <__sflush_r+0x7c>
 800823a:	1c42      	adds	r2, r0, #1
 800823c:	d101      	bne.n	8008242 <__sflush_r+0x7a>
 800823e:	682b      	ldr	r3, [r5, #0]
 8008240:	b903      	cbnz	r3, 8008244 <__sflush_r+0x7c>
 8008242:	6560      	str	r0, [r4, #84]	; 0x54
 8008244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008246:	602f      	str	r7, [r5, #0]
 8008248:	2900      	cmp	r1, #0
 800824a:	d0ca      	beq.n	80081e2 <__sflush_r+0x1a>
 800824c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008250:	4299      	cmp	r1, r3
 8008252:	d002      	beq.n	800825a <__sflush_r+0x92>
 8008254:	4628      	mov	r0, r5
 8008256:	f000 f8fb 	bl	8008450 <_free_r>
 800825a:	2000      	movs	r0, #0
 800825c:	6360      	str	r0, [r4, #52]	; 0x34
 800825e:	e7c1      	b.n	80081e4 <__sflush_r+0x1c>
 8008260:	6a21      	ldr	r1, [r4, #32]
 8008262:	2301      	movs	r3, #1
 8008264:	4628      	mov	r0, r5
 8008266:	47b0      	blx	r6
 8008268:	1c41      	adds	r1, r0, #1
 800826a:	d1c7      	bne.n	80081fc <__sflush_r+0x34>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0c4      	beq.n	80081fc <__sflush_r+0x34>
 8008272:	2b1d      	cmp	r3, #29
 8008274:	d001      	beq.n	800827a <__sflush_r+0xb2>
 8008276:	2b16      	cmp	r3, #22
 8008278:	d101      	bne.n	800827e <__sflush_r+0xb6>
 800827a:	602f      	str	r7, [r5, #0]
 800827c:	e7b1      	b.n	80081e2 <__sflush_r+0x1a>
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008284:	81a3      	strh	r3, [r4, #12]
 8008286:	e7ad      	b.n	80081e4 <__sflush_r+0x1c>
 8008288:	690f      	ldr	r7, [r1, #16]
 800828a:	2f00      	cmp	r7, #0
 800828c:	d0a9      	beq.n	80081e2 <__sflush_r+0x1a>
 800828e:	0793      	lsls	r3, r2, #30
 8008290:	680e      	ldr	r6, [r1, #0]
 8008292:	bf08      	it	eq
 8008294:	694b      	ldreq	r3, [r1, #20]
 8008296:	600f      	str	r7, [r1, #0]
 8008298:	bf18      	it	ne
 800829a:	2300      	movne	r3, #0
 800829c:	eba6 0807 	sub.w	r8, r6, r7
 80082a0:	608b      	str	r3, [r1, #8]
 80082a2:	f1b8 0f00 	cmp.w	r8, #0
 80082a6:	dd9c      	ble.n	80081e2 <__sflush_r+0x1a>
 80082a8:	6a21      	ldr	r1, [r4, #32]
 80082aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082ac:	4643      	mov	r3, r8
 80082ae:	463a      	mov	r2, r7
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b0      	blx	r6
 80082b4:	2800      	cmp	r0, #0
 80082b6:	dc06      	bgt.n	80082c6 <__sflush_r+0xfe>
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295
 80082c4:	e78e      	b.n	80081e4 <__sflush_r+0x1c>
 80082c6:	4407      	add	r7, r0
 80082c8:	eba8 0800 	sub.w	r8, r8, r0
 80082cc:	e7e9      	b.n	80082a2 <__sflush_r+0xda>
 80082ce:	bf00      	nop
 80082d0:	20400001 	.word	0x20400001

080082d4 <_fflush_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	690b      	ldr	r3, [r1, #16]
 80082d8:	4605      	mov	r5, r0
 80082da:	460c      	mov	r4, r1
 80082dc:	b913      	cbnz	r3, 80082e4 <_fflush_r+0x10>
 80082de:	2500      	movs	r5, #0
 80082e0:	4628      	mov	r0, r5
 80082e2:	bd38      	pop	{r3, r4, r5, pc}
 80082e4:	b118      	cbz	r0, 80082ee <_fflush_r+0x1a>
 80082e6:	6983      	ldr	r3, [r0, #24]
 80082e8:	b90b      	cbnz	r3, 80082ee <_fflush_r+0x1a>
 80082ea:	f7ff fcf5 	bl	8007cd8 <__sinit>
 80082ee:	4b14      	ldr	r3, [pc, #80]	; (8008340 <_fflush_r+0x6c>)
 80082f0:	429c      	cmp	r4, r3
 80082f2:	d11b      	bne.n	800832c <_fflush_r+0x58>
 80082f4:	686c      	ldr	r4, [r5, #4]
 80082f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0ef      	beq.n	80082de <_fflush_r+0xa>
 80082fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008300:	07d0      	lsls	r0, r2, #31
 8008302:	d404      	bmi.n	800830e <_fflush_r+0x3a>
 8008304:	0599      	lsls	r1, r3, #22
 8008306:	d402      	bmi.n	800830e <_fflush_r+0x3a>
 8008308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800830a:	f7ff fd83 	bl	8007e14 <__retarget_lock_acquire_recursive>
 800830e:	4628      	mov	r0, r5
 8008310:	4621      	mov	r1, r4
 8008312:	f7ff ff59 	bl	80081c8 <__sflush_r>
 8008316:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008318:	07da      	lsls	r2, r3, #31
 800831a:	4605      	mov	r5, r0
 800831c:	d4e0      	bmi.n	80082e0 <_fflush_r+0xc>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	059b      	lsls	r3, r3, #22
 8008322:	d4dd      	bmi.n	80082e0 <_fflush_r+0xc>
 8008324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008326:	f7ff fd76 	bl	8007e16 <__retarget_lock_release_recursive>
 800832a:	e7d9      	b.n	80082e0 <_fflush_r+0xc>
 800832c:	4b05      	ldr	r3, [pc, #20]	; (8008344 <_fflush_r+0x70>)
 800832e:	429c      	cmp	r4, r3
 8008330:	d101      	bne.n	8008336 <_fflush_r+0x62>
 8008332:	68ac      	ldr	r4, [r5, #8]
 8008334:	e7df      	b.n	80082f6 <_fflush_r+0x22>
 8008336:	4b04      	ldr	r3, [pc, #16]	; (8008348 <_fflush_r+0x74>)
 8008338:	429c      	cmp	r4, r3
 800833a:	bf08      	it	eq
 800833c:	68ec      	ldreq	r4, [r5, #12]
 800833e:	e7da      	b.n	80082f6 <_fflush_r+0x22>
 8008340:	08008814 	.word	0x08008814
 8008344:	08008834 	.word	0x08008834
 8008348:	080087f4 	.word	0x080087f4

0800834c <_lseek_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d07      	ldr	r5, [pc, #28]	; (800836c <_lseek_r+0x20>)
 8008350:	4604      	mov	r4, r0
 8008352:	4608      	mov	r0, r1
 8008354:	4611      	mov	r1, r2
 8008356:	2200      	movs	r2, #0
 8008358:	602a      	str	r2, [r5, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	f7f8 f9fb 	bl	8000756 <_lseek>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_lseek_r+0x1e>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_lseek_r+0x1e>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	20000394 	.word	0x20000394

08008370 <__swhatbuf_r>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	460e      	mov	r6, r1
 8008374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008378:	2900      	cmp	r1, #0
 800837a:	b096      	sub	sp, #88	; 0x58
 800837c:	4614      	mov	r4, r2
 800837e:	461d      	mov	r5, r3
 8008380:	da07      	bge.n	8008392 <__swhatbuf_r+0x22>
 8008382:	2300      	movs	r3, #0
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	89b3      	ldrh	r3, [r6, #12]
 8008388:	061a      	lsls	r2, r3, #24
 800838a:	d410      	bmi.n	80083ae <__swhatbuf_r+0x3e>
 800838c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008390:	e00e      	b.n	80083b0 <__swhatbuf_r+0x40>
 8008392:	466a      	mov	r2, sp
 8008394:	f000 f8bc 	bl	8008510 <_fstat_r>
 8008398:	2800      	cmp	r0, #0
 800839a:	dbf2      	blt.n	8008382 <__swhatbuf_r+0x12>
 800839c:	9a01      	ldr	r2, [sp, #4]
 800839e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083a6:	425a      	negs	r2, r3
 80083a8:	415a      	adcs	r2, r3
 80083aa:	602a      	str	r2, [r5, #0]
 80083ac:	e7ee      	b.n	800838c <__swhatbuf_r+0x1c>
 80083ae:	2340      	movs	r3, #64	; 0x40
 80083b0:	2000      	movs	r0, #0
 80083b2:	6023      	str	r3, [r4, #0]
 80083b4:	b016      	add	sp, #88	; 0x58
 80083b6:	bd70      	pop	{r4, r5, r6, pc}

080083b8 <__smakebuf_r>:
 80083b8:	898b      	ldrh	r3, [r1, #12]
 80083ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083bc:	079d      	lsls	r5, r3, #30
 80083be:	4606      	mov	r6, r0
 80083c0:	460c      	mov	r4, r1
 80083c2:	d507      	bpl.n	80083d4 <__smakebuf_r+0x1c>
 80083c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	6123      	str	r3, [r4, #16]
 80083cc:	2301      	movs	r3, #1
 80083ce:	6163      	str	r3, [r4, #20]
 80083d0:	b002      	add	sp, #8
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	ab01      	add	r3, sp, #4
 80083d6:	466a      	mov	r2, sp
 80083d8:	f7ff ffca 	bl	8008370 <__swhatbuf_r>
 80083dc:	9900      	ldr	r1, [sp, #0]
 80083de:	4605      	mov	r5, r0
 80083e0:	4630      	mov	r0, r6
 80083e2:	f7ff fd19 	bl	8007e18 <_malloc_r>
 80083e6:	b948      	cbnz	r0, 80083fc <__smakebuf_r+0x44>
 80083e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ec:	059a      	lsls	r2, r3, #22
 80083ee:	d4ef      	bmi.n	80083d0 <__smakebuf_r+0x18>
 80083f0:	f023 0303 	bic.w	r3, r3, #3
 80083f4:	f043 0302 	orr.w	r3, r3, #2
 80083f8:	81a3      	strh	r3, [r4, #12]
 80083fa:	e7e3      	b.n	80083c4 <__smakebuf_r+0xc>
 80083fc:	4b0d      	ldr	r3, [pc, #52]	; (8008434 <__smakebuf_r+0x7c>)
 80083fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	6020      	str	r0, [r4, #0]
 8008404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008408:	81a3      	strh	r3, [r4, #12]
 800840a:	9b00      	ldr	r3, [sp, #0]
 800840c:	6163      	str	r3, [r4, #20]
 800840e:	9b01      	ldr	r3, [sp, #4]
 8008410:	6120      	str	r0, [r4, #16]
 8008412:	b15b      	cbz	r3, 800842c <__smakebuf_r+0x74>
 8008414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008418:	4630      	mov	r0, r6
 800841a:	f000 f88b 	bl	8008534 <_isatty_r>
 800841e:	b128      	cbz	r0, 800842c <__smakebuf_r+0x74>
 8008420:	89a3      	ldrh	r3, [r4, #12]
 8008422:	f023 0303 	bic.w	r3, r3, #3
 8008426:	f043 0301 	orr.w	r3, r3, #1
 800842a:	81a3      	strh	r3, [r4, #12]
 800842c:	89a0      	ldrh	r0, [r4, #12]
 800842e:	4305      	orrs	r5, r0
 8008430:	81a5      	strh	r5, [r4, #12]
 8008432:	e7cd      	b.n	80083d0 <__smakebuf_r+0x18>
 8008434:	08007c71 	.word	0x08007c71

08008438 <__malloc_lock>:
 8008438:	4801      	ldr	r0, [pc, #4]	; (8008440 <__malloc_lock+0x8>)
 800843a:	f7ff bceb 	b.w	8007e14 <__retarget_lock_acquire_recursive>
 800843e:	bf00      	nop
 8008440:	2000038c 	.word	0x2000038c

08008444 <__malloc_unlock>:
 8008444:	4801      	ldr	r0, [pc, #4]	; (800844c <__malloc_unlock+0x8>)
 8008446:	f7ff bce6 	b.w	8007e16 <__retarget_lock_release_recursive>
 800844a:	bf00      	nop
 800844c:	2000038c 	.word	0x2000038c

08008450 <_free_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4605      	mov	r5, r0
 8008454:	2900      	cmp	r1, #0
 8008456:	d045      	beq.n	80084e4 <_free_r+0x94>
 8008458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800845c:	1f0c      	subs	r4, r1, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	bfb8      	it	lt
 8008462:	18e4      	addlt	r4, r4, r3
 8008464:	f7ff ffe8 	bl	8008438 <__malloc_lock>
 8008468:	4a1f      	ldr	r2, [pc, #124]	; (80084e8 <_free_r+0x98>)
 800846a:	6813      	ldr	r3, [r2, #0]
 800846c:	4610      	mov	r0, r2
 800846e:	b933      	cbnz	r3, 800847e <_free_r+0x2e>
 8008470:	6063      	str	r3, [r4, #4]
 8008472:	6014      	str	r4, [r2, #0]
 8008474:	4628      	mov	r0, r5
 8008476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800847a:	f7ff bfe3 	b.w	8008444 <__malloc_unlock>
 800847e:	42a3      	cmp	r3, r4
 8008480:	d90b      	bls.n	800849a <_free_r+0x4a>
 8008482:	6821      	ldr	r1, [r4, #0]
 8008484:	1862      	adds	r2, r4, r1
 8008486:	4293      	cmp	r3, r2
 8008488:	bf04      	itt	eq
 800848a:	681a      	ldreq	r2, [r3, #0]
 800848c:	685b      	ldreq	r3, [r3, #4]
 800848e:	6063      	str	r3, [r4, #4]
 8008490:	bf04      	itt	eq
 8008492:	1852      	addeq	r2, r2, r1
 8008494:	6022      	streq	r2, [r4, #0]
 8008496:	6004      	str	r4, [r0, #0]
 8008498:	e7ec      	b.n	8008474 <_free_r+0x24>
 800849a:	461a      	mov	r2, r3
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	b10b      	cbz	r3, 80084a4 <_free_r+0x54>
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	d9fa      	bls.n	800849a <_free_r+0x4a>
 80084a4:	6811      	ldr	r1, [r2, #0]
 80084a6:	1850      	adds	r0, r2, r1
 80084a8:	42a0      	cmp	r0, r4
 80084aa:	d10b      	bne.n	80084c4 <_free_r+0x74>
 80084ac:	6820      	ldr	r0, [r4, #0]
 80084ae:	4401      	add	r1, r0
 80084b0:	1850      	adds	r0, r2, r1
 80084b2:	4283      	cmp	r3, r0
 80084b4:	6011      	str	r1, [r2, #0]
 80084b6:	d1dd      	bne.n	8008474 <_free_r+0x24>
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	6053      	str	r3, [r2, #4]
 80084be:	4401      	add	r1, r0
 80084c0:	6011      	str	r1, [r2, #0]
 80084c2:	e7d7      	b.n	8008474 <_free_r+0x24>
 80084c4:	d902      	bls.n	80084cc <_free_r+0x7c>
 80084c6:	230c      	movs	r3, #12
 80084c8:	602b      	str	r3, [r5, #0]
 80084ca:	e7d3      	b.n	8008474 <_free_r+0x24>
 80084cc:	6820      	ldr	r0, [r4, #0]
 80084ce:	1821      	adds	r1, r4, r0
 80084d0:	428b      	cmp	r3, r1
 80084d2:	bf04      	itt	eq
 80084d4:	6819      	ldreq	r1, [r3, #0]
 80084d6:	685b      	ldreq	r3, [r3, #4]
 80084d8:	6063      	str	r3, [r4, #4]
 80084da:	bf04      	itt	eq
 80084dc:	1809      	addeq	r1, r1, r0
 80084de:	6021      	streq	r1, [r4, #0]
 80084e0:	6054      	str	r4, [r2, #4]
 80084e2:	e7c7      	b.n	8008474 <_free_r+0x24>
 80084e4:	bd38      	pop	{r3, r4, r5, pc}
 80084e6:	bf00      	nop
 80084e8:	200001c8 	.word	0x200001c8

080084ec <_read_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4d07      	ldr	r5, [pc, #28]	; (800850c <_read_r+0x20>)
 80084f0:	4604      	mov	r4, r0
 80084f2:	4608      	mov	r0, r1
 80084f4:	4611      	mov	r1, r2
 80084f6:	2200      	movs	r2, #0
 80084f8:	602a      	str	r2, [r5, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	f7f8 f8ce 	bl	800069c <_read>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d102      	bne.n	800850a <_read_r+0x1e>
 8008504:	682b      	ldr	r3, [r5, #0]
 8008506:	b103      	cbz	r3, 800850a <_read_r+0x1e>
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	20000394 	.word	0x20000394

08008510 <_fstat_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4d07      	ldr	r5, [pc, #28]	; (8008530 <_fstat_r+0x20>)
 8008514:	2300      	movs	r3, #0
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	4611      	mov	r1, r2
 800851c:	602b      	str	r3, [r5, #0]
 800851e:	f7f8 f901 	bl	8000724 <_fstat>
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	d102      	bne.n	800852c <_fstat_r+0x1c>
 8008526:	682b      	ldr	r3, [r5, #0]
 8008528:	b103      	cbz	r3, 800852c <_fstat_r+0x1c>
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	20000394 	.word	0x20000394

08008534 <_isatty_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4d06      	ldr	r5, [pc, #24]	; (8008550 <_isatty_r+0x1c>)
 8008538:	2300      	movs	r3, #0
 800853a:	4604      	mov	r4, r0
 800853c:	4608      	mov	r0, r1
 800853e:	602b      	str	r3, [r5, #0]
 8008540:	f7f8 f8ff 	bl	8000742 <_isatty>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	d102      	bne.n	800854e <_isatty_r+0x1a>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	b103      	cbz	r3, 800854e <_isatty_r+0x1a>
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	20000394 	.word	0x20000394

08008554 <_init>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	bf00      	nop
 8008558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855a:	bc08      	pop	{r3}
 800855c:	469e      	mov	lr, r3
 800855e:	4770      	bx	lr

08008560 <_fini>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	bf00      	nop
 8008564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008566:	bc08      	pop	{r3}
 8008568:	469e      	mov	lr, r3
 800856a:	4770      	bx	lr
